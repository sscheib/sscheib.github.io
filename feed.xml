<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://blog.scheib.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.scheib.me/" rel="alternate" type="text/html" /><updated>2025-06-17T20:10:47+00:00</updated><id>https://blog.scheib.me/feed.xml</id><title type="html">Steffen’s random thoughts</title><subtitle>This my personal blog, where I post about things that I do and find interesting. All posts and thoughts on this blog are solely my opinion and are not related to my employer.</subtitle><author><name>Steffen Scheib</name></author><entry><title type="html">Writing efficient Ansible code - An unpopular opinion</title><link href="https://blog.scheib.me/2024/06/04/efficient-ansible-code.html" rel="alternate" type="text/html" title="Writing efficient Ansible code - An unpopular opinion" /><published>2024-06-04T00:00:00+00:00</published><updated>2024-06-04T00:00:00+00:00</updated><id>https://blog.scheib.me/2024/06/04/efficient-ansible-code</id><content type="html" xml:base="https://blog.scheib.me/2024/06/04/efficient-ansible-code.html"><![CDATA[<h2 id="preface">Preface</h2>

<p><strong>Writing simple Ansible code is outdated and you shouldn’t do it anymore in 2024.</strong></p>

<p>I know this is a bold statement, but I guess I have your attention now :sunglasses:.</p>

<p>With this blog post I’d like to explain my way of writing Ansible code and why I think the days where Ansible was just <em>simple</em> are no more. I know, this is an unpopular
opinion, but hear me out first, please.</p>

<h2 id="ansibles-origin">Ansible’s origin</h2>

<p>Ansible started of as a simple, easy to use automation language, which is based on <a href="https://yaml.org/"><code class="language-plaintext highlighter-rouge">YAML</code></a> and therefore pretty much self-explanatory. In fact, Ansible
still is (mostly) the same language and is still marketed as such <sup id="fnref:ansible_intro" role="doc-noteref"><a href="#fn:ansible_intro" class="footnote" rel="footnote">1</a></sup>:</p>

<blockquote>
  <p>Ansible uses simple, human-readable scripts called playbooks to automate your tasks. You declare the desired state of a local or remote system in your playbook. Ansible
ensures that the system remains in that state.</p>
</blockquote>

<p>While this is still the case today for smaller deployments, we are in a different time. Remember, Ansible was <a href="https://en.wikipedia.org/wiki/Ansible_(software)">released</a> way
back in 2012 where there were simply other needs.</p>

<p>Tasks would commonly be written something like this:</p>

<script src="https://gist.github.com/51faef45c51def24084891b850417ce4.js"> </script>

<p>:information_source: While this still works today, please do not make it a habit to write tasks like that. It’s just not up-to-date anymore.</p>

<p>As you can imagine, with just one or two module options, this was okay back then. But as soon as you have more module options, you’ll end up with a super long string that
is not easy to read or to maintain.</p>

<p>Nowadays, the same task above would be implemented like this:</p>

<script src="https://gist.github.com/e1789ff8327a94648f1bdf90a9cf6f2a.js"> </script>

<p>In a real-world use case you most likely would parameterize each of the available options to allow users to override them. This helps in avoiding to write the same task over
and over again - just slightly different each time (due to installing different packages for instance).</p>

<p>.. anyway, this is where we stand today. The way you define Ansible code today has largely remained the same.</p>

<p>Please don’t get me wrong. Ansible itself has evolved <strong>a lot</strong> since it was first released. Starting from
<a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse_roles.html"><code class="language-plaintext highlighter-rouge">roles</code></a>,
to <a href="https://docs.ansible.com/ansible/latest/collections_guide/index.html"><code class="language-plaintext highlighter-rouge">collections</code></a>, the introduction of
<a href="https://ansible.readthedocs.io/projects/rulebook/en/latest/introduction.html#what-is-event-driven-ansible">Event-Driven Ansible</a> with
<a href="https://ansible.readthedocs.io/projects/rulebook"><code class="language-plaintext highlighter-rouge">rulebooks</code></a> to Red Hat’s latest announcement
<a href="https://www.redhat.com/en/about/press-releases/red-hat-introduces-policy-code-help-address-ai-complexities-scale">Policy as Code</a>.</p>

<p>Ansible is more relevant than ever to fulfill a variety of use cases in today’s ever changing IT landscape.</p>

<h2 id="the-problem">The problem</h2>

<p>In the earlier days of Ansible you’d most likely automated a few hundred or thousand systems; Today we are speaking of tens of thousands to hundred of thousands different
systems.</p>

<p>Not only has the number of systems dramatically increased, but also their complexity. Installing packages on systems (like in the above example) or making simple configuration
changes to a systems’ configuration files is just not going to cut it anymore.</p>

<p>Today we are talking to complex systems via various APIs - often <a href="https://www.redhat.com/en/topics/api/what-is-a-rest-api">REST APIs</a>.</p>

<p>Such systems are for instance:</p>

<ul>
  <li>Various cloud providers, such as <a href="https://aws.amazon.com">Amazon Web Services (AWS)</a>, <a href="https://azure.microsoft.com/">Microsoft Azure</a> or
<a href="https://console.cloud.google.com/">Google Cloud Platform (GCP)</a>, etc.</li>
  <li>Applications that help deploying systems, such as <a href="https://www.vmware.com/products/vcenter.html">VMware vCenter</a>,
<a href="https://www.redhat.com/en/technologies/management/satellite">Red Hat Satellite</a>,
<a href="https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/get-started/virtual-dc/active-directory-domain-services-overview">Microsoft Active Directory</a>, etc.</li>
  <li>Network devices such as
<a href="https://www.cisco.com/c/en/us/support/docs/ios-nx-os-software/ios-software-releases-110/13327-ios-early.html">Cisco Internetworking Operating Systems (IOS)</a>,
<a href="https://www.arista.com/en/products/eos">Arista Extensible Operating System (EOS)</a>,
<a href="https://www.juniper.net/us/en/products/network-operating-system/junos-os.html">Junos OS</a>,
etc.</li>
  <li>Virtually any system that has some sort of API to interact with</li>
</ul>

<p>This is just to name a few to set the scene. This list can easily be extended by a few thousand other systems.</p>

<p>All of the named systems above have something in common, though. They are complex.</p>

<p>As such data retrieved from the APIs of those systems will not always return <em>what</em> you need in the <em>way</em> you need it.</p>

<p>To name a random made up scenario:</p>

<p>You retrieved a list of hosts of from your Red Hat Satellite and want to check which of those systems are on a particular hypervisor in your VMware vCenter to shut them down
to perform some activity.</p>

<p>:information_source: Again, this is just something made up to set the scene :rofl:.</p>

<p>What most people typically end up doing is something like (pseudo-code below):</p>

<script src="https://gist.github.com/ba6e7a5eb30ea98a0acc90371b494314.js"> </script>

<p>Does that look remotely familiar to you?</p>

<p>Yes? <strong>You are doing it wrong.</strong></p>

<p>I know, this is an unpopular opinion, but let me elaborate on that in the following chapter.</p>

<h2 id="the-solution">The solution</h2>

<p>How I would do it, is the following (again, pseudo-code):</p>

<script src="https://gist.github.com/8d5b5789538aee4c5c3a118dbb5bec3e.js"> </script>

<p>If you wanted to have a list as a fact, I’d go with:</p>

<script src="https://gist.github.com/6b19791bb6f284f6f334515cd105a554.js"> </script>

<p>I know, it looks fancy and totally uncommon, but hear me out first :sunglasses:.</p>

<p>Why would you do something like this in the first place?</p>

<p>Well, in a recent example of one of my customers, they did it the way most people do it: Multiple <code class="language-plaintext highlighter-rouge">loops</code> and/or <code class="language-plaintext highlighter-rouge">include_tasks</code> to end up with a list of systems.</p>

<p>They needed to iterate over around 30000 systems. That took them around <em>eight hours</em>. I showed them my way of doing it, and they ended up with a <em>couple of seconds</em> for
the <em>exact</em> same task: Extract a list of relevant systems based on some criteria.</p>

<p>I’ll show you below how you can try and measure the performance gain out yourself, but let’s first talk about the way I write these tasks.</p>

<p>You need to make yourself familiar with <em>at least</em> the <a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html"><code class="language-plaintext highlighter-rouge">Jinja2 filters</code></a> below that will help
you to write efficient code:</p>

<ul>
  <li><a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.selectattr"><code class="language-plaintext highlighter-rouge">selectattr</code></a>: Select items of a list of dictionaries</li>
  <li><a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.rejectattr"><code class="language-plaintext highlighter-rouge">rejectattr</code></a>: Reject items of a list of dictionaries</li>
  <li><a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.select"><code class="language-plaintext highlighter-rouge">select</code></a>: Select items of a list</li>
  <li><a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#jinja-filters.reject"><code class="language-plaintext highlighter-rouge">reject</code></a>: Reject items of a list</li>
</ul>

<p>Besides the filters included in <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/index.html#filter-plugins"><code class="language-plaintext highlighter-rouge">ansible.builtin</code></a> and the ones included with
<a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#list-of-builtin-filters"><code class="language-plaintext highlighter-rouge">Jinja2</code></a>, there are various other filters, which are incredible handy to know about.
One example are the filters included in <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/index.html#filter-plugins"><code class="language-plaintext highlighter-rouge">ansible.utils</code></a>.</p>

<p>You also <em>need</em> to know about the concept of <a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_tests.html"><code class="language-plaintext highlighter-rouge">Jinja2 tests</code></a> and the various
<a href="https://docs.ansible.com/ansible/latest/plugins/test.html"><code class="language-plaintext highlighter-rouge">test plugins</code></a> you can utilize. Much like the filters, tests are available from
<a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/index.html#test-plugins"><code class="language-plaintext highlighter-rouge">ansible.builtin</code></a> and
<a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#list-of-builtin-tests"><code class="language-plaintext highlighter-rouge">Jinja2</code></a> as well as other collections like
<a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/index.html#test-plugins"><code class="language-plaintext highlighter-rouge">ansible.utils</code></a>.</p>

<p><em>Ideally</em>, you also know about <a href="https://docs.ansible.com/ansible/latest/plugins/lookup.html"><code class="language-plaintext highlighter-rouge">lookups</code></a> to further enhance your ability to write efficient code.</p>

<p>There are certain obstacles when chaining filters together, however:</p>

<ol>
  <li>If you simply chain the filters after each other, you’ll end up with a super long string that is - very much as in the beginning of Ansible - hard to read and maintain</li>
  <li>The learning curve is incredible steep for newcomers and seasoned Ansible content creators alike</li>
  <li>You need to wrap your head around how these filters interact with each other. I think it helped me a lot that I used to be a developer early in my career and therefore could
relate to most of the concepts required to master this technique</li>
</ol>

<p>Let’s discuss these issues one by one.</p>

<h3 id="syntax-and-coding-guideline">Syntax and coding guideline</h3>

<p>The first issue, is easily fixed by adapting <a href="https://yaml-multiline.info/"><code class="language-plaintext highlighter-rouge">YAML Multiline Syntax</code></a>. There is no reason to not make use of the <code class="language-plaintext highlighter-rouge">YAML Multiline Syntax</code> - there is nothing
to be afraid of. Sure, it takes time to get it right, but once you practice it, it becomes easy.</p>

<p>I decided for myself to put <em>every</em> filter on a new line and indent the code by two spaces if it is a nested expression. This greatly improves readability.</p>

<p>With a nested expression, I refer to something like:</p>

<script src="https://gist.github.com/5f82b0147b7b80ae6c34bd9c10c043f1.js"> </script>

<p>There a various ways nested expression can occur, I have some complex examples in one of my
<a href="https://github.com/sscheib/ansible-role-satellite_publish_promote_content_views">roles</a> - for instance:</p>

<script src="https://gist.github.com/c96be566ba3b73665b416b71ab0fae63.js"> </script>

<h3 id="learning-curve-and-different-way-of-working">Learning curve and different way of working</h3>

<p>The second and third issue can be grouped, as they basically refers to the same thing: Learning something new.</p>

<p>Yes, the learning curve is pretty high. It took me quite some time to adapt to this way of writing Ansible code. In the beginning it felt very wrong and I had a hard time wrapping
my head around <strong>how</strong> the filters work and ‘interact’ with each other.</p>

<p>Essentially, <code class="language-plaintext highlighter-rouge">selectattr</code>, <code class="language-plaintext highlighter-rouge">rejectattr</code>, <code class="language-plaintext highlighter-rouge">select</code> and <code class="language-plaintext highlighter-rouge">reject</code> work by iterating over all items of a list and select or reject every item that matches your criteria. In a way
we are <strong>combining</strong> <code class="language-plaintext highlighter-rouge">loop</code> and <code class="language-plaintext highlighter-rouge">when</code> in a faster way.</p>

<p>For cases where you only have a dictionary available, you can make use of
<a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/dict2items_filter.html#ansible-collections-ansible-builtin-dict2items-filter"><code class="language-plaintext highlighter-rouge">ansible.builtin.dict2items</code></a>,
apply the corresponding filtering and then convert it back to a dictionary with
<a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/items2dict_filter.html#ansible-collections-ansible-builtin-items2dict-filter"><code class="language-plaintext highlighter-rouge">ansible.builtin.items2dict</code></a>.</p>

<p>This is <em>significantly</em> quicker than anything you can achieve with <code class="language-plaintext highlighter-rouge">loops</code>.</p>

<p>There are cases, however, where you <em>need</em> to use <code class="language-plaintext highlighter-rouge">loops</code>, but can still heavily benefit from the ‘inline-filtering’. In the next chapter we’ll pick one example where I needed
loops and ‘inline-filtering’ together.</p>

<h3 id="a-complex-example-broken-down">A complex example broken down</h3>

<p>Okay, let’s break down the complex example I showed you earlier:</p>

<script src="https://gist.github.com/c96be566ba3b73665b416b71ab0fae63.js"> </script>

<p>First, I’d like to provide you some context:</p>

<p>I have a set of <code class="language-plaintext highlighter-rouge">Content Views</code> over which I loop and need to check if their definition (which is defined in <code class="language-plaintext highlighter-rouge">_satellite_content_views</code>) contains
any <code class="language-plaintext highlighter-rouge">Lifecycle Environments</code> the <code class="language-plaintext highlighter-rouge">Content View</code> should be <code class="language-plaintext highlighter-rouge">promoted</code> to. Additionally, I want to make sure that those <code class="language-plaintext highlighter-rouge">Content Views</code> are not <code class="language-plaintext highlighter-rouge">promoted</code> to any
<code class="language-plaintext highlighter-rouge">Lifecycle Environments</code> which are not ‘allowed’. Allowed <code class="language-plaintext highlighter-rouge">Lifecycle Environments</code> are optional and specified via <code class="language-plaintext highlighter-rouge">__t_allowed_lifecycle_environments</code>.</p>

<p>Don’t worry if that doesn’t make much sense to you if you’ve never worked with Red Hat Satellite. We are specifically looking at the code; I just wanted to give a little context.</p>

<p>Let’s start with the expression that gets us started:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">(</span>
  <span class="s">_satellite_content_views |</span>
  <span class="s">selectattr('name', 'equalto', __t_content_view.name) |</span>
  <span class="s">selectattr('lifecycle_environments', 'defined') |</span>
  <span class="s">length &gt; </span><span class="m">0</span>
<span class="s">)</span>
</code></pre></div></div>

<p>With the above we are selecting all items from <code class="language-plaintext highlighter-rouge">_satellite_content_views</code> that match <code class="language-plaintext highlighter-rouge">__t_content_view.name</code> (which is our current item’s <code class="language-plaintext highlighter-rouge">name</code> attribute). Of those items that
matched the earlier expression, we select the items that have the attribute <code class="language-plaintext highlighter-rouge">lifecycle_environments</code> defined. Lastly we check with the <code class="language-plaintext highlighter-rouge">length</code> filter if there are any items left.</p>

<p>This expression results either in <code class="language-plaintext highlighter-rouge">true</code> or <code class="language-plaintext highlighter-rouge">false</code>.</p>

<p>Next up, is <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/ternary_filter.html"><code class="language-plaintext highlighter-rouge">ansible.builtin.ternary</code></a>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">) | ansible.builtin.ternary (</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ansible.builtin.ternary</code> takes two arguments: <code class="language-plaintext highlighter-rouge">true_val</code> and <code class="language-plaintext highlighter-rouge">false_val</code>.</p>

<p>Essentially, we implement an <code class="language-plaintext highlighter-rouge">if</code> statement:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if (expression):
  do this
else:
  do that
</code></pre></div></div>

<p>The expression we are validating against is what we had in step one:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">(</span>
  <span class="s">_satellite_content_views |</span>
  <span class="s">selectattr('name', 'equalto', __t_content_view.name) |</span>
  <span class="s">selectattr('lifecycle_environments', 'defined') |</span>
  <span class="s">length &gt; </span><span class="m">0</span>
<span class="s">)</span>
</code></pre></div></div>

<p>Let’s assume this expression evaluates to <code class="language-plaintext highlighter-rouge">true</code>, then we’ll continue with:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">_satellite_content_views |</span>
<span class="s">selectattr('name', 'equalto', __t_content_view.name) |</span>
<span class="s">selectattr('lifecycle_environments', 'defined') |</span>
<span class="s">map(attribute='lifecycle_environments') |</span>
<span class="s">ansible.builtin.flatten |</span>
</code></pre></div></div>

<p>With the above expression we are again selecting all items from <code class="language-plaintext highlighter-rouge">_satellite_content_views</code> that match <code class="language-plaintext highlighter-rouge">__t_content_view.name</code> (which is our current item’s <code class="language-plaintext highlighter-rouge">name</code> attribute). Of
those items that matched the earlier expression we again select those that have the attribute <code class="language-plaintext highlighter-rouge">lifecycle_environments</code> defined. Then we go ahead and extract only the names of the
<code class="language-plaintext highlighter-rouge">Lifecycle Environment</code>. This will end up in a nested list, so we lastly <code class="language-plaintext highlighter-rouge">flatten</code> that list with <code class="language-plaintext highlighter-rouge">ansible.builtin.flatten</code>.</p>

<p>At this point we have data that looks something like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">[</span>
  <span class="s1">'</span><span class="s">lce-name1'</span><span class="pi">,</span>
  <span class="s1">'</span><span class="s">lce-name2'</span><span class="pi">,</span>
  <span class="s1">'</span><span class="s">lce-name3'</span><span class="pi">,</span>
  <span class="s1">'</span><span class="s">etc.'</span>
<span class="pi">]</span>
</code></pre></div></div>

<p>Next up we’ll use <a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/intersect_filter.html"><code class="language-plaintext highlighter-rouge">ansible.builtin.intersect</code></a> which will return the common items
of two lists.</p>

<p>Remember what we want to have are the <code class="language-plaintext highlighter-rouge">Lifecycle Environments</code> defined in <code class="language-plaintext highlighter-rouge">_satellite_content_views</code> and compare that to a potentially defined list that holds the ‘allowed’
<code class="language-plaintext highlighter-rouge">Lifecycle Environments</code>.</p>

<p>The portion of the code, I am referring to is:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">ansible.builtin.intersect(</span>
</code></pre></div></div>

<p>Our first list contains the <code class="language-plaintext highlighter-rouge">Lifecycle Environments</code> we found out already:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">[</span>
  <span class="s1">'</span><span class="s">lce-name1'</span><span class="pi">,</span>
  <span class="s1">'</span><span class="s">lce-name2'</span><span class="pi">,</span>
  <span class="s1">'</span><span class="s">lce-name3'</span><span class="pi">,</span>
  <span class="s1">'</span><span class="s">etc.'</span>
<span class="pi">]</span>
</code></pre></div></div>

<p>The second list we compare it to, is either defined and contains elements, or isn’t: <code class="language-plaintext highlighter-rouge">__t_allowed_lifecycle_environments</code></p>

<p>The statement we use to evaluate that is the following:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">(</span>
  <span class="s">__t_allowed_lifecycle_environments is defined</span>
  <span class="s">and __t_allowed_lifecycle_environments != None</span>
  <span class="s">and __t_allowed_lifecycle_environments | length &gt; </span><span class="m">0</span>
<span class="s">)</span>
</code></pre></div></div>

<p>The result of that expression will either be <code class="language-plaintext highlighter-rouge">true</code> or <code class="language-plaintext highlighter-rouge">false</code> again. This result will be our input for another <code class="language-plaintext highlighter-rouge">if</code> statement (using once again <code class="language-plaintext highlighter-rouge">ansible.builtin.ternary</code>):</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">) | ansible.builtin.ternary(</span>
</code></pre></div></div>

<p>If the expression is <code class="language-plaintext highlighter-rouge">true</code>, we’ll simply pass the list <code class="language-plaintext highlighter-rouge">__t_allowed_lifecycle_environments</code> as the second list for the <code class="language-plaintext highlighter-rouge">ansible.builtin.intersect</code>.</p>

<p>So we might end up with data like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">list1</span><span class="pi">:</span> <span class="pi">[</span>
  <span class="s1">'</span><span class="s">lce-name1'</span><span class="pi">,</span>
  <span class="s1">'</span><span class="s">lce-name2'</span><span class="pi">,</span>
  <span class="s1">'</span><span class="s">lce-name3'</span>
<span class="pi">]</span>
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">list2</span><span class="pi">:</span> <span class="pi">[</span>
  <span class="s1">'</span><span class="s">lce-name2'</span><span class="pi">,</span>
  <span class="s1">'</span><span class="s">lce-name3'</span>
<span class="pi">]</span>
</code></pre></div></div>

<p>:information_source: The lists are not assigned a name <code class="language-plaintext highlighter-rouge">list1</code> or <code class="language-plaintext highlighter-rouge">list2</code>. I just use this for illustrating the different lists.</p>

<p>With the above data fed in, <code class="language-plaintext highlighter-rouge">ansible.builtin.intersect</code> would return a list with the following items:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">[</span>
  <span class="s1">'</span><span class="s">lce-name2'</span><span class="pi">,</span>
  <span class="s1">'</span><span class="s">lce-name3'</span>
<span class="pi">]</span>
</code></pre></div></div>

<p>If the last expression is <code class="language-plaintext highlighter-rouge">false</code>, we basically repeat our step from earlier by selecting all <code class="language-plaintext highlighter-rouge">Lifecycle Environments</code> for the current processing <code class="language-plaintext highlighter-rouge">Content View</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">_satellite_content_views |</span>
<span class="s">selectattr('name', 'equalto', __t_content_view.name) |</span>
<span class="s">selectattr('lifecycle_environments', 'defined') |</span>
<span class="s">map(attribute='lifecycle_environments') |</span>
<span class="s">ansible.builtin.flatten</span>
</code></pre></div></div>

<p>Which would result in the following data:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">list1</span><span class="pi">:</span> <span class="pi">[</span>
  <span class="s1">'</span><span class="s">lce-name1'</span><span class="pi">,</span>
  <span class="s1">'</span><span class="s">lce-name2'</span><span class="pi">,</span>
  <span class="s1">'</span><span class="s">lce-name3'</span>
<span class="pi">]</span>
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">list2</span><span class="pi">:</span> <span class="pi">[</span>
  <span class="s1">'</span><span class="s">lce-name1'</span><span class="pi">,</span>
  <span class="s1">'</span><span class="s">lce-name2'</span><span class="pi">,</span>
  <span class="s1">'</span><span class="s">lce-name3'</span>
<span class="pi">]</span>
</code></pre></div></div>

<p>:information_source: The lists are not assigned a name <code class="language-plaintext highlighter-rouge">list1</code> or <code class="language-plaintext highlighter-rouge">list2</code>. I just use this for illustrating the different lists.</p>

<p>With the above data fed in, <code class="language-plaintext highlighter-rouge">ansible.builtin.intersect</code> would return a list with the following items:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">[</span>
  <span class="s1">'</span><span class="s">lce-name1'</span>
  <span class="s1">'</span><span class="s">lce-name2'</span><span class="pi">,</span>
  <span class="s1">'</span><span class="s">lce-name3'</span>
<span class="pi">]</span>
</code></pre></div></div>

<p>Which is exactly what we want, as there are no ‘allowed’ <code class="language-plaintext highlighter-rouge">Lifecycle Environments</code> defined :slightly_smiling_face:.</p>

<p>And finally, coming back to the very first expression:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">(</span>
  <span class="s">_satellite_content_views |</span>
  <span class="s">selectattr('name', 'equalto', __t_content_view.name) |</span>
  <span class="s">selectattr('lifecycle_environments', 'defined') |</span>
  <span class="s">length &gt; </span><span class="m">0</span>
<span class="s">)</span>
</code></pre></div></div>

<p>If that expression would result in <code class="language-plaintext highlighter-rouge">false</code>, we’d simply <code class="language-plaintext highlighter-rouge">omit</code> the parameter altogether.</p>

<p>I know, it’s complex, but in my personal opinion definitively worth the effort when looking at the performance gain in the next chapter.</p>

<h2 id="comparing-performance">Comparing performance</h2>

<p>To compare a <em>very</em> simple use case, I created a playbook you can run and evaluate on your own.</p>

<p>In this example we are going to create a list with numbers from 1 to 1000. Then we’ll randomly select three numbers and compare if looping is quicker or using <code class="language-plaintext highlighter-rouge">select</code>:</p>

<script src="https://gist.github.com/33e2303f422ee41aab20e82c0832463e.js"> </script>

<p>To compare the performance, we are going to use <a href="https://docs.ansible.com/ansible/latest/collections/ansible/posix/profile_tasks_callback.html"><code class="language-plaintext highlighter-rouge">ansible.posix.profile_tasks</code></a>,
which is a <a href="https://docs.ansible.com/ansible/latest/plugins/callback.html"><code class="language-plaintext highlighter-rouge">Callback Plugin</code></a> that shows at the end of the playbook run which task took how long.</p>

<p>Since we are dealing only with numbers (which is not a typical real world scenario), we need to enable <code class="language-plaintext highlighter-rouge">Jinja2 native</code> which allows for <code class="language-plaintext highlighter-rouge">integers</code> to be returned from a <code class="language-plaintext highlighter-rouge">Jinja2</code>
expression to compare against.</p>

<p>The options in the <code class="language-plaintext highlighter-rouge">ansible.cfg</code> would be the following:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[defaults]</span>
<span class="py">jinja2_native</span>           <span class="p">=</span> <span class="s">true</span>
<span class="py">callbacks_enabled</span>       <span class="p">=</span> <span class="s">ansible.posix.profile_tasks</span>

<span class="nn">[callback_profile_tasks]</span>
<span class="py">task_output_limit</span>       <span class="p">=</span> <span class="s">100</span>
<span class="py">sort_order</span>              <span class="p">=</span> <span class="s">descending</span>
</code></pre></div></div>

<p>Running the playbook will result in something like the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Generate a list of 1000 items --------------------------------------------------------------------------------------------------------------------------------------------- 16.03s
Loop over all items to find the 3 random numbers --------------------------------------------------------------------------------------------------------------------------- 8.27s
Use select to cut down the list -------------------------------------------------------------------------------------------------------------------------------------------- 0.13s
Choose 3 random numbers ---------------------------------------------------------------------------------------------------------------------------------------------------- 0.06s
Show random numbers chosen ------------------------------------------------------------------------------------------------------------------------------------------------- 0.05s
</code></pre></div></div>

<p>In the above example I had a performance improvement of 63x, calculated with:</p>

<blockquote>
  <p>8.27s / 0.13s = 63.615384615</p>
</blockquote>

<p>:information_source: This way of ‘testing’ is overly simplified. It just helps to showcase the general notion that ‘in-place filtering’ is much quicker than looping.</p>

<p>Your results <em>will</em> differ, as I randomly choose numbers and shuffle those around to make it as ‘random’ as possible.</p>

<p>You’ll experience the real world performance impact when you apply it to your own data you process in your playbooks and roles where you know how long it used to run.</p>

<!-- markdownlint-disable MD026 -->
<h2 id="why-no-module-or-filter-">Why no module or filter ?!</h2>
<!-- markdownlint-enable MD026 -->

<p>Most of you probably think:</p>

<blockquote>
  <p>Why does this guy even bother, when you can simply write a module or a filter to achieve the same result?</p>
</blockquote>

<p>Let me ask you: Are you prepared to write, maintain and distribute tens if not hundreds of filters and modules on your own/in your company? You’d end up with a ton of modules and
filters which essentially do what can be done today using the provided filters by Ansible itself.</p>

<p>What I use is usually shipped with Ansible Core itself. After all, I am only transforming data.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I <em>personally</em> think that this will be the future of writing Ansible code. The simple reason being that complex systems return complex data which you need to process as quickly
as possible.</p>

<p>I am more than happy to hear the thoughts of those who read this post. Please let me know what you think about my way of writing Ansible code and if you consider adopting it.</p>

<p>Until next time,</p>

<p>Steffen</p>

<h2 id="change-log">Change log</h2>

<h3 id="2025-03-21">2025-03-21</h3>

<ul>
  <li>Fixing dead Ansible <code class="language-plaintext highlighter-rouge">rulebooks</code> link</li>
</ul>

<h3 id="2024-06-04">2024-06-04</h3>

<ul>
  <li>Initial release</li>
</ul>

<h2 id="footnotes">Footnotes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:ansible_intro" role="doc-endnote">
      <p><a href="https://docs.ansible.com/ansible/latest/getting_started/introduction.html#introduction-to-ansible">Introduction to Ansible</a> <a href="#fnref:ansible_intro" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Steffen Scheib</name></author><summary type="html"><![CDATA[Preface]]></summary></entry><entry><title type="html">Upgrading Raspberry Pi OS 11 (Bullseye) to 12 (Bookworm)</title><link href="https://blog.scheib.me/2024/04/14/upgrade-raspberry-bullseye-bookworm.html" rel="alternate" type="text/html" title="Upgrading Raspberry Pi OS 11 (Bullseye) to 12 (Bookworm)" /><published>2024-04-14T00:00:00+00:00</published><updated>2024-04-15T00:00:00+00:00</updated><id>https://blog.scheib.me/2024/04/14/upgrade-raspberry-bullseye-bookworm</id><content type="html" xml:base="https://blog.scheib.me/2024/04/14/upgrade-raspberry-bullseye-bookworm.html"><![CDATA[<h2 id="preface">Preface</h2>

<p>This is going to be a short summary of the steps to do - mainly for my documentation :slightly_smiling_face:.</p>

<p>:warning: The <a href="https://www.raspberrypi.com/news/bookworm-the-new-version-of-raspberry-pi-os">official blog</a> announcing the release of <code class="language-plaintext highlighter-rouge">Raspberry Pi OS</code> based on
<code class="language-plaintext highlighter-rouge">Debian Bookworm</code> <strong>strongly</strong> suggests to reinstall your <code class="language-plaintext highlighter-rouge">Raspberry Pi</code> instead of updating it in-place. <strong>This procedure might break your <code class="language-plaintext highlighter-rouge">Raspberry Pi OS</code> installation.</strong></p>

<p>In case you are adventurous, below you’ll find a way of in-place upgrading <code class="language-plaintext highlighter-rouge">Raspberry Pi OS</code> from <code class="language-plaintext highlighter-rouge">Bullseye</code> to <code class="language-plaintext highlighter-rouge">Bookworm</code> :sunglasses:.</p>

<h2 id="prepare-the-upgrade">Prepare the upgrade</h2>

<p>First, we’ll need to update our system to the latest available <code class="language-plaintext highlighter-rouge">Bullseye</code> release:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt update &amp;&amp; sudo apt upgrade &amp;&amp; sudo apt dist-upgrade
</code></pre></div></div>

<p>:information_source: If you’ve updated any packages in the previous step, I’d recommend rebooting your system as precaution.</p>

<p>Next, we’ll update all source lists in <code class="language-plaintext highlighter-rouge">/etc/apt/sources.list</code> and <code class="language-plaintext highlighter-rouge">/etc/apt/sources.list.d/</code> to match <code class="language-plaintext highlighter-rouge">bookworm</code>.</p>

<p>Most important are the repositories that provide the system packages (which are located in <code class="language-plaintext highlighter-rouge">/etc/apt/sources.list</code>) and those for the <code class="language-plaintext highlighter-rouge">Raspberry Pi</code> related packages, such as a
special kernel and specific firmware packages. These are located in <code class="language-plaintext highlighter-rouge">/etc/apt/sources.list.d/raspi.list</code>.</p>

<p>Let’s first start with the system package repository located at <code class="language-plaintext highlighter-rouge">/etc/apt/sources.list</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deb http://deb.debian.org/debian bookworm main contrib non-free non-free-firmware
deb http://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware
deb http://deb.debian.org/debian bookworm-updates main contrib non-free non-free-firmware
</code></pre></div></div>

<p>If you’d like to have source packages available (via <code class="language-plaintext highlighter-rouge">apt-get source</code>), add the following as well to <code class="language-plaintext highlighter-rouge">/etc/apt/sources.list</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deb-src http://deb.debian.org/debian bookworm main contrib non-free non-free-firmware
deb-src http://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware
deb-src http://deb.debian.org/debian bookworm-updates main contrib non-free non-free-firmware
</code></pre></div></div>

<p>Now, on to the <code class="language-plaintext highlighter-rouge">Raspberry Pi</code> specific repository, defined in <code class="language-plaintext highlighter-rouge">/etc/apt/sources.list.d/raspi.list</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deb http://archive.raspberrypi.org/debian/ bookworm main
</code></pre></div></div>

<p>Again, if you’d like to have source packages available, add the following additionally to <code class="language-plaintext highlighter-rouge">/etc/apt/sources.list.d/raspi.list</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deb-src http://archive.raspberrypi.org/debian/ bookworm main
</code></pre></div></div>

<p>To ensure a smooth upgrade, ensure that the remainder of the repositories are updated to reflect the upgrade to <code class="language-plaintext highlighter-rouge">Bookworm</code> in <code class="language-plaintext highlighter-rouge">/etc/apt/sources.list.d/</code>. Depending on your
system configuration, there might be no other repositories. In my case I had there as well the repository for <code class="language-plaintext highlighter-rouge">Zabbix</code> (<code class="language-plaintext highlighter-rouge">/etc/apt/sources.list.d/zabbix.list</code>).</p>

<p>Lastly, update the cache:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt update
</code></pre></div></div>

<p>Ensure no error or warning messages are observed. If you encounter any errors or warnings, I’d encourage you to resolve them prior to continuing - I haven’t encountered any.</p>

<h2 id="migrating-boot-to-bootfirmware">Migrating <code class="language-plaintext highlighter-rouge">/boot</code> to <code class="language-plaintext highlighter-rouge">/boot/firmware</code></h2>

<p>Starting from <code class="language-plaintext highlighter-rouge">Raspberry Pi OS 12</code>, we need to mount <code class="language-plaintext highlighter-rouge">/boot</code> to <code class="language-plaintext highlighter-rouge">/boot/firmware</code> <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>.</p>

<p>This can easily be done following the steps below:</p>

<ol>
  <li>Unmount <code class="language-plaintext highlighter-rouge">/boot</code> using <code class="language-plaintext highlighter-rouge">sudo umount /boot</code></li>
  <li>Create the directory <code class="language-plaintext highlighter-rouge">/boot/firmware</code> using <code class="language-plaintext highlighter-rouge">sudo mkdir /boot/firmware</code></li>
  <li>
    <p>Adjust <code class="language-plaintext highlighter-rouge">/etc/fstab</code> so that the originally mount point <code class="language-plaintext highlighter-rouge">/boot</code> now points to <code class="language-plaintext highlighter-rouge">/boot/firmware</code>, e.g.:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> PARTUUID=ffffffff-ff    /boot/firmware  vfat    defaults,flush                  0       2
</code></pre></div>    </div>

    <p>:information_source: I’ve modified the <code class="language-plaintext highlighter-rouge">PARTUUID</code> above. Yours will look different, of course.</p>
  </li>
  <li>Ensure <code class="language-plaintext highlighter-rouge">systemd</code> is notified about this change using <code class="language-plaintext highlighter-rouge">sudo systemctl daemon-reload</code></li>
  <li>Finally, ensure that <code class="language-plaintext highlighter-rouge">/boot/firmware</code> is correctly mounted using <code class="language-plaintext highlighter-rouge">sudo mount -a</code></li>
</ol>

<h2 id="install-new-kernel-and-remove-the-old-kernel">Install new kernel and remove the old kernel</h2>

<p>We need to install the new kernel and the new firmware packages. After that we’ll remove the old one. Yes, it sounds insane at first glance, but that’s the only way I am aware of to
make it work :rofl:.</p>

<p>The required kernel is different for each <code class="language-plaintext highlighter-rouge">Raspberry Pi</code> model used and whether it’s a 32 bit or 64 bit <code class="language-plaintext highlighter-rouge">Raspberry Pi</code>.</p>

<p>You can find out which chip your <code class="language-plaintext highlighter-rouge">Raspberry Pi</code> is based on using <code class="language-plaintext highlighter-rouge">lspci</code>. Below you’ll find the output of one of my <code class="language-plaintext highlighter-rouge">Raspberry Pis</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>lspci
<span class="go">00:00.0 PCI bridge: Broadcom Inc. and subsidiaries BCM2711 PCIe Bridge (rev 10)
01:00.0 USB controller: VIA Technologies, Inc. VL805/806 xHCI USB 3.0 Controller (rev 01)
</span></code></pre></div></div>

<p>Following table summarizes the <code class="language-plaintext highlighter-rouge">Raspberry Pi</code> models along with the old kernel path and the new kernel package name to the best of my knowledge:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Model</th>
      <th style="text-align: left">Chip</th>
      <th style="text-align: left">Bit</th>
      <th style="text-align: left">Old kernel name and path</th>
      <th style="text-align: left">New kernel package</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Raspberry Pi Zero</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">BCM2835</code></td>
      <td style="text-align: left">32</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/boot/kernel.img</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">linux-image-rpi-v6</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Raspberry Pi 1</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">BCM2835</code></td>
      <td style="text-align: left">32</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/boot/kernel.img</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">linux-image-rpi-v6</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Raspberry Pi 2</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">BCM2836</code></td>
      <td style="text-align: left">32</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/boot/kernel7.img</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">linux-image-rpi-v7</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Raspberry Pi 3</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">BCM2837</code></td>
      <td style="text-align: left">32</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/boot/kernel7.img</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">linux-image-rpi-v7</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Raspberry Pi 4</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">BCM2711</code></td>
      <td style="text-align: left">32</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/boot/kernel7l.img</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">linux-image-rpi-v7l</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Raspberry Pi 3</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">BCM2837</code></td>
      <td style="text-align: left">64</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/boot/kernel8.img</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">linux-image-rpi-v8</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Raspberry Pi 4</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">BCM2711</code></td>
      <td style="text-align: left">64</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/boot/kernel8.img</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">linux-image-rpi-v8</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Raspberry Pi 5</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">BCM2712</code></td>
      <td style="text-align: left">64</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/boot/kernel8.img</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">linux-image-rpi-2712</code></td>
    </tr>
  </tbody>
</table>

<p>You should be able to easily figure out the correct new kernel package name using the column <code class="language-plaintext highlighter-rouge">Chip</code> together with <code class="language-plaintext highlighter-rouge">Old kernel name and path</code> from above table.</p>

<p>Now, up to the actual task.</p>

<p>Installing the new kernel and firmware is done using:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>raspi-firmware linux-image-rpi-v8
</code></pre></div></div>

<p>:warning: Please substitute the package name according to above table.</p>

<p>Next, remove the old kernel - which is for all <code class="language-plaintext highlighter-rouge">Raspberry Pi</code> models the same:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt remove raspberrypi-kernel raspberrypi-bootloader
</code></pre></div></div>

<h2 id="upgrading-the-operating-system">Upgrading the operating system</h2>

<p>The upgrade itself is straight-forward from this point:</p>

<ol>
  <li>Update once more the package lists using <code class="language-plaintext highlighter-rouge">sudo apt update</code> - just for good measure :sunglasses:</li>
  <li>Run the actual upgrade using <code class="language-plaintext highlighter-rouge">sudo apt full-upgrade</code></li>
</ol>

<p>After the update has concluded, ensure no further packages need installing:</p>

<ol>
  <li>Refresh once more the package lists using <code class="language-plaintext highlighter-rouge">sudo apt update</code></li>
  <li>Upgrade any leftover packages using <code class="language-plaintext highlighter-rouge">sudo apt upgrade</code></li>
</ol>

<p>Lastly, cleanup obsolete data:</p>

<ol>
  <li>Remove obsolete packages using <code class="language-plaintext highlighter-rouge">sudo apt autoremove</code></li>
  <li>Clean the <code class="language-plaintext highlighter-rouge">apt</code> cache using <code class="language-plaintext highlighter-rouge">sudo apt clean</code></li>
</ol>

<p>Finally, reboot your system using <code class="language-plaintext highlighter-rouge">sudo systemctl reboot</code>.</p>

<p>Once the system is back up and running, you should find yourself in a <code class="language-plaintext highlighter-rouge">Raspberry Pi OS 12</code>, which can be verified by looking at <code class="language-plaintext highlighter-rouge">/etc/debian_version</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cat</span> /etc/debian_version
<span class="go">12.5
</span></code></pre></div></div>

<p>:information_source: The version displayed in <code class="language-plaintext highlighter-rouge">/etc/debian_version</code> should be <code class="language-plaintext highlighter-rouge">12.x</code> - at the time of this writing <code class="language-plaintext highlighter-rouge">12.5</code>.</p>

<h2 id="legacy-gpg-trustedgpg-keyring">Legacy <code class="language-plaintext highlighter-rouge">GPG</code> <code class="language-plaintext highlighter-rouge">trusted.gpg</code> <code class="language-plaintext highlighter-rouge">keyring</code></h2>

<p>When updating the package lists (using <code class="language-plaintext highlighter-rouge">sudo apt update</code>) after running the upgrade, you might encounter the following issue complaining about <code class="language-plaintext highlighter-rouge">GPG</code> keys stored in the
legacy <code class="language-plaintext highlighter-rouge">trusted.gpg</code> <code class="language-plaintext highlighter-rouge">keyring</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>W: http://security.debian.org/debian-security/dists/bookworm-security/InRelease: Key is stored in legacy trusted.gpg keyring (/etc/apt/trusted.gpg), see the DEPRECATION section in apt-key(8) for details.
W: http://deb.debian.org/debian/dists/bookworm/InRelease: Key is stored in legacy trusted.gpg keyring (/etc/apt/trusted.gpg), see the DEPRECATION section in apt-key(8) for details.
W: http://deb.debian.org/debian/dists/bookworm-updates/InRelease: Key is stored in legacy trusted.gpg keyring (/etc/apt/trusted.gpg), see the DEPRECATION section in apt-key(8) for details.
W: http://archive.raspberrypi.org/debian/dists/bookworm/InRelease: Key is stored in legacy trusted.gpg keyring (/etc/apt/trusted.gpg), see the DEPRECATION section in apt-key(8) for details.
W: https://deb.nodesource.com/node_20.x/dists/bookworm/InRelease: Key is stored in legacy trusted.gpg keyring (/etc/apt/trusted.gpg), see the DEPRECATION section in apt-key(8) for details.
</code></pre></div></div>

<p>This is fairly easy to fix.</p>

<p>There is the ‘lazy’ way, which basically copies the old legacy <code class="language-plaintext highlighter-rouge">keyring</code> to the new location:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo cp</span> /etc/apt/trusted.gpg /etc/apt/trusted.gpg.d/
</code></pre></div></div>

<p>Alternatively, you can use following <code class="language-plaintext highlighter-rouge">BASH</code> script to export each key stored in the legacy <code class="language-plaintext highlighter-rouge">keyring</code> to a file in <code class="language-plaintext highlighter-rouge">/etc/apt/trusted.gpg.d/</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># exit immediately if a command fails</span>
<span class="nb">set</span> <span class="nt">-o</span> errexit

<span class="c"># make the whole pipe fail if any commands within the pipe fail</span>
<span class="nb">set</span> <span class="nt">-o</span> pipefail

<span class="c"># treats unset variables as an error while performing parameter expansion</span>
<span class="c"># special parameters $* and $@ are not affected from this</span>
<span class="nb">set</span> <span class="nt">-o</span> nounset

<span class="c"># set initial flag state</span>
<span class="nb">declare </span><span class="nv">next</span><span class="o">=</span>1
<span class="k">while </span><span class="nb">read</span> <span class="nt">-r</span> line<span class="p">;</span> <span class="k">do</span>
  <span class="c"># skip on lines not matching ^pub or next is not equal to 0</span>
  <span class="o">(</span>
    <span class="o">[[</span> <span class="s2">"</span><span class="k">${</span><span class="nv">line</span><span class="k">}</span><span class="s2">"</span> <span class="o">=</span>~ ^pub <span class="o">]]</span> <span class="o">||</span>
    <span class="o">[[</span> <span class="s2">"</span><span class="k">${</span><span class="nv">next</span><span class="k">}</span><span class="s2">"</span> <span class="nt">-eq</span> 0 <span class="o">]]</span>
  <span class="o">)</span> <span class="o">||</span> <span class="o">{</span>
    <span class="k">continue</span><span class="p">;</span>
  <span class="o">}</span><span class="p">;</span>

  <span class="c"># line matches ^pub</span>
  <span class="o">[[</span> <span class="o">!</span> <span class="s2">"</span><span class="k">${</span><span class="nv">line</span><span class="k">}</span><span class="s2">"</span> <span class="o">=</span>~ ^pub <span class="o">]]</span> <span class="o">||</span> <span class="o">{</span>
    <span class="c"># we'll need the next line</span>
    <span class="nb">declare </span><span class="nv">next</span><span class="o">=</span>0<span class="p">;</span>
    <span class="k">continue</span><span class="p">;</span>
  <span class="o">}</span><span class="p">;</span>

  <span class="c"># reset flag</span>
  <span class="nb">declare </span><span class="nv">next</span><span class="o">=</span>1

  <span class="o">[[</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">sudo </span>apt-key list <span class="s2">"</span><span class="k">${</span><span class="nv">line</span><span class="k">}</span><span class="s2">"</span> 2&gt; /dev/null | <span class="nb">grep</span> <span class="nt">-E</span> <span class="s1">'^uid'</span><span class="si">)</span><span class="s2">"</span> <span class="o">=</span>~ ^uid.+?<span class="se">\[</span>.+?<span class="se">\]</span><span class="o">[[</span>:space:]]+<span class="o">(</span>.+?<span class="o">)(</span><span class="se">\&lt;</span>.+?<span class="se">\&gt;</span><span class="o">)</span>?<span class="nv">$ </span><span class="o">]]</span> <span class="o">||</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"ERROR: Unable to extract uid of key with ID '</span><span class="k">${</span><span class="nv">line</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span>
    <span class="nb">exit </span>1<span class="p">;</span>
  <span class="o">}</span><span class="p">;</span>

  <span class="c"># transform e.g. Mike Thompson (Raspberry Pi Debian armhf ARMv6+VFP) &lt;mpthompson@gmail.com&gt;</span>
  <span class="c"># into e.g. mike_thompson_raspberry_pi_debian_armhf_armv6_vfp.gpg</span>
  <span class="nb">declare </span><span class="nv">keyName</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BASH_REMATCH</span><span class="p">[1]</span><span class="k">}</span><span class="s2">"</span> | <span class="nb">sed</span> <span class="nt">-E</span> <span class="s1">'s/[[:space:]]+&lt;.+&gt;//'</span> | <span class="nb">sed</span> <span class="nt">-E</span> <span class="s1">'s/[^[:alnum:]]+/_/g'</span> | <span class="nb">tr</span> <span class="s1">'[[:upper:]]'</span> <span class="s1">'[[:lower:]]'</span> | <span class="nb">sed</span> <span class="nt">-E</span> <span class="s1">'s/_$//'</span><span class="si">)</span><span class="s2">.gpg"</span>

  <span class="nb">sudo </span>apt-key <span class="nb">export</span> <span class="s2">"</span><span class="k">${</span><span class="nv">line</span><span class="k">}</span><span class="s2">"</span> 2&gt; /dev/null | <span class="nb">sudo </span>gpg <span class="nt">--dearmour</span> <span class="nt">-o</span> <span class="s2">"/etc/apt/trusted.gpg.d/</span><span class="k">${</span><span class="nv">keyName</span><span class="k">}</span><span class="s2">"</span> <span class="o">||</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"ERROR: Failed exporting GPG key with ID '</span><span class="k">${</span><span class="nv">line</span><span class="k">}</span><span class="s2">' to '/etc/apt/trusted.gpg.d/</span><span class="k">${</span><span class="nv">keyName</span><span class="k">}</span><span class="s2">'"</span><span class="p">;</span>
    <span class="nb">exit </span>1<span class="p">;</span>
  <span class="o">}</span><span class="p">;</span>

<span class="k">done</span> &lt; &lt;<span class="o">(</span><span class="nb">sudo </span>apt-key list <span class="nt">--list-keys</span> 2&gt; /dev/null | <span class="nb">grep</span> <span class="nt">-Pzo</span> <span class="s1">'(?m)/etc/apt/trusted.gpg[\S\s]+/etc/apt/trusted.gpg.d/'</span><span class="o">)</span>
<span class="c"># ^ match everything starting from /etc/apt/trusted.gpg (legacy keystore) to the next "modern" keystore (stored in /etc/apt/trusted.gpg.d/)</span>
</code></pre></div></div>

<p>The result will be filenames like the following in <code class="language-plaintext highlighter-rouge">/etc/apt/trusted.gpg.d/</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@example.com:~#</span><span class="w"> </span><span class="nb">ls</span> <span class="nt">-la</span> /etc/apt/trusted.gpg.d/
<span class="go">total 80
drwxr-xr-x 2 root root 4096 Apr 15 11:07 .
drwxr-xr-x 9 root root 4096 Apr 14 22:14 ..
-rw-r--r-- 1 root root 5834 Apr 15 11:07 debian_archive_automatic_signing_key_10_buster.gpg
-rw-r--r-- 1 root root 5836 Apr 15 11:07 debian_archive_automatic_signing_key_11_bullseye.gpg
-rw-r--r-- 1 root root 5836 Apr 15 11:07 debian_archive_automatic_signing_key_12_bookworm.gpg
-rw-r--r-- 1 root root 4648 Apr 15 11:07 debian_archive_automatic_signing_key_9_stretch.gpg
-rw-r--r-- 1 root root 5845 Apr 15 11:07 debian_security_archive_automatic_signing_key_11_bullseye.gpg
-rw-r--r-- 1 root root 5845 Apr 15 11:07 debian_security_archive_automatic_signing_key_12_bookworm.gpg
-rw-r--r-- 1 root root  280 Apr 15 11:07 debian_stable_release_key_12_bookworm.gpg
-rw-r--r-- 1 root root 2760 Apr 15 11:07 docker_release_ce_deb.gpg
-rw-r--r-- 1 root root 1225 Apr 15 11:07 mike_thompson_raspberry_pi_debian_armhf_armv6_vfp.gpg
-rw-r--r-- 1 root root 2206 Apr 15 11:07 nodesource.gpg
-rw-r--r-- 1 root root 1183 Apr 15 11:07 raspberry_pi_archive_signing_key.gpg
-rwxr-xr-x 1 root root 1183 Sep 14  2022 zabbix-official-repo.gpg
</span></code></pre></div></div>

<p>The script leaves the legacy <code class="language-plaintext highlighter-rouge">keyring</code> (<code class="language-plaintext highlighter-rouge">/etc/apt/trusted.gpg</code>) untouched. It merely exports the keys <em>additionally</em> to <code class="language-plaintext highlighter-rouge">/etc/apt/trusted.gpg.d/</code>.</p>

<p>With that, the warning with regards to using a legacy <code class="language-plaintext highlighter-rouge">keyring</code> should be gone :slightly_smiling_face:.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hope you learned something today and did not break your <code class="language-plaintext highlighter-rouge">Raspberry Pi OS</code> installation :slightly_smiling_face:.</p>

<p>I upgraded four <code class="language-plaintext highlighter-rouge">Raspberry Pi 4 (64 bit)</code> and one <code class="language-plaintext highlighter-rouge">Raspberry Pi 3 (32bit)</code> using the procedure described in this blog.</p>

<p>Until next Time,</p>

<p>Steffen</p>

<h2 id="change-log">Change log</h2>

<h3 id="2024-04-15">2024-04-15</h3>

<ul>
  <li>Initial release</li>
</ul>

<h2 id="footnotes">Footnotes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://github.com/raspberrypi/documentation/issues/3089">Pull request <code class="language-plaintext highlighter-rouge">Raspberry Pi</code> documentation</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Steffen Scheib</name></author><summary type="html"><![CDATA[Preface]]></summary></entry><entry><title type="html">Execution Environments - From Zero to Hero. An in-depth explanation.</title><link href="https://blog.scheib.me/2024/02/17/execution-environments.html" rel="alternate" type="text/html" title="Execution Environments - From Zero to Hero. An in-depth explanation." /><published>2024-02-17T00:00:00+00:00</published><updated>2024-04-25T00:00:00+00:00</updated><id>https://blog.scheib.me/2024/02/17/execution-environments</id><content type="html" xml:base="https://blog.scheib.me/2024/02/17/execution-environments.html"><![CDATA[<h2 id="preface">Preface</h2>

<p>To understand why execution environments (EEs) are such a crucial part of modern Ansible we need to briefly look into the past.
To a time where there were no EEs, but <em>something</em> else to accommodate for certain situations.</p>

<p>In the following brief look into the past, I’ll cover only the basics. For experienced Ansible users which are aware of Ansible’s history this chapter is most likely useless -
feel free to skip to the next chapter :slightly_smiling_face:.</p>

<p>Okay, let’s get into it :sunglasses:.</p>

<h2 id="a-quick-look-into-the-past">A quick look into the past</h2>

<p>Probably most users of Ansible encountered at some point a situation, where they needed to install a specific version of a Python module as a specific module of a collection
required it to be installed.</p>

<p>Let’s take as an example <a href="https://docs.ansible.com/ansible/latest/collections/community/general/proxmox_module.html"><code class="language-plaintext highlighter-rouge">community.general.proxmox</code></a>. The
module <code class="language-plaintext highlighter-rouge">proxmox</code> <a href="https://docs.ansible.com/ansible/latest/collections/community/general/proxmox_module.html#requirements">specifies</a> the following requirements:</p>

<blockquote>
  <p>The below requirements are needed on the host that executes this module.</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">proxmoxer</code> <!-- markdownlint-disable-line MD032 --></li>
    <li><code class="language-plaintext highlighter-rouge">requests</code></li>
  </ul>
</blockquote>

<p>Both <a href="https://github.com/proxmoxer/proxmoxer"><code class="language-plaintext highlighter-rouge">proxmoxer</code></a> and <a href="https://github.com/psf/requests"><code class="language-plaintext highlighter-rouge">requests</code></a> are
<a href="https://packaging.python.org/en/latest/tutorials/installing-packages/">Python packages</a>.</p>

<p>At this point we know, we need to install both Python packages <em>somehow</em> on our system where we execute Ansible. This leaves us with basically three choices:</p>

<ol>
  <li>Use the system’s package manager to install the packages - if packaged versions are available</li>
  <li>Install the Python packages using <a href="https://ianbicking.org/blog/2008/10/pyinstall-is-dead-long-live-pip.html"><code class="language-plaintext highlighter-rouge">pip installs packages</code>, better known as <code class="language-plaintext highlighter-rouge">pip</code></a> to install the
Python packages either in the user context (<a href="https://pip.pypa.io/en/stable/user_guide/#user-installs"><code class="language-plaintext highlighter-rouge">--user</code></a>) or in the system context (<strong>don’t ever install
Python packages in the system context!</strong>)</li>
  <li>Use a <a href="https://docs.python.org/3/library/venv.html"><code class="language-plaintext highlighter-rouge">Python Virtual Environment</code>, better known as <code class="language-plaintext highlighter-rouge">venv</code></a></li>
</ol>

<p>We can choose either of the three options above and we should be good to go, right?</p>

<p><em>Theoretically</em>, yes. <em>Practically</em>, not really - well, at least it comes with its challenges.</p>

<p>Why? Allow me to tell you little a story that might sound very familiar to you :innocent:.</p>

<p>Let’s assume we’d pick option three, the Python Virtual Environments. <code class="language-plaintext highlighter-rouge">venvs</code> are usually what most Ansible users would go with, as it ‘separates’ the Python packages of the
actual Python system packages and therefore keeps the actual system ‘clean’.</p>

<p>Okay great, now you installed both <code class="language-plaintext highlighter-rouge">requests</code> and <code class="language-plaintext highlighter-rouge">proxmoxer</code>. It’s in your <code class="language-plaintext highlighter-rouge">venv</code>. Now you can get started with developing the Ansible role you wanted.</p>

<p>You start developing your role and you install more and more Ansible collections. With it, you install more and more Python packages as well as system packages, because, of
course, most of the collections depend on specific Python and/or system packages.</p>

<p>Finally you are done: You couldn’t be happier right now. Your role works <em>exactly</em> as you’ve imagined.</p>

<p>Now a colleague asks you whether you can share the Ansible code you have developed as he is in need of <em>exactly</em> such a role you have been working very hard on. Since you
published your role on your company’s git, you point your colleague to the git repository of your Ansible role.</p>

<p>The colleague comes back to you asking:</p>
<blockquote>
  <p>What Python packages do I need to install to make your role work?</p>
</blockquote>

<p>Of course you have the answer: You’ll simply look what’s installed inside your <code class="language-plaintext highlighter-rouge">venv</code> which you have been using the whole time while developing the role. You extract the list
of Python packages and send it to your colleague. Your colleagues comes back once again because the role still doesn’t work.</p>

<p>Then you remember: Right! You also installed system packages and made <em>some</em> modifications to your system’s configuration in order to make <em>something</em> work. If you just could
remember <em>what</em> you installed and modified.</p>

<p>Does that sound familiar to you? :joy:</p>

<p>It doesn’t even need to be a colleague that asks you to use your role. The same issue happens when you migrate to a new development machine or upgrade to a newer operating
system version, etc. Certainly it happened to me. And not only once :rofl:.</p>

<p>In the above story, I haven’t even started pulling in different versions of Ansible and/or Python that make things even more complex. Let alone if you’d like to deploy
that role now in production where there are stricter security requirements, of course.</p>

<p>Of course, you could argue that a proper documentation and a well-defined <a href="https://pip.pypa.io/en/stable/reference/requirements-file-format/">Python requirements file</a>
basically eliminates all of the issues above. You are right - for the most part at least. There are situations where a perfect documentation is not sufficient. Just imagine
you develop on Debian and you want to migrate to a different operating system. System package names and system configurations are most definitively different. Sure, you’ll be
able to make it work, but it requires effort. Effort that is unnecessary and a cumbersome burden most people would like to avoid because they can spent their time better with
something more productive.</p>

<p>So, what’s then a better solution to achieve the same - or even better - outcome?
Meet <a href="https://docs.ansible.com/ansible/latest/getting_started_ee/index.html#getting-started-with-execution-environments">Ansible’s execution environments (EEs)</a>.</p>

<h2 id="ansibles-execution-environments-ees-an-introduction">Ansible’s execution environments (EEs): An introduction</h2>

<p>So what exactly are EEs?</p>

<p>First and foremost, EEs are container images - they are basically packaged Ansible control nodes. Essentially, you can picture it as your development machine
or your centralized Ansible control node that runs your Ansible content in production, packaged in a container image with everything it needs to run specific Ansible content.</p>

<p>EEs come by default with a few things:</p>

<ol>
  <li>Ansible, usually <code class="language-plaintext highlighter-rouge">ansible-core</code></li>
  <li><a href="https://ansible.readthedocs.io/projects/runner/en/latest/"><code class="language-plaintext highlighter-rouge">ansible-runner</code></a></li>
  <li>A specific Python version that fits the Ansible version used</li>
</ol>

<p>That’s really it - for the bare minimum.</p>

<p>But what makes EEs so powerful and versatile is their great flexibility bundled with all the advantages of containers. If you haven’t worked with containers before, you might
not see the massive benefits of EEs just yet. I understand that. Some people might even be afraid of containers as they haven’t been using them until this point.</p>

<p>Rest assured: Containers are not bad. They are actually awesome if you understand the benefits of them and understand that you need to adapt in some ways to them.
This might sound at first like a big task, but it really is not.</p>

<p>Especially in the context of EEs, containers are not just not bad, but are <em>the</em> solution to all the problems I outlined above. I know, this might not be clear yet at this
point. You - hopefully - understand or at the very least begin to understand, what I mean once you finished reading this blog post.</p>

<p>For those who are afraid of containers: You don’t <em>really</em> need to work with containers in that sense when dealing with EEs. When building and executing EEs, you essentially
work with two ‘wrappers’ that take care of building and running your containers in such a way that you usually don’t need to interact with container images and containers
directly. I explain all of that in greater detail a bit later.</p>

<p>With the knowledge of what EEs are, I guess everyone can easily imagine why they solve the issues <code class="language-plaintext highlighter-rouge">venvs</code> have.</p>

<p>Essentially, you <strong>define and extend your EE</strong> as necessary <strong>while you actively develop</strong> Ansible content. This is <em>exactly</em> the same workflow you are used to when developing
Ansible Content with <code class="language-plaintext highlighter-rouge">venvs</code>. This time however, since everything is now neatly packaged in a container, you can now essentially share your development environment. With
<em>everything</em> you have modified. Be it settings within the EE, installed system packages or Python packages, as well as every Ansible content you depend on when running your
Ansible code.</p>

<p>EEs effectively eliminate the “.. but it works on my machine!” :sunglasses:.</p>

<h3 id="execution-environments-getting-started">Execution environments: Getting started</h3>

<p>Working with EEs is pretty straight-forward once you know what you need. In the previous chapter I referred to two ‘wrappers’ that enable you to use and create EEs - these are:</p>

<ol>
  <li><a href="https://ansible.readthedocs.io/projects/navigator/"><code class="language-plaintext highlighter-rouge">ansible-navigator</code></a></li>
  <li><a href="https://ansible.readthedocs.io/projects/builder/en/latest/"><code class="language-plaintext highlighter-rouge">ansible-builder</code></a></li>
</ol>

<p>Let me give you a <em>very brief</em> overview over these tools.</p>

<h4 id="ansible-navigator"><code class="language-plaintext highlighter-rouge">ansible-navigator</code></h4>

<p><code class="language-plaintext highlighter-rouge">ansible-navigator</code> is essentially an extension for all (well, most of) the <code class="language-plaintext highlighter-rouge">ansible-</code> commands (e.g. <code class="language-plaintext highlighter-rouge">ansible-playbook</code>, <code class="language-plaintext highlighter-rouge">ansible-inventory</code>, <code class="language-plaintext highlighter-rouge">ansible-doc</code>, etc.) you are
used to when working with Ansible on the command line interface (<code class="language-plaintext highlighter-rouge">CLI</code>). You <em>need</em> <code class="language-plaintext highlighter-rouge">ansible-navigator</code> to run your Ansible content via <code class="language-plaintext highlighter-rouge">CLI</code> inside an EE, as
<code class="language-plaintext highlighter-rouge">ansible-playbook</code> is not able to run something inside an EE.</p>

<h4 id="ansible-builder"><code class="language-plaintext highlighter-rouge">ansible-builder</code></h4>

<p><code class="language-plaintext highlighter-rouge">ansible-builder</code> is the tool to use when building execution environments. It makes creating and extending existing EEs easy and straight-forward. Under the hood, it
essentially interacts with <a href="https://podman.io/"><code class="language-plaintext highlighter-rouge">podman</code></a> to create the images.</p>

<p>Now that we know the <em>very basics</em> about EEs, let’s look a little deeper.</p>

<h4 id="existing-ees-an-overview">Existing EEs: An overview</h4>

<p>The understand the concept behind EEs, please allow me to contextualize the Ansible ecosystem with regards to EEs a little.</p>

<p>There are existing EEs which you can utilize to get started. Both the Ansible community and Red Hat maintain a few EEs. The ones maintained by the
Ansible community are either hosted on <a href="https://quay.io/">https://quay.io</a> or on GitHub’s Container Registry <a href="https://ghcr.io">https://ghcr.io</a>. The ones Red Hat maintains are
officially called <em>Ansible Automation Platform execution environments</em>, which are <a href="https://catalog.redhat.com/software/containers/explore"><em>Certified Container Images</em></a> and
are provided via Red Hat’s Container Registry <a href="https://catalog.redhat.com/">registry.redhat.io</a>. I’ll refer to Red Hat’s EEs typically as “certified EEs”, as it makes
communication easier :slightly_smiling_face:.</p>

<p>The difference between EEs of the Ansible community (we at Red Hat, usually refer to them as <em>upstream</em>) and Red Hat’s EEs (we at Red Hat, usually refer to them as
<em>downstream</em>) is that upstream EEs are <em>usually</em> based on CentOS Stream, while downstream EEs are based on
<a href="https://catalog.redhat.com/software/base-images">Red Hat’s Universal Base Image (<code class="language-plaintext highlighter-rouge">UBI</code>)</a> and are <em>essentially</em> Red Hat Enterprise Linux (RHEL) in containers, if you will.</p>

<p>:information_source: To use Red Hat certified EEs you need to be a Red Hat subscriber If you don’t own any subscriptions, you can make use of
<a href="https://developers.redhat.com/articles/faqs-no-cost-red-hat-enterprise-linux">Red Hat’s Developer Subscription</a> which is provided at no cost by Red Hat.</p>

<p>The major difference, however, is the level of support you’ll get. Upstream in general moves really fast and does not do any
<a href="https://en.wikipedia.org/wiki/Backporting"><code class="language-plaintext highlighter-rouge">backports</code></a> for older Ansible versions.
In contrast, Red Hat supports their EEs for a <a href="https://access.redhat.com/support/policy/updates/ansible-automation-platform">defined life cycle</a> and does <code class="language-plaintext highlighter-rouge">backports</code> for bug
fixes and/or security fixes to older EEs which are using older <code class="language-plaintext highlighter-rouge">ansible-core</code> versions, which are still under support by Red Hat.</p>

<p>Please don’t get confused that the <a href="https://access.redhat.com/support/policy/updates/ansible-automation-platform">linked life cycle</a> points to the Ansible Automation Platform
life cycle. That’s not a mistake. The reason being that Red Hat treats several components of the Ansible ecosystem (such as Execution and Decision Environments, <code class="language-plaintext highlighter-rouge">ansible-core</code>,
<code class="language-plaintext highlighter-rouge">ansible-navigator</code>, <code class="language-plaintext highlighter-rouge">ansible-builder</code> among other things) as one <em>platform</em>. As Ansible Automation Platform subscriber, you’ll get a defined set of components in a
certain version, which ensures that all components are compatible with each other.</p>

<p>Upstream essentially treats various components, such as EEs, <code class="language-plaintext highlighter-rouge">ansible-builder</code>, <code class="language-plaintext highlighter-rouge">ansible-navigator</code> etc. as separate projects and therefore you <em>might</em> encounter difficulties
using the latest upstream versions together.</p>

<p><strong>Please don’t get me wrong</strong>: I am not saying you should avoid upstream releases. That’s not what I am saying at all. Upstream projects are <em>the core of everything</em> we do at
Red Hat as we follow the <a href="https://www.redhat.com/en/about/open-source/participation-guidelines">‘upstream first’</a> guideline and you should definitively make use of upstream
projects. However, you <em>might</em> want to reconsider using upstream projects if you are going to use them in production or you require a certain level of support to sustain your
business.</p>

<p>:warning: Please keep in mind that this is a <strong>very simplified</strong> overview of upstream and downstream projects in the Open Source world. If you run a business and are about
to make a decision to either use upstream or downstream projects, I highly encourage you to do your own research to build up a solid understanding of the topic before
you decide.</p>

<p>Now that the <em>basic</em> principles of upstream vs. downstream with regards to EEs are out of the way, let’s actually get our hands dirty :slightly_smiling_face:.</p>

<h4 id="deciding-which-existing-ee-to-obtain">Deciding which existing EE to obtain</h4>

<p>Alright, let’s obtain one EE and start using it - but where do you get them and which one to chose?</p>

<p>For upstream EEs, you are probably going to choose either the <a href="https://github.com/ansible/creator-ee">Ansible Creator EE</a>, which is aimed towards Ansible content developers
or the <a href="https://quay.io/repository/ansible/awx-ee"><code class="language-plaintext highlighter-rouge">AWX EE</code></a> which is meant to be used when running your code in <a href="https://github.com/ansible/awx"><code class="language-plaintext highlighter-rouge">AWX</code></a> (one of Red Hat’s
upstream projects that are part of the Ansible Automation Platform).</p>

<p>In this blog post I am going to focus on using Red Hat’s certified EEs.</p>

<p>Certified EEs come, at the time of this writing, in different variants:</p>

<ul>
  <li>Either based on <code class="language-plaintext highlighter-rouge">UBI</code> 8 or <code class="language-plaintext highlighter-rouge">UBI</code> 9</li>
  <li>Either contain <code class="language-plaintext highlighter-rouge">ansible-core</code> <em>only</em> or <code class="language-plaintext highlighter-rouge">ansible-core</code> and a set of <a href="https://catalog.redhat.com/software/search?target_platforms=Red%20Hat%20Ansible%20Automation%20Platform"><em>certified collections</em></a></li>
  <li>In a <em>special</em> case, one EE contains Ansible Engine 2.9, but this EE is going to go away in the future as Ansible Engine reached its downstream end of life in December last
year (31.12.2023). This EE is/was provided merely for the reason to support customers in their migration from older Ansible Automation Platform versions, as Ansible itself
has changed drastically.</li>
</ul>

<p><em>Technically</em> that’s four variants, but <code class="language-plaintext highlighter-rouge">UBI</code> 8 or <code class="language-plaintext highlighter-rouge">UBI</code> 9 ‘only’ change the underlying operating system :sweat_smile:.</p>

<p>Again, Red Hat’s EEs are hosted on <a href="https://catalog.redhat.com">registry.redhat.io</a> where the ‘user-browsable interface’ is <a href="https://catalog.redhat.com">catalog.redhat.com</a>.
When browsing to <a href="https://catalog.redhat.com">registry.redhat.io</a> with your browser, you’ll be redirected to <a href="https://catalog.redhat.com">catalog.redhat.com</a> automatically, but
you’ll be pulling the EEs of <code class="language-plaintext highlighter-rouge">registry.redhat.io</code>.</p>

<p>Now, <em>finally</em>, here are some of the available EEs:</p>

<ul>
  <li><a href="https://catalog.redhat.com/software/containers/ansible-automation-platform/ee-minimal-rhel8/62bd87442c0945582b2b4b37">ansible-automation-platform/ee-minimal-rhel8</a></li>
  <li><a href="https://catalog.redhat.com/software/containers/ansible-automation-platform/ee-minimal-rhel9/6447df2aa123f7fc409f847e">ansible-automation-platform/ee-minimal-rhel9</a></li>
  <li><a href="https://catalog.redhat.com/software/containers/ansible-automation-platform-24/ee-minimal-rhel9/643d4c13fae71880450b6108">ansible-automation-platform-24/ee-minimal-rhel9</a></li>
  <li><a href="https://catalog.redhat.com/software/containers/ansible-automation-platform-24/ee-supported-rhel9/643d4c7255839fe0f27b0f30">ansible-automation-platform-24/ee-supported-rhel9</a></li>
  <li><a href="https://catalog.redhat.com/software/containers/ansible-automation-platform-24/ee-supported-rhel8/63a333ce183540f5962ae01d">ansible-automation-platform-24/ee-supported-rhel8</a></li>
  <li><a href="https://catalog.redhat.com/software/containers/ansible-automation-platform-24/ee-minimal-rhel8/63a3338544b6f291781716c7">ansible-automation-platform-24/ee-minimal-rhel8</a></li>
  <li><a href="https://catalog.redhat.com/software/containers/ansible-automation-platform-24/ee-29-rhel8/63a3322ccdc6fa07ca9d7527">ansible-automation-platform-24/ee-29-rhel8</a></li>
</ul>

<p>You can already tell a difference from the namespace portion of the EEs. <code class="language-plaintext highlighter-rouge">ansible-automation-platform/ee-minimal-rhel9</code> vs. <code class="language-plaintext highlighter-rouge">ansible-automation-platform-24/ee-minimal-rhel9</code>.
Moreover, there is a <code class="language-plaintext highlighter-rouge">supported</code> variant and a <code class="language-plaintext highlighter-rouge">minimal</code> variant.</p>

<p>First off: Don’t get confused. <code class="language-plaintext highlighter-rouge">supported</code> in this context means, it will contain <code class="language-plaintext highlighter-rouge">ansible-core</code> <strong>and</strong> <em>some</em> <strong>supported</strong> Ansible collections. The <code class="language-plaintext highlighter-rouge">minimal</code>
variant is exactly as supported as the <code class="language-plaintext highlighter-rouge">supported</code> one is, albeit it’s totally understandable if you are confused :smile:. The <code class="language-plaintext highlighter-rouge">minimal</code> EE contains <code class="language-plaintext highlighter-rouge">ansible-core</code> <strong>only</strong> -
no collections or anything else.</p>

<p>There is also this <em>special</em> EE, which contains Ansible Engine 2.9: <code class="language-plaintext highlighter-rouge">ansible-automation-platform-24/ee-29-rhel8</code>. Again, this EE is/was provided merely for the reason to
support customers in their migration from older Ansible Automation Platform/Ansible versions.</p>

<p>Secondly, the namespace difference (<code class="language-plaintext highlighter-rouge">ansible-automation-platform/ee-minimal-rhel9</code> vs. <code class="language-plaintext highlighter-rouge">ansible-automation-platform-24/ee-minimal-rhel9</code>) is due to ‘historic’ reasons,
basically.</p>

<p>Nowadays, we encourage customers to make use of the <em>version-less</em> or <em>multi stream</em> EEs as <em>versioned</em> or <em>single stream</em> EEs are going to go away in the future.
I prefer using the terms <em>version-less</em> and <em>versioned</em> over <em>multi stream</em> and <em>single stream</em>, as it - in my opinion - more accurately describes what is meant.</p>

<p><em>Versioned</em> in this specific case refers to EEs that are build for a <em>specific</em> Ansible Automation Platform <strong>version</strong> - such as <code class="language-plaintext highlighter-rouge">ansible-automation-platform-24/ee-minimal-rhel9</code>.
From this example, the Ansible Automation Platform version that contains the EE <code class="language-plaintext highlighter-rouge">ee-minimal-rhel9</code> is 2.4. This is how EEs where distributed in the past.</p>

<p>Nowadays, EEs are rather independent of the Ansible Automation Platform version and are distributed ‘<em>independently</em>’, meaning not tied to a specific Ansible Automation
Platform version in that sense. Hence: <em>version-less</em>.</p>

<p>The idea behind the <em>version-less</em> EEs is basically to pick and chose which <code class="language-plaintext highlighter-rouge">ansible-core</code> version you’d like to have included in your EE. The
<a href="https://catalog.redhat.com/software/containers/ansible-automation-platform/ee-minimal-rhel8/62bd87442c0945582b2b4b37/history">version tags</a> of, for instance,
<code class="language-plaintext highlighter-rouge">ansible-automation-platform/ee-minimal-rhel8</code> correspond to <code class="language-plaintext highlighter-rouge">ansible-core</code> versions.</p>

<p>One thing important to know: Often, container images make use of the <code class="language-plaintext highlighter-rouge">latest</code> tag, which commonly - who would have guessed it - refers to the latest available version of the
container image. But when you are trying to pull <code class="language-plaintext highlighter-rouge">ansible-automation-platform/ee-minimal-rhel8:latest</code> using <code class="language-plaintext highlighter-rouge">podman</code>, you’ll be greeted with an error:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># podman pull ansible-automation-platform/ee-minimal-rhel8:latest</span>
Resolved <span class="s2">"ansible-automation-platform/ee-minimal-rhel8"</span> as an <span class="nb">alias</span> <span class="o">(</span>/etc/containers/registries.conf.d/001-rhel-shortnames.conf<span class="o">)</span>
Trying to pull registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:latest...
WARN[0001] Failed, retrying <span class="k">in </span>1s ... <span class="o">(</span>1/3<span class="o">)</span><span class="nb">.</span> Error: initializing <span class="nb">source </span>docker://registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:latest: reading manifest latest <span class="k">in </span>registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8: unsupported: This repository does not use the <span class="s2">"latest"</span> tag to track the most recent image and must be pulled with an explicit version or image reference. For more information, see: https://access.redhat.com/articles/4301321
</code></pre></div></div>

<p>:information_source: Don’t get confused that I am using <code class="language-plaintext highlighter-rouge">podman</code> to pull the EE. You don’t have to do the same. We’ll be using <code class="language-plaintext highlighter-rouge">ansible-builder</code> for that. Using <code class="language-plaintext highlighter-rouge">podman</code> in
this specific case is just easier.</p>

<p>In <a href="https://access.redhat.com/articles/4301321">Red Hat’s linked knowledge base article</a> it is explained <em>why</em> this change was introduced for a number of container images if
you are curious of the <em>why</em>. In the context of the <em>version-less</em> EEs you only need to know, that it doesn’t work :slightly_smiling_face:.</p>

<p>After all, users typically want the latest available version of <code class="language-plaintext highlighter-rouge">ansible-core</code> within the same <em>minor version</em> (the second digit in e.g 2.<strong>15</strong>.9).
It is not a good idea to jump from say <code class="language-plaintext highlighter-rouge">ansible-core</code> 2.15 to <code class="language-plaintext highlighter-rouge">ansible-core</code> 2.16 <em>without</em> evaluating what <em>changed</em> in between those versions. On the other hand,
you’d most likely want to have the <em>latest 2.15</em> version, e.g. 2.15.9, as <em>usually</em> there are no <em>breaking</em> or <em>major</em> changes within the same minor version.</p>

<p>If that’s a use-case you can relate to, then I have good news for you: You can specify the tag <code class="language-plaintext highlighter-rouge">2.15</code> on the execution environment, e.g.
<code class="language-plaintext highlighter-rouge">ansible-automation-platform/ee-minimal-rhel8:2.15</code>, which will pull always the latest available version within this minor version, which is 2.15.x.</p>

<p>If you want to be more specific, you can do that too, simply specify a tag with an additional z-version (the last digit in e.g. 2.15.<strong>9</strong>), e.g.
<code class="language-plaintext highlighter-rouge">ansible-automation-platform/ee-minimal-rhel8:2.15.9</code></p>

<p>And if you want to make <em>extra sure</em> that the image your a pulling does not <em>change</em> even if you specify a z-version, you can include the <code class="language-plaintext highlighter-rouge">SHA checksum</code> (also called
<code class="language-plaintext highlighter-rouge">digest</code>) of the image in the name:
<code class="language-plaintext highlighter-rouge">registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8@sha256:2a17184e6ea2200b1335c0a39d04159fd040d5ce7fc1990a9d424cc20cfacd4d</code>. This name refers to
<code class="language-plaintext highlighter-rouge">ee-minimal-rhel-8: 2.15.9-4</code>.</p>

<p>This way you ensure that you <em>never</em> get any other image than you used. In turn, however, this means you need to update the name regularly.</p>

<p>I, personally, don’t include the <code class="language-plaintext highlighter-rouge">digest</code> in the name, as I trust Red Hat to not replace an existing image version with a new one. In terms of security, however,
<strong>a bad actor</strong> <em>could</em> replace the image version with a new one. Specifying the <code class="language-plaintext highlighter-rouge">digest</code> will prevent you from pulling that image version.</p>

<p>One last thing to discuss is the absence of the <code class="language-plaintext highlighter-rouge">supported</code> variants (the ones that contain besides <code class="language-plaintext highlighter-rouge">ansible-core</code> also <em>some</em> <strong>supported</strong> Ansible collections) of EEs, as
well as the absence of the <em>special EE</em> (<code class="language-plaintext highlighter-rouge">ee-29-rhel8</code>) in <em>version-less</em> EEs.</p>

<p>For the <em>special EE</em> (<code class="language-plaintext highlighter-rouge">ee-29-rhel8</code>) the reason is simple: There is nothing to choose from. There is only Ansible Engine 2.9 to use and it was never intended to run on RHEL 9,
therefore there is only the RHEL 8 variant. Period. It will also go away in the future, as already mentioned.</p>

<p>For the <code class="language-plaintext highlighter-rouge">supported</code> variants the answer is a different one: Red Hat envisions that Ansible Automation Platform users are building their very own and very specific EEs that
fulfill exactly their needs on top of a supported <code class="language-plaintext highlighter-rouge">minimal</code> EE containing only <code class="language-plaintext highlighter-rouge">ansible-core</code>.</p>

<p>If you think a moment about it, it hopefully makes perfect sense to you. You likely have very specific requirements for an EE. Such as the <code class="language-plaintext highlighter-rouge">ansible-core</code> version used, the
included collections, the included Python packages, maybe you need access to a corporate proxy which requires you to include a set of certificate authority certificates into
your EE and so on and so forth. All these things couldn’t possibly come from Red Hat.</p>

<p>At first, this might mean to you that you’ll need to dive a little deeper into EEs than you’d like to, but it is worthwhile, and really easy.
I mean, the chances are high, that you’ll need to build your own EEs in the future if you are in a corporate environment - which most Red Hat customers are - so why not learn
to build them yourself right from the start.</p>

<p>In later sections, we’ll learn how to build complex EEs on top of your very own base EEs that fit <em>exactly</em> your specific requirement.
Just keep on reading :sunglasses:.</p>

<h2 id="using-existing-ees-with-ansible-navigator">Using existing EEs with <code class="language-plaintext highlighter-rouge">ansible-navigator</code></h2>

<p>After we’ve learned a lot about EEs in the previous chapters, let’s actually use them :slightly_smiling_face:. To use the EEs on the <code class="language-plaintext highlighter-rouge">CLI</code>, let me first
introduce you to <code class="language-plaintext highlighter-rouge">ansible-navigator</code>. In an earlier chapter I have briefly touched on <code class="language-plaintext highlighter-rouge">ansible-navigator</code>, but <code class="language-plaintext highlighter-rouge">ansible-navigator</code> is crucial for developing and testing
EEs before actually putting them into production - so we need to have a deeper look into it to actually leverage its functionalities.</p>

<h3 id="installing-ansible-navigator">Installing <code class="language-plaintext highlighter-rouge">ansible-navigator</code></h3>

<p>There are multiple ways you can install <code class="language-plaintext highlighter-rouge">ansible-navigator</code>, which are detailed in the
<a href="https://ansible.readthedocs.io/projects/navigator/installation/">installation documentation</a>.</p>

<p>To install a stable version of <code class="language-plaintext highlighter-rouge">ansible-navigator</code> on RHEL (I’ll refer to it as <em>downstream</em>), you need access to one of the Red Hat Ansible Automation Platform
repositories, for instance:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Red Hat Ansible Automation Platform 2.4 for RHEL 8 x86_64 (RPMs)</code>, repository ID: <code class="language-plaintext highlighter-rouge">ansible-automation-platform-2.4-for-rhel-8-x86_64-rpms</code></li>
  <li><code class="language-plaintext highlighter-rouge">Red Hat Ansible Automation Platform 2.4 for RHEL 9 x86_64 (RPMs)</code>, repository ID: <code class="language-plaintext highlighter-rouge">ansible-automation-platform-2.4-for-rhel-9-x86_64-rpms</code></li>
</ul>

<p>:information_source: Once again the hint that the above repositories require you to be a <a href="#existing-ees-an-overview">Red Hat subscriber</a>.</p>

<p>Simply enable the repository you’ve chosen using <code class="language-plaintext highlighter-rouge">subscription-manager</code>:</p>

<!-- markdownlint-disable MD014 -->
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>subscription-manager repos <span class="nt">--enable</span> ansible-automation-platform-2.4-for-rhel-8-x86_64-rpms
</code></pre></div></div>
<!-- markdownlint-enable MD014 -->

<p>Then install <code class="language-plaintext highlighter-rouge">ansible-navigator</code> using <code class="language-plaintext highlighter-rouge">dnf</code> or <code class="language-plaintext highlighter-rouge">yum</code>:</p>

<!-- markdownlint-disable MD014 -->
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>dnf <span class="nb">install </span>ansible-navigator
</code></pre></div></div>
<!-- markdownlint-enable MD014 -->

<p>If you’d rather like to use the latest available upstream version, you can do so with <a href="https://pypi.org/project/pip/"><code class="language-plaintext highlighter-rouge">pip</code></a>:</p>

<!-- markdownlint-disable MD014 -->
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>dnf <span class="nb">install </span>python3-pip
<span class="nv">$ </span>python3 <span class="nt">-m</span> pip <span class="nb">install </span>ansible-navigator <span class="nt">--user</span>
</code></pre></div></div>
<!-- markdownlint-enable MD014 -->

<p>For <code class="language-plaintext highlighter-rouge">ansible-navigator</code> to be able to work with EEs, you either need <a href="https://podman.io/"><code class="language-plaintext highlighter-rouge">podman</code></a> or <a href="https://www.docker.com/"><code class="language-plaintext highlighter-rouge">docker</code></a> on your system, as we are going to use
containers and naturally need <em>something</em> to handle them :slightly_smiling_face:. I’ll use <code class="language-plaintext highlighter-rouge">podman</code> for the remainder of this post, but all commands I am going to use with
<code class="language-plaintext highlighter-rouge">podman</code> are working exactly the same when replacing <code class="language-plaintext highlighter-rouge">podman</code> with <code class="language-plaintext highlighter-rouge">docker</code>.</p>

<p>After all, we really only run <strong>one</strong> command with <code class="language-plaintext highlighter-rouge">podman</code>. The remainder will be handled by <code class="language-plaintext highlighter-rouge">ansible-builder</code> :sunglasses:.</p>

<p>:information_source: The upstream variant of <code class="language-plaintext highlighter-rouge">ansible-navigator</code> is not exclusively available on RHEL; You can install it on a few more operating systems. Please refer to the
<a href="https://ansible.readthedocs.io/projects/navigator/installation/">installation documentation</a> to get an overview of all supported operating systems.</p>

<p>:warning: There is one important difference in the above versions: The downstream variant of <code class="language-plaintext highlighter-rouge">ansible-navigator</code> will default to an EE that is provided and supported by Red Hat,
while the upstream variant will default to an upstream EE. At the time of this writing, the downstream variant of <code class="language-plaintext highlighter-rouge">ansible-navigator</code> of the Ansible Automation Platform 2.4
repository will pull <code class="language-plaintext highlighter-rouge">registry.redhat.io/ansible-automation-platform-24/ee-supported-rhel8:latest</code> while the upstream variant will pull <code class="language-plaintext highlighter-rouge">ghcr.io/ansible/creator-ee</code>.</p>

<h3 id="getting-started-with-ansible-navigator">Getting started with <code class="language-plaintext highlighter-rouge">ansible-navigator</code></h3>

<p>First up: <code class="language-plaintext highlighter-rouge">ansible-navigator</code> has a ton of features. We’ll only cover the very basics of it which gets you up to speed with <code class="language-plaintext highlighter-rouge">ansible-navigator</code>. If you’d like to dive deeper
into specific features of <code class="language-plaintext highlighter-rouge">ansible-navigator</code>, the <a href="https://ansible.readthedocs.io/projects/navigator/">documentation</a> provides a good starting point for that.</p>

<p>As I mentioned already, <code class="language-plaintext highlighter-rouge">ansible-navigator</code> is meant to extend the current <code class="language-plaintext highlighter-rouge">CLI</code> tools, which you are most likely familiar with, such as:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ansible-playbook</code></li>
  <li><code class="language-plaintext highlighter-rouge">ansible-inventory</code></li>
  <li><code class="language-plaintext highlighter-rouge">ansible-doc</code></li>
  <li>etc.</li>
</ul>

<p>Extending the functionality of the ‘original’ <code class="language-plaintext highlighter-rouge">CLI</code> tools of Ansible means for <code class="language-plaintext highlighter-rouge">ansible-navigator</code> - in a nutshell - that it can work with EEs. First, you’d maybe think that
only <code class="language-plaintext highlighter-rouge">ansible-playbook</code> should be extended or superseded, as this command is where we actually run playbooks.</p>

<p>Let’s talk about this hypothesis.</p>

<p>It is easiest to show the difference using <code class="language-plaintext highlighter-rouge">ansible-galaxy collection list</code> and <code class="language-plaintext highlighter-rouge">ansible-doc</code>.</p>

<p>Let’s first check which collections I have installed locally:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-galaxy collection list

<span class="c"># /home/steffen/.ansible/collections/ansible_collections</span>
Collection                  Version
<span class="nt">---------------------------</span> <span class="nt">----------</span>
ansible.controller          4.3.0
ansible.netcommon           5.3.0
ansible.posix               1.5.4
ansible.tower               3.8.6
ansible.utils               2.10.3
ansible.windows             1.11.0
community.crypto            2.16.2
community.docker            3.3.2
community.general           7.3.0
community.mysql             3.4.0
community.postgresql        2.2.0
community.routeros          2.7.0
community.zabbix            1.9.1
containers.podman           1.10.1
infra.ah_configuration      2.0.2
kubernetes.core             2.3.2
openstack.cloud             2.0.0
redhat.openshift            2.2.0
redhat.rhel_system_roles    1.22.0
redhat.satellite            3.15.0
redhat.satellite_operations 2.1.0
sscheib.insights            0.0.2
theforeman.foreman          3.11.0-dev
zabbix.zabbix               1.2.2
</code></pre></div></div>

<p>Now, let’s try the same with <code class="language-plaintext highlighter-rouge">ansible-navigator</code>.</p>

<p>First, as I use the downstream variant of <code class="language-plaintext highlighter-rouge">ansible-navigator</code>, I need to login to the container registry of Red Hat (<code class="language-plaintext highlighter-rouge">registry.redhat.io</code>) - this the single <code class="language-plaintext highlighter-rouge">podman</code>
command that is <em>required</em> to know about when using the downstream variant of <code class="language-plaintext highlighter-rouge">ansible-navigator</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>podman login registry.redhat.io
Username: myUsername
Password:
Login Succeeded!
</code></pre></div></div>

<p>:information_source: To learn which credentials you can use to login to <code class="language-plaintext highlighter-rouge">registry.redhat.io</code>, Red Hat has created a great
                     <a href="https://access.redhat.com/RegistryAuthentication">knowledge base article</a> which also explains how to use tokens for authentication instead of username
                     and password.</p>

<p>Let’s run the equivalent command using <code class="language-plaintext highlighter-rouge">ansible-navigator</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-navigator collections list
<span class="nt">--------------------------------------------------------------------------------------------------------------</span>
Execution environment image and pull policy overview
<span class="nt">--------------------------------------------------------------------------------------------------------------</span>
Execution environment image name:     registry.redhat.io/ansible-automation-platform-24/ee-supported-rhel8:latest
Execution environment image tag:      latest
Execution environment pull arguments: None
Execution environment pull policy:    tag
Execution environment pull needed:    True
<span class="nt">--------------------------------------------------------------------------------------------------------------</span>
Updating the execution environment
<span class="nt">--------------------------------------------------------------------------------------------------------------</span>
Running the <span class="nb">command</span>: podman pull registry.redhat.io/ansible-automation-platform-24/ee-supported-rhel8:latest
Trying to pull registry.redhat.io/ansible-automation-platform-24/ee-supported-rhel8:latest...
Getting image <span class="nb">source </span>signatures
Checking <span class="k">if </span>image destination supports signatures
Copying blob 4a22b5338626 skipped: already exists
Copying blob 161ea1f419fb skipped: already exists
Copying blob 72e13691cee8 skipped: already exists
Copying blob 74e0c06e5eac skipped: already exists
Copying config 996b5c1825 <span class="k">done
</span>Writing manifest to image destination
Storing signatures
996b5c1825b0b3d56296900606fe360a652d4633e0f517a6716bf489579808cc


   Name                                 Version    Shadowed    Type         Path
 0│amazon.aws                           6.4.0      False       contained    /usr/share/ansible/collections/ansible_collections/amazon/aws
 1│ansible.builtin                      2.15.9     False       contained    /usr/lib/python3.9/site-packages/ansible
 2│ansible.controller                   4.5.1      False       contained    /usr/share/ansible/collections/ansible_collections/ansible/controller
 3│ansible.netcommon                    6.0.0      False       contained    /usr/share/ansible/collections/ansible_collections/ansible/netcommon
 4│ansible.network                      3.0.0      False       contained    /usr/share/ansible/collections/ansible_collections/ansible/network
 5│ansible.posix                        1.5.4      False       contained    /usr/share/ansible/collections/ansible_collections/ansible/posix
 6│ansible.scm                          2.0.0      False       contained    /usr/share/ansible/collections/ansible_collections/ansible/scm
 7│ansible.security                     2.0.0      False       contained    /usr/share/ansible/collections/ansible_collections/ansible/security
 8│ansible.snmp                         2.0.0      False       contained    /usr/share/ansible/collections/ansible_collections/ansible/snmp
 9│ansible.utils                        3.0.0      False       contained    /usr/share/ansible/collections/ansible_collections/ansible/utils
10│ansible.windows                      1.14.0     False       contained    /usr/share/ansible/collections/ansible_collections/ansible/windows
11│ansible.yang                         2.0.0      False       contained    /usr/share/ansible/collections/ansible_collections/ansible/yang
12│arista.eos                           7.0.0      False       contained    /usr/share/ansible/collections/ansible_collections/arista/eos
13│cisco.asa                            5.0.0      False       contained    /usr/share/ansible/collections/ansible_collections/cisco/asa
14│cisco.ios                            6.1.0      False       contained    /usr/share/ansible/collections/ansible_collections/cisco/ios
15│cisco.iosxr                          7.0.0      False       contained    /usr/share/ansible/collections/ansible_collections/cisco/iosxr
16│cisco.nxos                           6.0.0      False       contained    /usr/share/ansible/collections/ansible_collections/cisco/nxos
17│cloud.common                         2.1.2      False       contained    /usr/share/ansible/collections/ansible_collections/cloud/common
18│cloud.terraform                      1.1.1      False       contained    /usr/share/ansible/collections/ansible_collections/cloud/terraform
19│frr.frr                              2.0.2      False       contained    /usr/share/ansible/collections/ansible_collections/frr/frr
20│ibm.qradar                           3.0.0      False       contained    /usr/share/ansible/collections/ansible_collections/ibm/qradar
21│junipernetworks.junos                6.0.0      False       contained    /usr/share/ansible/collections/ansible_collections/junipernetworks/junos
22│kubernetes.core                      2.4.0      False       contained    /usr/share/ansible/collections/ansible_collections/kubernetes/core
23│microsoft.ad                         1.1.0      False       contained    /usr/share/ansible/collections/ansible_collections/microsoft/ad
24│openvswitch.openvswitch              2.1.1      False       contained    /usr/share/ansible/collections/ansible_collections/openvswitch/openvswitch
25│redhat.amq_broker                    1.3.0      False       contained    /usr/share/ansible/collections/ansible_collections/redhat/amq_broker
26│redhat.eap                           1.3.1      False       contained    /usr/share/ansible/collections/ansible_collections/redhat/eap
27│redhat.insights                      1.0.7      False       contained    /usr/share/ansible/collections/ansible_collections/redhat/insights
28│redhat.openshift                     2.3.0      False       contained    /usr/share/ansible/collections/ansible_collections/redhat/openshift
29│redhat.redhat_csp_download           1.2.2      False       contained    /usr/share/ansible/collections/ansible_collections/redhat/redhat_csp_download
30│redhat.rhel_idm                      1.10.0     False       contained    /usr/share/ansible/collections/ansible_collections/redhat/rhel_idm
31│redhat.rhel_system_roles             1.21.1     False       contained    /usr/share/ansible/collections/ansible_collections/redhat/rhel_system_roles
32│redhat.rhv                           2.4.2      False       contained    /usr/share/ansible/collections/ansible_collections/redhat/rhv
33│redhat.runtimes_common               1.0.2      False       contained    /usr/share/ansible/collections/ansible_collections/redhat/runtimes_common
34│redhat.sap_install                   1.2.1      False       contained    /usr/share/ansible/collections/ansible_collections/redhat/sap_install
35│redhat.satellite                     3.10.0     False       contained    /usr/share/ansible/collections/ansible_collections/redhat/satellite
36│redhat.satellite_operations          1.3.0      False       contained    /usr/share/ansible/collections/ansible_collections/redhat/satellite_operations
37│redhat.sso                           1.2.1      False       contained    /usr/share/ansible/collections/ansible_collections/redhat/sso
38│sap.sap_operations                   1.0.4      False       contained    /usr/share/ansible/collections/ansible_collections/sap/sap_operations
39│servicenow.itsm                      2.1.0      False       contained    /usr/share/ansible/collections/ansible_collections/servicenow/itsm
40│splunk.es                            3.0.0      False       contained    /usr/share/ansible/collections/ansible_collections/splunk/es
41│trendmicro.deepsec                   3.0.0      False       contained    /usr/share/ansible/collections/ansible_collections/trendmicro/deepsec
42│vmware.vmware_rest                   2.3.1      False       contained    /usr/share/ansible/collections/ansible_collections/vmware/vmware_rest
43│vyos.vyos                            4.0.2      False       contained    /usr/share/ansible/collections/ansible_collections/vyos/vyos
</code></pre></div></div>

<p>:information_source: I copied the collection list from the text-based user interface of <code class="language-plaintext highlighter-rouge">ansible-navigator</code>. A text-based user interface might be known to you from e.g.
<code class="language-plaintext highlighter-rouge">nmtui</code>, <code class="language-plaintext highlighter-rouge">tmux</code> or <code class="language-plaintext highlighter-rouge">vim</code>. All of them are based on the same library: <a href="https://en.wikipedia.org/wiki/Ncurses"><code class="language-plaintext highlighter-rouge">ncurses</code></a>, that’s why it might look familiar to you.</p>

<p>Looking at the above output, we can notice that there’s quite a difference to the previous <code class="language-plaintext highlighter-rouge">ansible-galaxy collection list</code>.</p>

<p>Why’s that?</p>

<p>First, the EE image gets pulled. <strong>After</strong> the EE image was pulled, it started <code class="language-plaintext highlighter-rouge">ansible-navigator</code> in the text-based user interface (<code class="language-plaintext highlighter-rouge">TUI</code>), and then finally the collections
are listed.</p>

<p>Now it might become clear why the majority of the <code class="language-plaintext highlighter-rouge">ansible-navigator</code> commands are run in an EE: To show correct information, <code class="language-plaintext highlighter-rouge">ansible-navigator</code> needs to access the Ansible
version inside the EE and with it all the collections, the documentation, the Python packages and so on and so forth.</p>

<p>That is why I can run <code class="language-plaintext highlighter-rouge">ansible-navigator doc vyos.vyos.vyos_static_routes</code> and get the documentation for it, but when I run the equivalent comment with <code class="language-plaintext highlighter-rouge">ansible-doc</code>, Ansible
only shows a warning:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-doc vyos.vyos.vyos_static_routes
<span class="o">[</span>WARNING]: vyos.vyos.vyos_static_routes was not found
</code></pre></div></div>

<p>The reason being that the collection <code class="language-plaintext highlighter-rouge">vyos.vyos</code> is installed within the EE <code class="language-plaintext highlighter-rouge">ansible-automation-platform-24/ee-supported-rhel8</code>, which is used
by <code class="language-plaintext highlighter-rouge">ansible-navigator</code> in this example, but not on my local system, where the <code class="language-plaintext highlighter-rouge">ansible-doc vyos.vyos.vyos_static_routes</code> command will look for.</p>

<h3 id="an-overview-of-the-commands-of-ansible-navigator">An overview of the commands of <code class="language-plaintext highlighter-rouge">ansible-navigator</code></h3>

<p>With the previous chapter, we found out why it makes sense to have the majority of the conventional Ansible <code class="language-plaintext highlighter-rouge">CLI</code> tools extended with EE support. But what features does
<code class="language-plaintext highlighter-rouge">ansible-navigator</code> actually provide?</p>

<p>Let’s have a look at the <code class="language-plaintext highlighter-rouge">--help</code> output of <code class="language-plaintext highlighter-rouge">ansible-navigator</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-navigator <span class="nt">--help</span>
Usage: ansible-navigator <span class="o">[</span>options]

<span class="o">[</span>..]

Subcommands:
 <span class="o">{</span>subcommand<span class="o">}</span> <span class="nt">--help</span>
  builder                                        Build <span class="o">[</span>execution environment]<span class="o">(</span>https://docs.ansible.com/ansible/devel/getting_started_ee/index.html<span class="o">)</span> <span class="o">(</span>container image<span class="o">)</span>
  collections                                    Explore available collections
  config                                         Explore the current ansible configuration
  doc                                            Review documentation <span class="k">for </span>a module or plugin
  <span class="nb">exec                                           </span>Run a <span class="nb">command </span>within an execution environment
  images                                         Explore execution environment images
  inventory                                      Explore an inventory
  lint                                           Lint a file or directory <span class="k">for </span>common errors and issues
  replay                                         Explore a previous run using a playbook artifact
  run                                            Run a playbook
  settings                                       Review the current ansible-navigator settings
  welcome                                        Start at the welcome page
</code></pre></div></div>

<p>That’s quite a lot of sub-commands, but how do they map to the original Ansible <code class="language-plaintext highlighter-rouge">CLI</code> tools?</p>

<p>The answer is not as straight-forward as you might think. First off: <code class="language-plaintext highlighter-rouge">ansible-navigator</code> is an <strong>extension</strong> to the original Ansible <code class="language-plaintext highlighter-rouge">CLI</code> tools, <strong>not</strong> a <strong>replacement</strong>.
Having said that, <em>some</em> original Ansible <code class="language-plaintext highlighter-rouge">CLI</code> tools are incorporated into <code class="language-plaintext highlighter-rouge">ansible-navigator</code>:</p>

<p>Let me start with the obvious ones:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">ansible command</th>
      <th style="text-align: left">ansible-navigator command</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ansible-galaxy collection list</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ansible-navigator collections list</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ansible-config</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ansible-navigator config</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ansible-doc</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ansible-navigator doc</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ansible-inventory</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ansible-navigator inventory</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ansible-playbook</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ansible-navigator run</code></td>
    </tr>
  </tbody>
</table>

<p>The above table shows the most common Ansible <code class="language-plaintext highlighter-rouge">CLI</code> tools, but a few are missing:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ansible</code></li>
  <li><code class="language-plaintext highlighter-rouge">ansible-test</code></li>
  <li><code class="language-plaintext highlighter-rouge">ansible-vault</code></li>
</ul>

<p>For both <code class="language-plaintext highlighter-rouge">ansible</code> and <code class="language-plaintext highlighter-rouge">ansible-test</code> you can use the <code class="language-plaintext highlighter-rouge">exec</code> sub-command. For an Ansible ad-hoc command this will look like the following:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-navigator <span class="nb">exec</span> <span class="nt">--</span> ansible <span class="nt">-m</span> ping localhost
<span class="nt">--------------------------------------------------------------------------------------------------------------</span>
Execution environment image and pull policy overview
<span class="nt">--------------------------------------------------------------------------------------------------------------</span>
Execution environment image name:     registry.redhat.io/ansible-automation-platform-24/ee-supported-rhel8:latest
Execution environment image tag:      latest
Execution environment pull arguments: None
Execution environment pull policy:    tag
Execution environment pull needed:    True
<span class="nt">--------------------------------------------------------------------------------------------------------------</span>
Updating the execution environment
<span class="nt">--------------------------------------------------------------------------------------------------------------</span>
Running the <span class="nb">command</span>: podman pull registry.redhat.io/ansible-automation-platform-24/ee-supported-rhel8:latest
Trying to pull registry.redhat.io/ansible-automation-platform-24/ee-supported-rhel8:latest...
Getting image <span class="nb">source </span>signatures
Checking <span class="k">if </span>image destination supports signatures
Copying blob 4a22b5338626 skipped: already exists
Copying blob 72e13691cee8 skipped: already exists
Copying blob 161ea1f419fb skipped: already exists
Copying blob 74e0c06e5eac skipped: already exists
Copying config 996b5c1825 <span class="k">done
</span>Writing manifest to image destination
Storing signatures
996b5c1825b0b3d56296900606fe360a652d4633e0f517a6716bf489579808cc
localhost | SUCCESS <span class="o">=&gt;</span> <span class="o">{</span>
    <span class="s2">"changed"</span>: <span class="nb">false</span>,
    <span class="s2">"ping"</span>: <span class="s2">"pong"</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>Personally</strong>, I do not see much sense in using <code class="language-plaintext highlighter-rouge">ansible-vault</code> and <code class="language-plaintext highlighter-rouge">ansible-test</code> with <code class="language-plaintext highlighter-rouge">ansible-navigator</code>; It is just easier to stick with the original <code class="language-plaintext highlighter-rouge">CLI</code> tools for them.</p>

<p>If you’d really like to do it, here are the commands:</p>

<!-- markdownlint-disable MD014 -->
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-navigator <span class="nb">exec</span> <span class="nt">--</span> ansible-test <span class="nt">--help</span>
<span class="nv">$ </span>ansible-navigator <span class="nb">exec</span> <span class="nt">--</span> ansible-vault <span class="nt">--help</span>
</code></pre></div></div>
<!-- markdownlint-enable MD014 -->

<p>What essentially is done with <code class="language-plaintext highlighter-rouge">ansible-navigator exec</code> is to execute commands inside the EE. No more, no less. For the ad-hoc commands, this can definitively be a benefit to
run it inside an EE, but for <code class="language-plaintext highlighter-rouge">ansible-test</code> and <code class="language-plaintext highlighter-rouge">ansible-vault</code> I don’t see the value. If you know a use-case, please let me know! :slightly_smiling_face:</p>

<p>Lastly, there are also some sub-commands that are specific to <code class="language-plaintext highlighter-rouge">ansible-navigator</code>:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">builder</code></li>
  <li><code class="language-plaintext highlighter-rouge">images</code></li>
  <li><code class="language-plaintext highlighter-rouge">lint</code></li>
  <li><code class="language-plaintext highlighter-rouge">replay</code></li>
  <li><code class="language-plaintext highlighter-rouge">settings</code></li>
</ul>

<p>Let me start with the ones, where I do not see a benefit in using them directly with <code class="language-plaintext highlighter-rouge">ansible-navigator</code>, but your mileage my vary:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">builder</code>: You could theoretically build EEs using <code class="language-plaintext highlighter-rouge">ansible-navigator builder</code>, but under the hood it basically calls <code class="language-plaintext highlighter-rouge">ansible-builder</code>, so I decided to stick to
<code class="language-plaintext highlighter-rouge">ansible-builder</code> directly</li>
  <li><code class="language-plaintext highlighter-rouge">lint</code>: With <code class="language-plaintext highlighter-rouge">ansible-navigator lint</code> you can lint your Ansible code, <em>if</em> <code class="language-plaintext highlighter-rouge">ansible-lint</code> is installed. Essentially, it calls <code class="language-plaintext highlighter-rouge">ansible-lint</code> under the hood, so I decided to
 stick to <code class="language-plaintext highlighter-rouge">ansible-lint</code> directly</li>
</ul>

<p>So what’s left for sub-commands are <code class="language-plaintext highlighter-rouge">images</code>, <code class="language-plaintext highlighter-rouge">replay</code> and <code class="language-plaintext highlighter-rouge">settings</code>.</p>

<p>With <code class="language-plaintext highlighter-rouge">ansible-navigator settings</code> you can view the current settings of <code class="language-plaintext highlighter-rouge">ansible-navigator</code> and create sample settings.</p>

<h3 id="configuration-of-ansible-navigator">Configuration of <code class="language-plaintext highlighter-rouge">ansible-navigator</code></h3>

<p><code class="language-plaintext highlighter-rouge">ansible-navigator</code> <a href="https://ansible.readthedocs.io/projects/navigator/settings/">configuration file locations</a> follow the same logic as the well-known
<code class="language-plaintext highlighter-rouge">ansible.cfg</code>.</p>

<p>Following locations are valid:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ansible-navigator.yml</code> in your current working directory</li>
  <li><code class="language-plaintext highlighter-rouge">~/.ansible-navigator.yml</code> in your home directory</li>
</ul>

<p>:information_source: The <code class="language-plaintext highlighter-rouge">ansible-navigator.yml</code> configuration file in your current working directory has precedence over the <code class="language-plaintext highlighter-rouge">~/.ansible-navigator.yml</code> in your home directory.</p>

<p>Alternatively, you can override the configuration file location with an environment variable: <code class="language-plaintext highlighter-rouge">ANSIBLE_NAVIGATOR_CONFIG</code>. Please note that the environment variable
<code class="language-plaintext highlighter-rouge">ANSIBLE_NAVIGATOR_CONFIG</code> has the highest precedence.</p>

<p><code class="language-plaintext highlighter-rouge">ansible-navigator</code> settings can either be stored in <code class="language-plaintext highlighter-rouge">YAML</code> or <code class="language-plaintext highlighter-rouge">JSON</code>. For <code class="language-plaintext highlighter-rouge">YAML</code> the file extension needs to either be <code class="language-plaintext highlighter-rouge">.yml</code> or <code class="language-plaintext highlighter-rouge">.yaml</code>. For <code class="language-plaintext highlighter-rouge">JSON</code> it is <code class="language-plaintext highlighter-rouge">.json</code>.</p>

<p>Decide on either format (I suggest <code class="language-plaintext highlighter-rouge">YAML</code>, of course :slightly_smiling_face:) and make sure that only <em>one</em> configuration file is present in either of the locations. If
<code class="language-plaintext highlighter-rouge">ansible-navigator</code> finds more than one configuration file in one of the possible configuration file locations, it will error out:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-navigator settings <span class="nt">--help</span>
  Error: Only one file among <span class="s1">'/home/steffen/.ansible-navigator.yml'</span>,
         <span class="s1">'/home/steffen/.ansible-navigator.yaml'</span> and
         <span class="s1">'/home/steffen/.ansible-navigator.json'</span> should be present <span class="k">in</span>
         /home/steffen Found: <span class="s1">'/home/steffen/.ansible-navigator.yml'</span> and
         <span class="s1">'/home/steffen/.ansible-navigator.json'</span>

   Note: Configuration failed, using default log file location.
         <span class="o">(</span>/home/steffen/ansible-navigator.log<span class="o">)</span> Log level <span class="nb">set </span>to debug
   Hint: Review the hints and log file to see what went wrong.
</code></pre></div></div>

<p>You can find a <a href="https://ansible.readthedocs.io/projects/navigator/settings/">sample configuration</a> in the documentation or you can generate one using <code class="language-plaintext highlighter-rouge">ansible-navigator</code>.</p>

<p>Okay, let’s generate a sample configuration using <code class="language-plaintext highlighter-rouge">ansible-navigator settings --sample</code> and redirect the output to <code class="language-plaintext highlighter-rouge">~/.ansible-navigator.yml</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-navigator settings <span class="nt">--sample</span> <span class="o">&gt;</span> ~/.ansible-navigator.yml
Trying to pull registry.redhat.io/ansible-automation-platform-24/ee-supported-rhel8:latest...
Getting image <span class="nb">source </span>signatures
Checking <span class="k">if </span>image destination supports signatures
Copying blob 4a22b5338626 skipped: already exists
Copying blob 161ea1f419fb skipped: already exists
Copying blob 72e13691cee8 skipped: already exists
Copying blob 74e0c06e5eac skipped: already exists
Copying config 996b5c1825 <span class="k">done
</span>Writing manifest to image destination
Storing signatures
</code></pre></div></div>

<p>Unfortunately, this leaves us with a broken configuration, as part of the image pulling is also part of the <code class="language-plaintext highlighter-rouge">~/.ansible-navigator.yml</code> configuration file:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat</span> ~/.ansible-navigator.yml
996b5c1825b0b3d56296900606fe360a652d4633e0f517a6716bf489579808cc
<span class="nt">--------------------------------------------------------------------------------------------------------------</span>
Execution environment image and pull policy overview
<span class="nt">--------------------------------------------------------------------------------------------------------------</span>
Execution environment image name:     registry.redhat.io/ansible-automation-platform-24/ee-supported-rhel8:latest
Execution environment image tag:      latest
Execution environment pull arguments: None
Execution environment pull policy:    tag
Execution environment pull needed:    True
<span class="nt">--------------------------------------------------------------------------------------------------------------</span>
Updating the execution environment
<span class="nt">--------------------------------------------------------------------------------------------------------------</span>
Running the <span class="nb">command</span>: podman pull registry.redhat.io/ansible-automation-platform-24/ee-supported-rhel8:latest
<span class="nt">---</span>
ansible-navigator:
<span class="c">#   ansible:</span>
<span class="c">#     config:</span>
<span class="c">#       # Help options for ansible-config command in stdout mode</span>
<span class="c">#       help: False</span>
<span class="c">#       # Specify the path to the ansible configuration file</span>
<span class="c">#       path: ./ansible.cfg</span>
<span class="o">[</span>..]
</code></pre></div></div>

<p>:information_source: From my point of view, the indentation in the generated <code class="language-plaintext highlighter-rouge">ansible-navigator</code> sample configuration is wrong. Technically, and according to
the <a href="https://yaml.org/spec/1.2.2/#61-indentation-spaces"><code class="language-plaintext highlighter-rouge">YAML</code> specification 1.2.2</a>, <em>any</em> number of spaces is fine.</p>
<blockquote>
  <p>In <code class="language-plaintext highlighter-rouge">YAML</code> block styles, structure is determined by indentation. In general, indentation is defined as a zero or more space characters at the start of a line.
I think, however, that either two (preferred) or four spaces are the common number of spaces used for indentation.</p>
</blockquote>

<p>The only way I found to overcome this is to create a small configuration file that disables using EEs and will be overwritten by our redirect:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat</span> ~/.ansible-navigator.yml
<span class="nt">---</span>
ansible-navigator:
  execution-environment:
    enabled: <span class="nb">false</span>
...
</code></pre></div></div>

<p>It is not possible to specify the same settings on the <code class="language-plaintext highlighter-rouge">CLI</code> as then <code class="language-plaintext highlighter-rouge">ansible-navigator</code> will error out:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-navigator settings <span class="nt">--ee</span> <span class="nb">false</span> <span class="nt">--sample</span>
Warning: Issues were found <span class="k">while </span>applying the settings.
   Hint: Command provided: <span class="s1">'settings --ee false --sample'</span>

  Error: Settings file found /home/steffen/ansible-navigator.yaml, but failed to load it.
           error was: <span class="s1">'Settings file cannot be empty.'</span>
   Hint: Try checking the settings file <span class="s1">'/home/steffen/ansible-navigator.yaml'</span>and ensure it is properly formatted

   Note: Configuration failed, using default log file location. <span class="o">(</span>/home/steffen/ansible-navigator.log<span class="o">)</span> Log level <span class="nb">set </span>to debug
   Hint: Review the hints and log file to see what went wrong.
</code></pre></div></div>

<h3 id="my-configuration-for-ansible-navigator">My configuration for <code class="language-plaintext highlighter-rouge">ansible-navigator</code></h3>

<p>Below you’ll find one of configurations I am using. I don’t have a configuration in my home directory: The reason being that I store a copy of my <code class="language-plaintext highlighter-rouge">ansible.cfg</code>, my
<code class="language-plaintext highlighter-rouge">ansible-navigator.yml</code> and various other configurations in a ‘project’ directory. This project directory is structured per use-case and that’s why I have special settings in
each <code class="language-plaintext highlighter-rouge">ansible-navigator.yml</code> and <code class="language-plaintext highlighter-rouge">ansible.cfg</code> - such as number of forks, the Ansible remote user and the EE to use.</p>

<p>I’ll write a separate blog post about how and why I structure my projects this way in the distant future, as I have been asked a couple of times already how I develop
Ansible code and how I organize things - but that’s a topic for the other blog post.</p>

<p>Below is the configuration of my <code class="language-plaintext highlighter-rouge">ansible-navigator.yml</code> for my project <code class="language-plaintext highlighter-rouge">ansible-project-satellite</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">ansible-navigator</span><span class="pi">:</span>
  <span class="na">mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">stdout'</span>
  <span class="na">logging</span><span class="pi">:</span>
    <span class="na">level</span><span class="pi">:</span> <span class="s1">'</span><span class="s">critical'</span>
    <span class="na">append</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">file</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/dev/null'</span>

  <span class="na">color</span><span class="pi">:</span>
    <span class="na">enable</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">osc4</span><span class="pi">:</span> <span class="no">true</span>

  <span class="na">editor</span><span class="pi">:</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s1">'</span><span class="s">vim_from_setting'</span>
    <span class="na">console</span><span class="pi">:</span> <span class="no">true</span>

  <span class="na">inventory-columns</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ansible_network_os'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ansible_network_cli_ssh_type'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ansible_connection'</span>

  <span class="na">execution-environment</span><span class="pi">:</span>
    <span class="na">container-engine</span><span class="pi">:</span> <span class="s1">'</span><span class="s">podman'</span>
    <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s1">'</span><span class="s">localhost/ee-ansible_project-satellite-rhel-8:latest'</span>
    <span class="na">pull</span><span class="pi">:</span>
      <span class="na">policy</span><span class="pi">:</span> <span class="s1">'</span><span class="s">never'</span>

  <span class="na">playbook-artifact</span><span class="pi">:</span>
    <span class="na">enable</span><span class="pi">:</span> <span class="no">false</span>

  <span class="na">ansible</span><span class="pi">:</span>
    <span class="na">config</span><span class="pi">:</span>
      <span class="na">help</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">./ansible.cfg'</span>
    <span class="na">doc</span><span class="pi">:</span>
      <span class="na">help</span><span class="pi">:</span> <span class="no">false</span>
    <span class="na">inventory</span><span class="pi">:</span>
      <span class="na">help</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">entries</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s1">'</span><span class="s">./inventory/'</span>

  <span class="na">ansible-lint</span><span class="pi">:</span>
    <span class="na">config</span><span class="pi">:</span> <span class="s1">'</span><span class="s">./.ansible-lint'</span>

  <span class="na">time-zone</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Europe/Berlin'</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>It is a very minimal configuration and should not be taken as “the correct configuration to use”. This is my preference, yours probably differ.</p>

<p>Following a quick summary of the settings I applied:</p>

<ol>
  <li>I don’t want to log to a log-file, that’s why basically ‘redirect’ the log to <code class="language-plaintext highlighter-rouge">/dev/null</code></li>
  <li>I’d like to have colors in my terminal :slightly_smiling_face:. And yes, I develop on the <code class="language-plaintext highlighter-rouge">CLI</code> using <code class="language-plaintext highlighter-rouge">vim</code> only :satisfied:!</li>
  <li>The editor that should be used when editing anything in <code class="language-plaintext highlighter-rouge">ansible-navigator</code> should be <code class="language-plaintext highlighter-rouge">vim</code></li>
  <li>I added a few more <code class="language-plaintext highlighter-rouge">inventory-columns</code> that I find interesting</li>
  <li>I set <code class="language-plaintext highlighter-rouge">podman</code> as my <code class="language-plaintext highlighter-rouge">container-engine</code> and specified a specific image to use. I also never want <code class="language-plaintext highlighter-rouge">ansible-navigator</code> to pull the image, because it is locally available</li>
  <li>I don’t want to use <code class="language-plaintext highlighter-rouge">playbook-artifacts</code> - we’ll talk about that in a moment</li>
  <li>I specify the <code class="language-plaintext highlighter-rouge">ansible.cfg</code> and the <code class="language-plaintext highlighter-rouge">inventories</code> to use and disable all help in the <code class="language-plaintext highlighter-rouge">TUI</code></li>
  <li>I played around with <code class="language-plaintext highlighter-rouge">ansible-lint</code> in <code class="language-plaintext highlighter-rouge">ansible-navigator</code> and left the <code class="language-plaintext highlighter-rouge">ansible-lint</code> setting pointing to my configuration file</li>
  <li>Lastly, I specified the time-zone. This will be used for calculating the time when using <code class="language-plaintext highlighter-rouge">playbook-artifacts</code></li>
</ol>

<h3 id="playbook-artifacts-in-ansible-navigator"><code class="language-plaintext highlighter-rouge">playbook-artifacts</code> in <code class="language-plaintext highlighter-rouge">ansible-navigator</code></h3>

<p><code class="language-plaintext highlighter-rouge">ansible-navigator</code> does not only extend the original Ansible <code class="language-plaintext highlighter-rouge">CLI</code> tools with EEs, but also brings some new features to the table. One of them is <code class="language-plaintext highlighter-rouge">playbook-artifacts</code>.
<code class="language-plaintext highlighter-rouge">playbook-artifacts</code> are essentially a structured way of saving the events of a playbook run.</p>

<p>At first, this might sound boring and not useful at all, but here is the thing which makes it great:</p>

<p>You can replay any playbook (using <code class="language-plaintext highlighter-rouge">ansible-navigator replay</code>) by using the created playbook artifact. This allows for easier troubleshooting as every task is written to the
artifact file with both the arguments it was executed with and what the result of it was.</p>

<p>This can be beneficial as you are able to troubleshoot easier. And if you ever hit a roadblock and simply cannot find out what’s wrong, you just share the artifact with one of
your colleagues and can get your colleague’s help that way.</p>

<p>I personally don’t use them at all times. I enable the artifact creation when I need it.</p>

<h3 id="modes-of-ansible-navigator">Modes of <code class="language-plaintext highlighter-rouge">ansible-navigator</code></h3>

<p><code class="language-plaintext highlighter-rouge">ansible-navigator</code> comes with two modes:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">interactive</code>: That’s the default and provides you with the <code class="language-plaintext highlighter-rouge">TUI</code> to interact with <code class="language-plaintext highlighter-rouge">ansible-navigator</code>. This mode is required when replaying artifacts. It is also helpful
 when looking at existing EEs to determine what’s in them.</li>
  <li><code class="language-plaintext highlighter-rouge">stdout</code>: <code class="language-plaintext highlighter-rouge">stdout</code> is essentially the ‘good old look’ of <code class="language-plaintext highlighter-rouge">ansible-playbook</code>. I prefer using this mode for most of the things I do with <code class="language-plaintext highlighter-rouge">ansible-navigator</code>.</li>
</ol>

<p>The mode can either be saved in the configuration file (<a href="#my-configuration-for-ansible-navigator">as in my above configuration file</a> or can be overwritten by specifying the
<code class="language-plaintext highlighter-rouge">-m</code> or <code class="language-plaintext highlighter-rouge">--mode</code> parameter, like in the following example:</p>

<!-- markdownlint-disable MD014 -->
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-navigator <span class="nt">-m</span> stdout
</code></pre></div></div>
<!-- markdownlint-enable MD014 -->

<h3 id="navigating-in-ansible-navigator-when-using-the-text-based-user-interface-tui">Navigating in <code class="language-plaintext highlighter-rouge">ansible-navigator</code> when using the text-based user interface (<code class="language-plaintext highlighter-rouge">TUI</code>)</h3>

<p>Navigation in the <code class="language-plaintext highlighter-rouge">TUI</code> of <code class="language-plaintext highlighter-rouge">ansible-navigator</code> is easy and straight-forward when you are used to <code class="language-plaintext highlighter-rouge">vim</code>.</p>

<p>If you are not used to <code class="language-plaintext highlighter-rouge">vim</code>, here is a quick run through:
Pressing <code class="language-plaintext highlighter-rouge">:</code> will enable you to call the different functions. Say you wanted to check the images <code class="language-plaintext highlighter-rouge">ansible-navigator</code> knows about, then you’ll simply type <code class="language-plaintext highlighter-rouge">:images</code> and press enter.</p>

<p>Getting help is done via <code class="language-plaintext highlighter-rouge">:help</code>, looking at collections is done via <code class="language-plaintext highlighter-rouge">:collections</code>, and so on.</p>

<p>There are also shortcuts available (as you might have noticed when looking at <code class="language-plaintext highlighter-rouge">:help</code>). For instance, <code class="language-plaintext highlighter-rouge">:im</code> calls <code class="language-plaintext highlighter-rouge">:images</code>, <code class="language-plaintext highlighter-rouge">:h</code> calls <code class="language-plaintext highlighter-rouge">:help</code>, etc. The shortcuts are listed
in <code class="language-plaintext highlighter-rouge">:help</code>. Going back a screen is done by pressing escape on your keyboard and you can quit <code class="language-plaintext highlighter-rouge">ansible-navigator</code> with <code class="language-plaintext highlighter-rouge">:quit</code> or <code class="language-plaintext highlighter-rouge">:q</code>.</p>

<p>So, once you are in one of these functions, you’ll notice on the left-hand side a numbering which starts at 0.</p>

<p>Let’s look into an example of <code class="language-plaintext highlighter-rouge">ansible-navigator images</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Image                                                    Tag                                          Execution environment                 Created                  Size
0│ansible-test-utility-container                           2.0.0                                        False                                 15 months ago            7.7 MB
1│default-test-container                                   7.14.0                                       False                                 9 months ago             1.6 GB
2│ee-ansible_project-zabbix-rhel-8                         latest                                       True                                  2 months ago             436 MB
3│ee-minimal-rhel8                                         2.15                                         True                                  4 months ago             338 MB
4│ee-supported-rhel8                                       latest                                       True                                  2 weeks ago              1.73 GB
5│rootfs                                                   x86-generic-openwrt-22.03                    False                                 4 months ago             12.1 MB
6│rootfs                                                   x86-generic-openwrt-21.02                    False                                 4 months ago             10.5 MB
7│rootfs                                                   x86-generic-snapshot                         False                                 10 months ago            9.15 MB
</code></pre></div></div>

<p>If I now want to know more about the EE <code class="language-plaintext highlighter-rouge">ee-supported-rhel8</code>, I simply press <code class="language-plaintext highlighter-rouge">3</code> and I’ll be offered a different set of options:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Image: ee-supported-rhel:latest                                                            Description
0│Image information                                                                          Information collected from image inspection
1│General information                                                                        OS and python version information
2│Ansible version and collections                                                            Information about ansible and ansible collections
3│Python packages                                                                            Information about python and python packages
4│Operating system packages                                                                  Information about operating system packages
5│Everything                                                                                 All image information
</code></pre></div></div>

<p>To know more about the Ansible version and the EEs included collections, I press <code class="language-plaintext highlighter-rouge">2</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Image: ee-supported-rhel8:latest (primary) (Information about ansible and ansible collections)
 0│---
 1│ansible:
 2│  collections:
 3│    details:
 4│      amazon.aws: 6.4.0
 5│      ansible.controller: 4.5.1
 6│      ansible.netcommon: 6.0.0
 7│      ansible.network: 3.0.0
 8│      ansible.posix: 1.5.4
 9│      ansible.scm: 2.0.0
10│      ansible.security: 2.0.0
11│      ansible.snmp: 2.0.0
12│      ansible.utils: 3.0.0
13│      ansible.windows: 1.14.0
14│      ansible.yang: 2.0.0
15│      arista.eos: 7.0.0
16│      cisco.asa: 5.0.0
17│      cisco.ios: 6.1.0
18│      cisco.iosxr: 7.0.0
19│      cisco.nxos: 6.0.0
20│      cloud.common: 2.1.2
21│      cloud.terraform: 1.1.1
22│      frr.frr: 2.0.2
23│      ibm.qradar: 3.0.0
24│      junipernetworks.junos: 6.0.0
25│      kubernetes.core: 2.4.0
26│      microsoft.ad: 1.1.0
27│      openvswitch.openvswitch: 2.1.1
28│      redhat.amq_broker: 1.3.0
29│      redhat.eap: 1.3.1
30│      redhat.insights: 1.0.7
31│      redhat.openshift: 2.3.0
32│      redhat.redhat_csp_download: 1.2.2
33│      redhat.rhel_idm: 1.10.0
34│      redhat.rhel_system_roles: 1.21.1
35│      redhat.rhv: 2.4.2
36│      redhat.runtimes_common: 1.0.2
37│      redhat.sap_install: 1.2.1
38│      redhat.satellite: 3.10.0
39│      redhat.satellite_operations: 1.3.0
40│      redhat.sso: 1.2.1
41│      sap.sap_operations: 1.0.4
42│      servicenow.itsm: 2.1.0
43│      splunk.es: 3.0.0
44│      trendmicro.deepsec: 3.0.0
45│      vmware.vmware_rest: 2.3.1
46│      vyos.vyos: 4.0.2
47│  version:
48│    details: ansible [core 2.15.9]
</code></pre></div></div>

<p>Now I can see what Ansible collections are part of the EE, great :slightly_smiling_face:.</p>

<p>If you have more than 9 options available, you need to make use of <code class="language-plaintext highlighter-rouge">:10</code>, followed by pressing enter to get to the 10th item, or <code class="language-plaintext highlighter-rouge">:35</code> followed by pressing enter to get to
the 35th item. This is exactly the way you’d navigate to line numbers in <code class="language-plaintext highlighter-rouge">vim</code> :sunglasses:.</p>

<p>:information_source: Whenever there is nothing more <code class="language-plaintext highlighter-rouge">ansible-navigator</code> can show to you by selecting an item from the list - like with the collections above - it’ll simply do
nothing. So when I would want to get more information about the Satellite collection, which is item 38 and type <code class="language-plaintext highlighter-rouge">:38</code> followed by enter, <code class="language-plaintext highlighter-rouge">ansible-navigator</code> will do nothing.</p>

<h3 id="running-playbooks-in-ansible-navigator">Running playbooks in <code class="language-plaintext highlighter-rouge">ansible-navigator</code></h3>

<p>Now we’ve learned a lot about <code class="language-plaintext highlighter-rouge">ansible-navigator</code>, but let’s actually use it.</p>

<p>I have the following <em>very</em> simple playbook:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Configure</span><span class="nv"> </span><span class="s">SSHD'</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s1">'</span><span class="s">g_satellites'</span>
  <span class="na">gather_facts</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">become</span><span class="pi">:</span> <span class="no">true</span>  <span class="c1"># required for the role redhat.rhel_system_roles.sshd'</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">role</span><span class="pi">:</span> <span class="s1">'</span><span class="s">file_deployment'</span>
    <span class="pi">-</span> <span class="na">role</span><span class="pi">:</span> <span class="s1">'</span><span class="s">redhat.rhel_system_roles.sshd'</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>In the above playbook I merely include two roles:</p>

<ol>
  <li>My own role <a href="https://github.com/sscheib/ansible-role-file_deployment"><code class="language-plaintext highlighter-rouge">file_deployment</code></a> which places two files on the managed nodes that are required to configure <code class="language-plaintext highlighter-rouge">sshd</code>
in the way I want it</li>
  <li>The RHEL system role to configure <code class="language-plaintext highlighter-rouge">sshd</code>:
<a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/rhel_system_roles/content/role/sshd/"><code class="language-plaintext highlighter-rouge">redhat.rhel_system_roles.sshd</code></a></li>
</ol>

<p>For this little demo, I specified
<a href="https://catalog.redhat.com/software/containers/ansible-automation-platform-24/ee-supported-rhel8/63a333ce183540f5962ae01d">ansible-automation-platform-24/ee-supported-rhel8</a> as
the EE to use and set the pull policy to <code class="language-plaintext highlighter-rouge">missing</code> in the <code class="language-plaintext highlighter-rouge">ansible-navigator</code> configuration file in my working directory (<code class="language-plaintext highlighter-rouge">ansible-navigator.yml</code>). I further specified to
use as inventory the directory <code class="language-plaintext highlighter-rouge">./inventory</code> and to use the <code class="language-plaintext highlighter-rouge">ansible.cfg</code> that is in my current directory:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">ansible-navigator</span><span class="pi">:</span>
<span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
  <span class="na">execution-environment</span><span class="pi">:</span>
    <span class="na">container-engine</span><span class="pi">:</span> <span class="s1">'</span><span class="s">podman'</span>
    <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ee-supported-rhel8'</span>
    <span class="na">pull</span><span class="pi">:</span>
      <span class="na">policy</span><span class="pi">:</span> <span class="s1">'</span><span class="s">missing'</span>
<span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
  <span class="na">ansible</span><span class="pi">:</span>
    <span class="na">config</span><span class="pi">:</span>
      <span class="na">help</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">./ansible.cfg'</span>
    <span class="na">doc</span><span class="pi">:</span>
      <span class="na">help</span><span class="pi">:</span> <span class="no">false</span>
    <span class="na">inventory</span><span class="pi">:</span>
      <span class="na">help</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">entries</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s1">'</span><span class="s">./inventory/'</span>
<span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
</code></pre></div></div>

<p>Let’s quickly examine the folder structure in this directory:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tree <span class="nb">.</span>
<span class="nb">.</span>
├── ansible.cfg
├── ansible-navigator.yml
├── collections
│   └── requirements.yml
├── inventory
│   ├── g_satellites.yml
│   ├── host_vars
│   │   ├── satellite.office.int.scheib.me
│   │   │   ├── 00a_secrets.yml
│   │   │   ├── 00b_secrets_base.yml
│   │   │   ├── 00c_register_satellite.yml
│   │   │   ├── 00d_user_deployment.yml
│   │   │   ├── 00e_package_installation.yml
│   │   │   ├── 00f_service_management.yml
│   │   │   ├── 00g_file_deployment.yml
│   │   └── satellite.pve.ext.scheib.me
│   │       ├── 00a_secrets.yml
│   │       ├── 00b_secrets_base.yml
│   │       ├── 00c_register_satellite.yml
│   │       ├── 00d_user_deployment.yml
│   │       ├── 00e_package_installation.yml
│   │       ├── 00f_service_management.yml
│   │       ├── 00g_sshd.yml
│   └── ungrouped.yml
├── playbooks
│   ├── 000_setup.yml
│   ├── 00_create_kickstart.yml
│   ├── 01a_register_satellite.yml
│   ├── 01b_user_deployment.yml
│   ├── 01c_package_installation.yml
│   ├── 01d_service_management.yml
│   ├── 01e_sshd.yml
│   ├── 01f_generate_ssl_key_pairs.yml
│   ├── files
│   │   ├── sshd_issue.net
│   │   └── sshd_motd
│   ├── group_vars -&gt; ../inventory/group_vars/
│   └── host_vars -&gt; ../inventory/host_vars/
└── roles
    └── requirements.yml

20 directories, 159 files
</code></pre></div></div>

<p>:information_source: The directory contains <em>way more</em> files and directories than shown above (see the last line in the output above), but I removed a lot of the output
to shorten it a little.</p>

<p>My hosts are in this specific case in the group <code class="language-plaintext highlighter-rouge">g_satellites</code> which is defined in the file <code class="language-plaintext highlighter-rouge">inventory/g_satellites.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">g_satellites</span><span class="pi">:</span>
  <span class="na">hosts</span><span class="pi">:</span>
    <span class="na">satellite.office.int.scheib.me</span><span class="pi">:</span> <span class="pi">{}</span>
    <span class="na">satellite.pve.ext.scheib.me</span><span class="pi">:</span> <span class="pi">{}</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>The corresponding <code class="language-plaintext highlighter-rouge">host_vars</code> for both hosts are stored in <code class="language-plaintext highlighter-rouge">inventory/host_vars/&lt;hostname&gt;</code>. Both <code class="language-plaintext highlighter-rouge">host_vars</code> directories contain a file <code class="language-plaintext highlighter-rouge">00g_sshd.yml</code> which is where I get
the settings for the RHEL system role <code class="language-plaintext highlighter-rouge">redhat.rhel_system_roles.sshd</code>.</p>

<p>As an example what one of them looks like:</p>

<!-- markdownlint-disable MD003 MD022 -->

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="nn">---</span>
<span class="na">sshd_enable</span><span class="pi">:</span> <span class="no">true</span>
<span class="na">sshd_skip_defaults</span><span class="pi">:</span> <span class="no">true</span>
<span class="na">sshd_manage_firewall</span><span class="pi">:</span> <span class="no">true</span>
<span class="na">sshd_manage_selinux</span><span class="pi">:</span> <span class="no">true</span>
<span class="na">sshd_sysconfig</span><span class="pi">:</span> <span class="no">true</span>
<span class="na">sshd_sysconfig_override_crypto_policy</span><span class="pi">:</span> <span class="no">true</span>
<span class="na">sshd</span><span class="pi">:</span>
  <span class="na">AddressFamily</span><span class="pi">:</span> <span class="s1">'</span><span class="s">inet'</span>
  <span class="na">AllowAgentForwarding</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">AllowTcpForwarding</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">AllowStreamLocalForwarding</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">AuthenticationMethods</span><span class="pi">:</span> <span class="s1">'</span><span class="s">publickey'</span>
  <span class="na">AuthorizedKeysFile</span><span class="pi">:</span> <span class="s1">'</span><span class="s">%h/.ssh/authorized_keys'</span>
  <span class="na">Banner</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/etc/issue.net'</span>
  <span class="na">ChallengeResponseAuthentication</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">ChrootDirectory</span><span class="pi">:</span> <span class="s1">'</span><span class="s">none'</span>
  <span class="na">Ciphers</span><span class="pi">:</span> <span class="pi">&gt;-</span>
    <span class="s">{{</span>
      <span class="s">[</span>
        <span class="s">'chacha20-poly1305@openssh.com',</span>
        <span class="s">'aes256-gcm@openssh.com',</span>
        <span class="s">'aes128-gcm@openssh.com',</span>
        <span class="s">'aes256-ctr',</span>
        <span class="s">'aes192-ctr',</span>
        <span class="s">'aes128-ctr'</span>
      <span class="s">] | join\(',')</span>
    <span class="s">}}</span>
  <span class="na">ClientAliveCountMax</span><span class="pi">:</span> <span class="m">3</span>
  <span class="na">ClientAliveInterval</span><span class="pi">:</span> <span class="m">0</span>
  <span class="na">Compression</span><span class="pi">:</span> <span class="s1">'</span><span class="s">delayed'</span>
  <span class="na">FingerprintHash</span><span class="pi">:</span> <span class="s1">'</span><span class="s">sha512'</span>
  <span class="na">GatewayPorts</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">HostbasedAuthentication</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">HostKey</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">/etc/ssh/ssh_host_ecdsa_key'</span>
  <span class="na">HostKeyAlgorithms</span><span class="pi">:</span> <span class="pi">&gt;-</span>
    <span class="s">{{</span>
      <span class="s">[</span>
        <span class="s">'ecdsa-sha2-nistp256-cert-v01@openssh.com',</span>
        <span class="s">'ecdsa-sha2-nistp384-cert-v01@openssh.com',</span>
        <span class="s">'ecdsa-sha2-nistp521-cert-v01@openssh.com',</span>
        <span class="s">'ecdsa-sha2-nistp256',</span>
        <span class="s">'ecdsa-sha2-nistp384',</span>
        <span class="s">'ecdsa-sha2-nistp521'</span>
      <span class="s">] | join\(',')</span>
    <span class="s">}}</span>
  <span class="na">IgnoreRhosts</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">IPQoS</span><span class="pi">:</span> <span class="s1">'</span><span class="s">lowdelay</span><span class="nv"> </span><span class="s">throughput'</span>
  <span class="na">KexAlgorithms</span><span class="pi">:</span> <span class="pi">&gt;-</span>
    <span class="s">{{</span>
      <span class="s">[</span>
        <span class="s">'curve25519-sha256@libssh.org',</span>
        <span class="s">'ecdh-sha2-nistp521',</span>
        <span class="s">'ecdh-sha2-nistp384',</span>
        <span class="s">'ecdh-sha2-nistp256',</span>
        <span class="s">'diffie-hellman-group-exchange-sha256'</span>
      <span class="s">] | join\(',')</span>
    <span class="s">}}</span>
  <span class="na">ListenAddress</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">0.0.0.0'</span>
  <span class="na">LoginGraceTime</span><span class="pi">:</span> <span class="m">60</span>
  <span class="na">LogLevel</span><span class="pi">:</span> <span class="s1">'</span><span class="s">VERBOSE'</span>
  <span class="na">MACs</span><span class="pi">:</span> <span class="pi">&gt;-</span>
    <span class="s">{{</span>
      <span class="s">[</span>
        <span class="s">'hmac-sha2-512-etm@openssh.com',</span>
        <span class="s">'hmac-sha2-256-etm@openssh.com',</span>
        <span class="s">'umac-128-etm@openssh.com',</span>
        <span class="s">'hmac-sha2-512',</span>
        <span class="s">'hmac-sha2-256',</span>
        <span class="s">'umac-128@openssh.com'</span>
      <span class="s">] | join\(',')</span>
    <span class="s">}}</span>
  <span class="na">MaxAuthTries</span><span class="pi">:</span> <span class="m">3</span>
  <span class="na">MaxSessions</span><span class="pi">:</span> <span class="m">6</span>
  <span class="na">MaxStartups</span><span class="pi">:</span> <span class="s1">'</span><span class="s">10:30:60'</span>
  <span class="na">PasswordAuthentication</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">PermitEmptyPasswords</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">PermitRootLogin</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">PermitTunnel</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">PermitTTY</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">PermitUserEnvironment</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">PermitUserRC</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">PidFile</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/var/run/sshd.pid'</span>
  <span class="na">Port</span><span class="pi">:</span> <span class="m">1905</span>
  <span class="na">PrintMotd</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">Protocol</span><span class="pi">:</span> <span class="m">2</span>
  <span class="na">PubkeyAcceptedKeyTypes</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521'</span>
  <span class="na">PubkeyAuthentication</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">RekeyLimit</span><span class="pi">:</span> <span class="s1">'</span><span class="s">64M</span><span class="nv"> </span><span class="s">4H'</span>
  <span class="na">Subsystem</span><span class="pi">:</span> <span class="s1">'</span><span class="s">sftp</span><span class="nv"> </span><span class="s">internal-sftp'</span>
  <span class="na">StrictModes</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">SyslogFacility</span><span class="pi">:</span> <span class="s1">'</span><span class="s">AUTH'</span>
  <span class="na">TCPKeepAlive</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">UseDNS</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">VersionAddendum</span><span class="pi">:</span> <span class="s1">'</span><span class="s">none'</span>
  <span class="na">X11Forwarding</span><span class="pi">:</span> <span class="no">false</span>
<span class="nn">...</span></code></pre></figure>

<!-- markdownlint-enable MD003 MD022 -->

<p>:information_source: As a side note: Yes, the configuration above is
<a href="https://en.wikipedia.org/wiki/Federal_Information_Processing_Standards">Federal Information Processing Standards (<code class="language-plaintext highlighter-rouge">FIPS</code>)</a> compliant :rofl:.</p>

<p>Finally, there are also <code class="language-plaintext highlighter-rouge">host_vars</code> for my role <code class="language-plaintext highlighter-rouge">file_deployment</code>. As an example you’ll find below the configuration for one of the hosts:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">fd_files</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">sshd_motd'</span>
    <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/etc/motd'</span>
    <span class="na">owner</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">group</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0644'</span>

  <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">sshd_issue.net'</span>
    <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/etc/issue.net'</span>
    <span class="na">owner</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">group</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0644'</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>The corresponding files are stored in <code class="language-plaintext highlighter-rouge">playbooks/files</code>.</p>

<p><em>Locally installed</em> I have my custom role as well as the collection <code class="language-plaintext highlighter-rouge">redhat.rhel_system_roles</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-galaxy role list
<span class="c"># /home/steffen/.ansible/roles</span>
- sscheib.filebeat, <span class="o">(</span>unknown version<span class="o">)</span>
- ansible-timesync, <span class="o">(</span>unknown version<span class="o">)</span>
- willshersystems.sshd, v0.17.0
- ansible-role-logrotate, <span class="o">(</span>unknown version<span class="o">)</span>
- ansible-role-rsyslog, <span class="o">(</span>unknown version<span class="o">)</span>
- ansible-sshd, <span class="o">(</span>unknown version<span class="o">)</span>
- zabbix_add_host, v1.0.6
- satellite_proxmox_compute_ressource, v1.0
- sscheib.openwrt_dropbear, <span class="o">(</span>unknown version<span class="o">)</span>
- openwrt_dropbear, <span class="o">(</span>unknown version<span class="o">)</span>
- satellite_create_host, v1.0.2
- satellite_publish_promote_content_views, v1.0.2
- satellite_prepare_installation, v1.0.3
- satellite_template_synchronization, v1.0.2
- satellite_global_parameters, v1.0.1
- file_deployment, v1.0.1
- rhel_iso_kickstart, v2.0.6
- user_deployment, v1.0.5
- package_installation, v1.0.1
- service_management, v1.0.2
- generate_ssl_key_pairs, v1.1.5
- register_to_satellite, v1.0.4
<span class="c"># /usr/share/ansible/roles</span>
<span class="c"># /etc/ansible/roles</span>

<span class="nv">$ </span>ansible-galaxy collection list

<span class="c"># /home/steffen/.ansible/collections/ansible_collections</span>
Collection                  Version
<span class="nt">---------------------------</span> <span class="nt">----------</span>
ansible.controller          4.3.0
ansible.netcommon           5.3.0
ansible.posix               1.5.4
ansible.tower               3.8.6
ansible.utils               2.10.3
ansible.windows             1.11.0
community.crypto            2.16.2
community.docker            3.3.2
community.general           7.3.0
community.mysql             3.4.0
community.postgresql        2.2.0
community.routeros          2.7.0
community.zabbix            1.9.1
containers.podman           1.10.1
infra.ah_configuration      2.0.2
kubernetes.core             2.3.2
openstack.cloud             2.0.0
redhat.openshift            2.2.0
redhat.rhel_system_roles    1.22.0
redhat.satellite            3.15.0
redhat.satellite_operations 2.1.0
sscheib.insights            0.0.2
theforeman.foreman          3.11.0-dev
zabbix.zabbix               1.2.2
</code></pre></div></div>

<p>That should do it, right? :thinking:</p>

<p>Let’s see what happens:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-navigator run <span class="nt">-m</span> stdout playbooks/01e_sshd.yml <span class="nt">--limit</span> satellite.office.int.scheib.me
ERROR! the role <span class="s1">'file_deployment'</span> was not found <span class="k">in</span> /home/steffen/sources/ansible-project-satellite/playbooks/roles:/home/runner/.ansible/roles:/usr/share/ansible/roles:/etc/ansible/roles:/home/steffen/sources/ansible-project-satellite/playbooks

The error appears to be <span class="k">in</span> <span class="s1">'/home/steffen/sources/ansible-project-satellite/playbooks/01e_sshd.yml'</span>: line 7, column 7, but may
be elsewhere <span class="k">in </span>the file depending on the exact syntax problem.

The offending line appears to be:

  roles:
    - role: <span class="s1">'file_deployment'</span>
      ^ here
Please review the log <span class="k">for </span>errors.
</code></pre></div></div>

<p>That’s certainly correct. The role is not part of my project directory, nor is it part of the EE. Let’s see if we can <em>somehow</em> make it work <em>without</em> building a custom EE
that contains the role.</p>

<p>Let’s adjust the <code class="language-plaintext highlighter-rouge">ansible-navigator.yml</code> configuration a little:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">ansible-navigator</span><span class="pi">:</span>
<span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
  <span class="na">execution-environment</span><span class="pi">:</span>
    <span class="na">container-engine</span><span class="pi">:</span> <span class="s1">'</span><span class="s">podman'</span>
    <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ee-supported-rhel8'</span>
    <span class="na">pull</span><span class="pi">:</span>
      <span class="na">policy</span><span class="pi">:</span> <span class="s1">'</span><span class="s">missing'</span>
    <span class="na">volume-mounts</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">~/.ansible/roles/'</span>
        <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/home/runner/.ansible/roles'</span>
        <span class="na">options</span><span class="pi">:</span> <span class="s1">'</span><span class="s">z'</span>
<span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>We just specified a <a href="https://docs.podman.io/en/v4.4/markdown/podman-volume-mount.1.html"><code class="language-plaintext highlighter-rouge">volume mount</code></a>, which is a container feature to mount a local directory into the
container’s filesystem.</p>

<p>:information_source: The above description of a <code class="language-plaintext highlighter-rouge">volume mount</code> is overly simplified. If you’d like to know more about <code class="language-plaintext highlighter-rouge">volume mounts</code>, please consult the
<a href="https://docs.podman.io/en/latest/markdown/podman-volume-mount.1.html">documentation</a> of <code class="language-plaintext highlighter-rouge">podman</code>.</p>

<p>Rerunning the playbook seems to work now:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ansible-navigator run -m stdout playbooks/01e_sshd.yml --limit satellite.office.int.scheib.me

PLAY [Configure SSHD] ****************************************************************************************************************************************************************

TASK [file_deployment : Include tasks to ensure all variables are defined properly] **************************************************************************************************
included: /home/runner/.ansible/roles/file_deployment/tasks/assert.yml for satellite.office.int.scheib.me

TASK [file_deployment : Ensure mandatory variables, as  well as variables, which have a default value, are set (boolean)] ************************************************************
ok: [satellite.office.int.scheib.me] =&gt; (item=variable: _fd_quiet_assert) =&gt; {
    "__t_var": "_fd_quiet_assert",
    "ansible_loop_var": "__t_var",
    "changed": false,
    "msg": "Variable '_fd_quiet_assert' defined properly - value: 'False'"
}

TASK [file_deployment : Ensure _fd_packages is defined properly] *********************************************************************************************************************
ok: [satellite.office.int.scheib.me] =&gt; {
    "changed": false,
    "msg": "Files are defined correctly"
}

TASK [file_deployment : Include tasks to deploy files] *******************************************************************************************************************************
included: /home/runner/.ansible/roles/file_deployment/tasks/file_deployment.yml for satellite.office.int.scheib.me

TASK [file_deployment : file_deployment | Deploy files] ******************************************************************************************************************************
ok: [satellite.office.int.scheib.me] =&gt; (item=/etc/motd)
ok: [satellite.office.int.scheib.me] =&gt; (item=/etc/issue.net)

TASK [redhat.rhel_system_roles.sshd : Invoke the role, if enabled] *******************************************************************************************************************
included: /usr/share/ansible/collections/ansible_collections/redhat/rhel_system_roles/roles/sshd/tasks/sshd.yml for satellite.office.int.scheib.me
[..]
</code></pre></div></div>

<p>Perfect! Right? :thinking:</p>

<p>Well, yes, but no :rofl:. Here is the thing: If you’d use a customized EE that contains itself also roles, the above <code class="language-plaintext highlighter-rouge">volume mount</code> would effectively overwrite the directory
in that sense, that the <code class="language-plaintext highlighter-rouge">volume mount</code> would overlay the existing roles.</p>

<p>To accommodate for that scenario we have two options:</p>

<ol>
  <li>
    <p>Specify a different roles directory using an Ansible configuration option:</p>

    <p><a href="https://docs.ansible.com/ansible/latest/reference_appendices/config.html#default-roles-path"><code class="language-plaintext highlighter-rouge">roles_path</code></a>. We could also specify it via the environment variable
 <code class="language-plaintext highlighter-rouge">ANSIBLE_ROLES_PATH</code></p>
  </li>
  <li>
    <p>Mount our local roles directory to a different directory that is checked by Ansible by default</p>

    <p>If we recall the error from above, where it couldn’t find the role, there was an important piece of information in the error message - the search paths for Ansible roles:</p>
  </li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ERROR! the role 'file_deployment' was not found in /home/steffen/sources/ansible-project-satellite/playbooks/roles:/home/runner/.ansible/roles:/usr/share/ansible/roles:/etc/ansible/roles:/home/steffen/sources/ansible-project-satellite/playbooks
</code></pre></div></div>

<p>So, Ansible will look at:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">/home/steffen/sources/ansible-project-satellite/playbooks/roles</code></li>
  <li><code class="language-plaintext highlighter-rouge">/home/runner/.ansible/roles</code></li>
  <li><code class="language-plaintext highlighter-rouge">/usr/share/ansible/roles:/etc/ansible/roles</code></li>
  <li><code class="language-plaintext highlighter-rouge">/home/steffen/sources/ansible-project-satellite/playbooks</code></li>
</ul>

<p>We could therefore modify the volume mount to use either <code class="language-plaintext highlighter-rouge">/home/runner/.ansible/roles</code> or <code class="language-plaintext highlighter-rouge">/usr/share/ansible/roles:/etc/ansible/roles</code>.</p>

<p>Let’s take the safer approach by adjusting the <code class="language-plaintext highlighter-rouge">roles_path</code>.</p>

<p>Do you recall that I specified the <code class="language-plaintext highlighter-rouge">ansible.cfg</code> in the <code class="language-plaintext highlighter-rouge">ansible-navigator.yml</code> file? We can take advantage of that!</p>

<p>We first adjust our <code class="language-plaintext highlighter-rouge">ansible-navigator.yml</code> to mount the roles somewhere else:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">ansible-navigator</span><span class="pi">:</span>
<span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
  <span class="na">execution-environment</span><span class="pi">:</span>
    <span class="na">container-engine</span><span class="pi">:</span> <span class="s1">'</span><span class="s">podman'</span>
    <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ee-supported-rhel8'</span>
    <span class="na">pull</span><span class="pi">:</span>
      <span class="na">policy</span><span class="pi">:</span> <span class="s1">'</span><span class="s">missing'</span>
    <span class="na">volume-mounts</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">~/.ansible/roles/'</span>
        <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/home/runner/custom_roles/'</span>
        <span class="na">options</span><span class="pi">:</span> <span class="s1">'</span><span class="s">z'</span>
<span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>Finally, we add the following to our <code class="language-plaintext highlighter-rouge">ansible.cfg</code>:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[defaults]</span>
<span class="py">roles_path</span>          <span class="p">=</span> <span class="s">$HOME/.ansible/roles:/usr/share/ansible/roles:/etc/ansible/roles:$HOME/custom_roles</span>
</code></pre></div></div>

<p>Let us check whether everything works as intended:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-navigator run -m stdout playbooks/01e_sshd.yml --limit satellite.office.int.scheib.me

PLAY [Configure SSHD] ****************************************************************************************************************************************************************

TASK [file_deployment : Include tasks to ensure all variables are defined properly] **************************************************************************************************
included: /home/runner/custom_roles/file_deployment/tasks/assert.yml for satellite.office.int.scheib.me

TASK [file_deployment : Ensure mandatory variables, as  well as variables, which have a default value, are set (boolean)] ************************************************************
ok: [satellite.office.int.scheib.me] =&gt; (item=variable: _fd_quiet_assert) =&gt; {
    "__t_var": "_fd_quiet_assert",
    "ansible_loop_var": "__t_var",
    "changed": false,
    "msg": "Variable '_fd_quiet_assert' defined properly - value: 'False'"
}

TASK [file_deployment : Ensure _fd_packages is defined properly] *********************************************************************************************************************
ok: [satellite.office.int.scheib.me] =&gt; {
    "changed": false,
    "msg": "Files are defined correctly"
}

TASK [file_deployment : Include tasks to deploy files] *******************************************************************************************************************************
included: /home/runner/custom_roles/file_deployment/tasks/file_deployment.yml for satellite.office.int.scheib.me

TASK [file_deployment : file_deployment | Deploy files] ******************************************************************************************************************************
ok: [satellite.office.int.scheib.me] =&gt; (item=/etc/motd)
[..]
</code></pre></div></div>

<p>Awesome :sunglasses:!</p>

<p>But wait a minute - why does it know about my files in <code class="language-plaintext highlighter-rouge">playbooks/files</code> and even about the <code class="language-plaintext highlighter-rouge">host_vars</code> and all that?</p>

<p><code class="language-plaintext highlighter-rouge">ansible-navigator</code> mounts the current directory (‘project directory’) automatically inside the EE. This is why everything is working
<a href="https://ansible.readthedocs.io/projects/navigator/faq/#where-should-the-ansiblecfg-file-go-when-using-an-execution-environment">auto-magically</a> :rocket:.</p>

<p>:warning: It is great to play around like that on your development machine, but this is not something that should be used in production. <strong>Instead building custom EEs is the
way to go</strong>. This ensures portability and eliminates the typical problems of “.. but it works on my machine!”. I just wanted to show case what’s possible with
<code class="language-plaintext highlighter-rouge">ansible-navigator</code> :sweat_smile:</p>

<h3 id="mounting-certificates-inside-the-ee-while-using-ansible-navigator">Mounting certificates inside the <code class="language-plaintext highlighter-rouge">EE</code> while using <code class="language-plaintext highlighter-rouge">ansible-navigator</code></h3>

<p>At times you might not want to build a new <code class="language-plaintext highlighter-rouge">EE</code> to provide an <code class="language-plaintext highlighter-rouge">EE</code> with your custom certificates. For this instance, you can utilize the
<a href="#running-playbooks-in-ansible-navigator">aforementioned</a> <a href="https://docs.podman.io/en/latest/markdown/podman-volume-mount.1.html"><code class="language-plaintext highlighter-rouge">volume mounts</code></a> with a special flag: <code class="language-plaintext highlighter-rouge">:O</code>.</p>

<p>The <a href="https://docs.podman.io/en/v4.9.0/markdown/podman-run.1.html#volume-v-source-volume-host-dir-container-dir-options">flag <code class="language-plaintext highlighter-rouge">:O</code></a> mounts the directory as
<a href="https://docs.kernel.org/filesystems/overlayfs.html"><code class="language-plaintext highlighter-rouge">Overlay filesystem</code></a>, which makes it ‘immutable’. Any changes to a mounted <code class="language-plaintext highlighter-rouge">Overlay filesystem</code> are temporary and will
only happen in the container’s context - not on the host the mount originated from.</p>

<p>Additionally, <code class="language-plaintext highlighter-rouge">podman</code> applies the <code class="language-plaintext highlighter-rouge">private</code> <code class="language-plaintext highlighter-rouge">SELinux label</code> to the mount, which is the same as when specifying <code class="language-plaintext highlighter-rouge">:z</code> (as we used <a href="#running-playbooks-in-ansible-navigator">above</a>).</p>

<p>This enables you to use it <a href="https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md"><code class="language-plaintext highlighter-rouge">rootless</code></a> in <code class="language-plaintext highlighter-rouge">podman</code>, without the need to relabel the
<code class="language-plaintext highlighter-rouge">SELinux</code> labels on your certificates.</p>

<p>To make use of this feature for your certificates, you’ll need to specify the following in your <code class="language-plaintext highlighter-rouge">ansible-navigator</code> configuration file:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">volume-mounts</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/etc/pki/ca-trust'</span>
    <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/etc/pki/ca-trust'</span>
    <span class="na">options</span><span class="pi">:</span> <span class="s1">'</span><span class="s">O'</span>
</code></pre></div></div>

<p>Of course, you can mount all sorts of host directories the same way - this is not specifically tied to certificates.</p>

<h2 id="building-custom-ees-with-ansible-builder">Building custom EEs with <code class="language-plaintext highlighter-rouge">ansible-builder</code></h2>

<p>Now that we learned a ton of stuff about <code class="language-plaintext highlighter-rouge">ansible-navigator</code> and its capabilities, let’s take a closer look at <code class="language-plaintext highlighter-rouge">ansible-builder</code>.</p>

<p><code class="language-plaintext highlighter-rouge">ansible-builder</code> is essentially a wrapper that calls <code class="language-plaintext highlighter-rouge">podman</code> to create container images for running Ansible content - the EEs, we talked about. While using existing EEs
gives you a quick start, there will be a point, where the existing EEs just don’t fit your needs (anymore). Here is where <code class="language-plaintext highlighter-rouge">ansible-builder</code> comes in.</p>

<h3 id="installing-ansible-builder">Installing <code class="language-plaintext highlighter-rouge">ansible-builder</code></h3>

<p>There are multiple ways you can install <code class="language-plaintext highlighter-rouge">ansible-builder</code>, which are detailed in the
<a href="https://ansible.readthedocs.io/projects/builder/en/latest/installation/">installation documentation</a>.</p>

<p>To install a stable version of <code class="language-plaintext highlighter-rouge">ansible-builder</code> on RHEL (I’ll refer to it as <em>downstream</em>), you need access to one of the Red Hat Ansible Automation Platform
repositories, for instance:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Red Hat Ansible Automation Platform 2.4 for RHEL 8 x86_64 (RPMs)</code>, repository ID: <code class="language-plaintext highlighter-rouge">ansible-automation-platform-2.4-for-rhel-8-x86_64-rpms</code></li>
  <li><code class="language-plaintext highlighter-rouge">Red Hat Ansible Automation Platform 2.4 for RHEL 9 x86_64 (RPMs)</code>, repository ID: <code class="language-plaintext highlighter-rouge">ansible-automation-platform-2.4-for-rhel-9-x86_64-rpms</code></li>
</ul>

<p>:information_source: Once again the hint that the above repositories require you to be a <a href="#existing-ees-an-overview">Red Hat subscriber</a>.</p>

<p>Simply enable the repository you’ve chosen using <code class="language-plaintext highlighter-rouge">subscription-manager</code>:</p>

<!-- markdownlint-disable MD014 -->
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>subscription-manager repos <span class="nt">--enable</span> ansible-automation-platform-2.4-for-rhel-8-x86_64-rpms
</code></pre></div></div>
<!-- markdownlint-enable MD014 -->

<p>Then install <code class="language-plaintext highlighter-rouge">ansible-navigator</code> using <code class="language-plaintext highlighter-rouge">dnf</code> or <code class="language-plaintext highlighter-rouge">yum</code>:</p>

<!-- markdownlint-disable MD014 -->
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>dnf <span class="nb">install </span>ansible-navigator
</code></pre></div></div>
<!-- markdownlint-enable MD014 -->

<p>If you’d rather like to use the latest available upstream version, you can do so with <a href="https://pypi.org/project/pip/"><code class="language-plaintext highlighter-rouge">pip</code></a>:</p>

<!-- markdownlint-disable MD014 -->
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>dnf <span class="nb">install </span>python3-pip
<span class="nv">$ </span>python3 <span class="nt">-m</span> pip <span class="nb">install </span>ansible-builder <span class="nt">--user</span>
</code></pre></div></div>
<!-- markdownlint-enable MD014 -->

<p>For <code class="language-plaintext highlighter-rouge">ansible-builder</code> to be able to build EEs, you either need <a href="https://podman.io/"><code class="language-plaintext highlighter-rouge">podman</code></a> or <a href="https://www.docker.com/"><code class="language-plaintext highlighter-rouge">docker</code></a> on your system, as we are going to
build containers and naturally need <em>something</em> to handle them :slightly_smiling_face:. I’ll use <code class="language-plaintext highlighter-rouge">podman</code> for the remainder of this post, but all commands I am going to use
with <code class="language-plaintext highlighter-rouge">podman</code> are working exactly the same when replacing <code class="language-plaintext highlighter-rouge">podman</code> with <code class="language-plaintext highlighter-rouge">docker</code>.</p>

<p>After all, we really only run <strong>one</strong> command with <code class="language-plaintext highlighter-rouge">podman</code>. The remainder will be handled by <code class="language-plaintext highlighter-rouge">ansible-builder</code> :sunglasses:.</p>

<p>:information_source: The upstream variant of <code class="language-plaintext highlighter-rouge">ansible-builder</code> is not exclusively available on RHEL; You can install it on a few more operating systems. Please refer to the
<a href="https://ansible.readthedocs.io/projects/builder/en/latest/installation/">installation documentation</a> to get an overview of all supported operating systems.</p>

<h3 id="getting-started-with-ansible-builder">Getting started with <code class="language-plaintext highlighter-rouge">ansible-builder</code></h3>

<p>First off: I am going to talk about <code class="language-plaintext highlighter-rouge">ansible-builder</code> v3 which was released by
Red Hat with the <a href="https://access.redhat.com/support/policy/updates/ansible-automation-platform">Ansible Automation Platform 2.4</a>. With v3 of <code class="language-plaintext highlighter-rouge">ansible-builder</code> a new, <em>way</em> more
flexible format of writing EE definitions has been introduced. Please upgrade to <code class="language-plaintext highlighter-rouge">ansible-builder</code> v3+ if you haven’t yet. It makes a <strong>huge</strong> difference.</p>

<p>Having said that, let’s first look at the help output of <code class="language-plaintext highlighter-rouge">ansible-builder</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-builder <span class="nt">--help</span>
usage: ansible-builder <span class="o">[</span><span class="nt">-h</span><span class="o">]</span> <span class="o">[</span><span class="nt">--version</span><span class="o">]</span> <span class="o">{</span>create,build,introspect<span class="o">}</span> ...

Tooling to <span class="nb">help </span>build container images <span class="k">for </span>running Ansible content. Get started by looking at the <span class="nb">help </span>text <span class="k">for </span>one of the subcommands.

positional arguments:
  <span class="o">{</span>create,build,introspect<span class="o">}</span>
                        The <span class="nb">command </span>to invoke.
    create              Creates a build context, which can be used by podman to build an image.
    build               Builds a container image.
    introspect          Introspects collections <span class="k">in </span>folder.

optional arguments:
  <span class="nt">-h</span>, <span class="nt">--help</span>            show this <span class="nb">help </span>message and <span class="nb">exit</span>
  <span class="nt">--version</span>             Print ansible-builder version and exit.
</code></pre></div></div>

<p>Okay, that’s a <em>lot less</em> possibilities than with <code class="language-plaintext highlighter-rouge">ansible-navigator</code>. Don’t let yourself fool. This is all you <strong>need</strong>.</p>

<p>Actually, we really only need <code class="language-plaintext highlighter-rouge">create</code> and <code class="language-plaintext highlighter-rouge">build</code> as commands.</p>

<p><code class="language-plaintext highlighter-rouge">introspect</code> is used by <code class="language-plaintext highlighter-rouge">ansible-builder</code> itself to figure out dependencies of collections. That is something
we do not need at the moment, but surely is helpful if you are interested in finding out why a specific system or Python package has been installed.</p>

<p>Let me quickly show you what it looks like when I let <code class="language-plaintext highlighter-rouge">ansible-builder introspect</code> check my installed collections:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-builder introspect ~/.ansible/collections/
<span class="c"># Dependency data for /home/steffen/.ansible/collections/</span>
<span class="nt">---</span>
python:
  ansible.controller:
  - <span class="s1">'pytz  # for schedule_rrule lookup plugin'</span>
  - <span class="s1">'python-dateutil&gt;=2.7.0  # schedule_rrule'</span>
  - <span class="s1">'awxkit  # For import and export modules'</span>
  ansible.netcommon:
  - ansible-pylibssh <span class="o">&gt;=</span> 0.2.0
  - jxmlease
  - ncclient
  - netaddr
  - paramiko
  - xmltodict
  - grpcio
  - protobuf
  ansible.tower:
  - <span class="s1">'pytz  # for tower_schedule_rrule lookup plugin'</span>
  - <span class="s1">'python-dateutil&gt;=2.7.0  # tower_schedule_rrule'</span>
  - <span class="s1">'awxkit  # For import and export modules'</span>
  ansible.utils:
  - jsonschema
  - textfsm
  - ttp
  - xmltodict
  - netaddr
  community.crypto:
  - PyYAML
  community.docker:
  - docker
  - requests
  - paramiko
  community.routeros:
  - librouteros
  kubernetes.core:
  - kubernetes&gt;<span class="o">=</span>12.0.0
  - requests-oauthlib
  - jsonpatch
  openstack.cloud:
  - openstacksdk&gt;<span class="o">=</span>1.0.0
  redhat.openshift:
  - kubernetes&gt;<span class="o">=</span>12.0.0
  - requests-oauthlib
  redhat.satellite:
  - requests&gt;<span class="o">=</span>2.4.2
  - ipaddress<span class="p">;</span> python_version &lt; <span class="s1">'3.3'</span>
  - PyYAML
  sscheib.insights:
  - requests
  theforeman.foreman:
  - requests&gt;<span class="o">=</span>2.4.2
  - ipaddress<span class="p">;</span> python_version &lt; <span class="s1">'3.3'</span>
  - PyYAML
  zabbix.zabbix:
  - netaddr&gt;<span class="o">=</span>0.8
  - Jinja2&gt;<span class="o">=</span>3.1.2

system:
  ansible.controller:
  - python38-pytz <span class="o">[</span>platform:centos-8 platform:rhel-8]
  - python38-requests <span class="o">[</span>platform:centos-8 platform:rhel-8]
  - python38-pyyaml <span class="o">[</span>platform:centos-8 platform:rhel-8]
  ansible.netcommon:
  - gcc-c++ <span class="o">[</span>doc <span class="nb">test </span>platform:rpm]
  - libyaml-devel <span class="o">[</span><span class="nb">test </span>platform:rpm]
  - libyaml-dev <span class="o">[</span><span class="nb">test </span>platform:dpkg]
  - python3-devel <span class="o">[</span><span class="nb">test </span>platform:rpm]
  - python3 <span class="o">[</span><span class="nb">test </span>platform:rpm]
  - gcc <span class="o">[</span>compile platform:rpm]
  - libssh-dev <span class="o">[</span>compile platform:dpkg]
  - libssh-devel <span class="o">[</span>compile platform:rpm]
  - python3-Cython <span class="o">[</span>compile platform:fedora-35 platform:rhel-9]
  - python3-six <span class="o">[</span>platform:centos-9 platform:rhel-9]
  - python39-six <span class="o">[</span>platform:centos-8 platform:rhel-8]
  - python3-lxml <span class="o">[</span>platform:centos-9 platform:rhel-9]
  - python39-lxml <span class="o">[</span>platform:centos-8 platform:rhel-8]
  - findutils <span class="o">[</span>compile platform:centos-8 platform:rhel-8]
  - gcc <span class="o">[</span>compile platform:centos-8 platform:rhel-8]
  - make <span class="o">[</span>compile platform:centos-8 platform:rhel-8]
  - python3-devel <span class="o">[</span>compile platform:centos-9 platform:rhel-9]
  - python39-devel <span class="o">[</span>compile platform:centos-8 platform:rhel-8]
  - python3-cffi <span class="o">[</span>platform:centos-9 platform:rhel-9]
  - python39-cffi <span class="o">[</span>platform:centos-8 platform:rhel-8]
  - python3-cryptography <span class="o">[</span>platform:centos-9 platform:rhel-9]
  - python39-cryptography <span class="o">[</span>platform:centos-8 platform:rhel-8]
  - python3-pycparser <span class="o">[</span>platform:centos-9 platform:rhel-9]
  - python39-pycparser <span class="o">[</span>platform:centos-8 platform:rhel-8]
  ansible.posix:
  - rsync <span class="o">[</span>platform:redhat]
  ansible.utils:
  - gcc-c++ <span class="o">[</span>doc <span class="nb">test </span>platform:rpm]
  - python3-devel <span class="o">[</span><span class="nb">test </span>platform:rpm]
  - python3 <span class="o">[</span><span class="nb">test </span>platform:rpm]
  community.crypto:
  - cryptsetup <span class="o">[</span>platform:dpkg]
  - cryptsetup <span class="o">[</span>platform:rpm]
  - openssh-client <span class="o">[</span>platform:dpkg]
  - openssh-clients <span class="o">[</span>platform:rpm]
  - openssl <span class="o">[</span>platform:dpkg]
  - openssl <span class="o">[</span>platform:rpm]
  - python3-cryptography <span class="o">[</span>platform:dpkg]
  - python3-cryptography <span class="o">[</span>platform:rpm]
  - python3-openssl <span class="o">[</span>platform:dpkg]
  - python3-pyOpenSSL <span class="o">[</span>platform:rpm <span class="o">!</span>platform:rhel <span class="o">!</span>platform:centos <span class="o">!</span>platform:rocky]
  - python3-pyOpenSSL <span class="o">[</span>platform:rhel-8]
  - python3-pyOpenSSL <span class="o">[</span>platform:rhel <span class="o">!</span>platform:rhel-6 <span class="o">!</span>platform:rhel-7 <span class="o">!</span>platform:rhel-8
    epel]
  - python3-pyOpenSSL <span class="o">[</span>platform:centos-8]
  - python3-pyOpenSSL <span class="o">[</span>platform:centos <span class="o">!</span>platform:centos-6 <span class="o">!</span>platform:centos-7 <span class="o">!</span>platform:centos-8
    epel]
  - python3-pyOpenSSL <span class="o">[</span>platform:rocky-8]
  - python3-pyOpenSSL <span class="o">[</span>platform:rocky <span class="o">!</span>platform:rocky-8 epel]
  infra.ah_configuration:
  - python <span class="o">&gt;=</span>3.5
  kubernetes.core:
  - kubernetes-client <span class="o">[</span>platform:fedora]
  - openshift-clients <span class="o">[</span>platform:rhel-8]
  openstack.cloud:
  - gcc <span class="o">[</span>compile platform:centos-8 platform:rhel-8]
  - python38-cryptography <span class="o">[</span>platform:centos-8 platform:rhel-8]
  - python38-devel <span class="o">[</span>compile platform:centos-8 platform:rhel-8]
  - python38-requests <span class="o">[</span>platform:centos-8 platform:rhel-8]
  redhat.rhel_system_roles:
  - openssl
  - dnf
  redhat.satellite:
  - python3-rpm <span class="o">[(</span>platform:redhat platform:base-py3<span class="o">)]</span>
  - rpm-python <span class="o">[(</span>platform:redhat platform:base-py2<span class="o">)]</span>
  - python38-requests <span class="o">[</span>platform:centos-8 platform:rhel-8]
  sscheib.insights:
  - python38-requests <span class="o">[</span>platform:centos-8 platform:rhel-8]
  theforeman.foreman:
  - python3-rpm <span class="o">[(</span>platform:redhat platform:base-py3<span class="o">)]</span>
  - rpm-python <span class="o">[(</span>platform:redhat platform:base-py2<span class="o">)]</span>
  - python38-requests <span class="o">[</span>platform:centos-8 platform:rhel-8]
</code></pre></div></div>

<p>That’s quite a bunch of system and Python packages :slightly_smiling_face:.</p>

<p>Again, <code class="language-plaintext highlighter-rouge">ansible-builder introspect</code> is not particularly useful, unless you debug an issue with dependencies. I just wanted you to know, that <em>if</em> there is an issue with
dependencies while building EEs, this command can be pretty handy.</p>

<p>Now that we have the the <code class="language-plaintext highlighter-rouge">introspect</code> out of the way, let’s look at the two remaining sub-commands:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">create</code></li>
  <li><code class="language-plaintext highlighter-rouge">build</code></li>
</ul>

<p>In a nutshell, <code class="language-plaintext highlighter-rouge">ansible-builder create</code> creates a so-called <em>build context</em> for you - remember, we want to build containers. Building containers is done via a
<a href="https://www.mankier.com/5/Containerfile"><code class="language-plaintext highlighter-rouge">Containerfile</code></a> (for <code class="language-plaintext highlighter-rouge">podman</code>) or a <a href="https://docs.docker.com/reference/dockerfile/"><code class="language-plaintext highlighter-rouge">Dockerfile</code></a> (for <code class="language-plaintext highlighter-rouge">docker</code>) which comes in a
specific format. <code class="language-plaintext highlighter-rouge">Containerfile</code> and <code class="language-plaintext highlighter-rouge">Dockerfile</code> definitions are <em>largely</em> interchangeable (there <em>were</em> differences in the past, but I don’t know if it is the same today).</p>

<p>:information_source: Further in this post I’ll use <code class="language-plaintext highlighter-rouge">Containerfile</code> as reference to make things easier. Just know that <em>usually</em> <code class="language-plaintext highlighter-rouge">Containerfile</code> and <code class="language-plaintext highlighter-rouge">Dockerfile</code> are
interchangeable.</p>

<p><code class="language-plaintext highlighter-rouge">ansible-builder create</code> essentially translate an <a href="https://ansible.readthedocs.io/projects/builder/en/stable/definition/">EE definition</a> into container build steps. That is
useful if you ever need to modify the <code class="language-plaintext highlighter-rouge">Containerfile</code> to your <em>very</em>, <em>very</em> specific needs before building the container image. <em>Usually</em>, <code class="language-plaintext highlighter-rouge">ansible-builder</code> with the new
Version 3 of the EE definition is enough for the majority of use cases.</p>

<p>Please bear with me a minute, I’ll explain shortly what an EE definition looks like.</p>

<p><code class="language-plaintext highlighter-rouge">ansible-builder build</code> on the other hand, goes one step further than <code class="language-plaintext highlighter-rouge">ansible-builder create</code>. Once the build context has been created, it will also run <code class="language-plaintext highlighter-rouge">podman</code> under the
hood to actually create and tag your image.</p>

<p>Again, the above explanation is very high level, but we’ll go into the details later on.</p>

<h3 id="execution-environment-definition">Execution Environment definition</h3>

<p>Before we dive into it: Just a reminder, I’ll be talking about <em>Version 3</em> (<code class="language-plaintext highlighter-rouge">ansible-builder</code> version &gt; 3 is required) of the EE definition. Version 1 has limitations that have
largely been resolved by Version 3. If you have been building Version 1 EEs previously, please consider migrating to Version 3, as it eases the process a lot - especially for
complex EEs.</p>

<p>Let’s dive into it - finally we get to define something :sunglasses:.</p>

<p>Execution Environment definitions essentially describe <em>what</em> you’d like to have within your EE. Typically, the <em>what</em> is a combination of these:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">ansible-core</code> and which version of it</li>
  <li><code class="language-plaintext highlighter-rouge">ansible-runner</code> and which version of it</li>
  <li>Ansible collections</li>
  <li>Ansible roles</li>
  <li>Python packages, both as dependencies of an Ansible collection and as a “user-supplied” package</li>
  <li>System packages, both as dependencies of an Ansible collection and as a “user-supplied” package</li>
  <li>Additional system configurations, modifications and files, such as certificate authorities of your company or specific proxy settings</li>
</ol>

<p>:information_source: What I mean by a “user-supplied” package (for both system packages and Python packages) is that you specifically instructed <code class="language-plaintext highlighter-rouge">ansible-builder</code> to install
these packages during the EE build.</p>

<p>EE definitions are written entirely in <a href="https://yaml.org/"><code class="language-plaintext highlighter-rouge">YAML</code></a> and should therefore be no trouble writing for anyone who as previously worked with <code class="language-plaintext highlighter-rouge">YAML</code> - such as
Ansible users :smile:.</p>

<p>Let’s imagine a scenario:</p>

<p>Your Satellite team approached you, that they’d like to automate Red Hat Satellite and therefore need the latest versions of the collections
<a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite/"><code class="language-plaintext highlighter-rouge">redhat.satellite</code></a> and
<a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite_operations/"><code class="language-plaintext highlighter-rouge">redhat.satellite_operations</code></a> inside the EE.
They also want to make use of the latest available <code class="language-plaintext highlighter-rouge">ansible-core</code> version, which is at the time of this writing 2.16.</p>

<p>That’s pretty straight-forward. We have the choice to either use <code class="language-plaintext highlighter-rouge">UBI</code> 8 or <code class="language-plaintext highlighter-rouge">UBI</code> 9, and we decide to go with <code class="language-plaintext highlighter-rouge">UBI</code> 8.</p>

<p>So what we need inside the EE:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">ansible-core</code> in version 2.16</li>
  <li><code class="language-plaintext highlighter-rouge">ansible-runner</code> in version 2.16</li>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite/"><code class="language-plaintext highlighter-rouge">redhat.satellite</code></a> in the latest version</li>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite_operations/"><code class="language-plaintext highlighter-rouge">redhat.satellite_operations</code></a> in the latest version</li>
  <li>The EE should be based on <code class="language-plaintext highlighter-rouge">UBI</code> 8</li>
</ol>

<p>I know, you have waited for a complex EE definition, but you’ll be shocked how easy it is to define the above requirements as EE. Have a look at the EE definition
below:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">version</span><span class="pi">:</span> <span class="m">3</span>

<span class="na">images</span><span class="pi">:</span>
  <span class="na">base_image</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.16'</span>

<span class="na">dependencies</span><span class="pi">:</span>
  <span class="na">galaxy</span><span class="pi">:</span>
    <span class="na">collections</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">redhat.satellite'</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">redhat.satellite_operations'</span>

<span class="na">options</span><span class="pi">:</span>
  <span class="na">package_manager_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/usr/bin/microdnf'</span>

<span class="na">additional_build_files</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ansible.cfg'</span>
      <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">configs/'</span>

<span class="na">additional_build_steps</span><span class="pi">:</span>
  <span class="na">prepend_galaxy</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">COPY</span><span class="nv"> </span><span class="s">_build/configs/ansible.cfg</span><span class="nv"> </span><span class="s">/home/runner/.ansible.cfg'</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>That’s it. Really. Before we dive into what all the options do, let me first explain what <code class="language-plaintext highlighter-rouge">ansible-builder</code> command to run and check whether all our requirements are met.</p>

<p>I put the above definition in a file called <code class="language-plaintext highlighter-rouge">execution-environment.yml</code>: That is the default file <code class="language-plaintext highlighter-rouge">ansible-builder</code> will try to open if you don’t pass a specific EE definitions
file using the <code class="language-plaintext highlighter-rouge">--file</code> or <code class="language-plaintext highlighter-rouge">-f</code> switches.</p>

<p>Further, I increased the verbosity (<code class="language-plaintext highlighter-rouge">--verbosity</code> or <code class="language-plaintext highlighter-rouge">-v</code> with either 0, 1, 2 or 3 as value) to actually see what’s happening during the build and lastly, I
<a href="https://docs.podman.io/en/latest/markdown/podman-tag.1.html">tagged</a> (essentially assigned a name and a version to my image) my image as <code class="language-plaintext highlighter-rouge">ee-satellite-rhel-8:latest</code> using the
<code class="language-plaintext highlighter-rouge">--tag</code> or <code class="language-plaintext highlighter-rouge">-t</code> switches.</p>

<p>The corresponding <code class="language-plaintext highlighter-rouge">ansible-builder build</code> command is the following:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-builder build <span class="nt">--tag</span> ee-satellite-rhel-8 <span class="nt">--verbosity</span> 3
</code></pre></div></div>

<p>Pretty easy, right? Once you run that command you’ll see something like this as the last messages of the <code class="language-plaintext highlighter-rouge">ansible-builder build</code> command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[4/4] COMMIT ee-satellite-rhel-8
--&gt; 0ac2e9ef7216
Successfully tagged localhost/ee-satellite-rhel-8:latest
0ac2e9ef72169c7104b40e04bde34480b107b46efb5469bbb36ee883fe232e1e
</code></pre></div></div>

<p>:information_source: Please note, the above checksum you see, is the checksum of the container image and yours definitively <em>differs</em>.</p>

<p>You can check all your locally existing container images with <code class="language-plaintext highlighter-rouge">ansible-navigator images</code> using the <code class="language-plaintext highlighter-rouge">TUI</code> interface:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Image                                                                                Tag          Execution environment                  Created                    Size
 0│ee-minimal-rhel8                                                                     2.16         True                                   3 weeks ago                345 MB
 1│ee-satellite-rhel-8                                                                  latest       True                                   17 minutes ago             445 MB
</code></pre></div></div>

<p>Or if you prefer, using <code class="language-plaintext highlighter-rouge">podman image list</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>podman images
REPOSITORY                                                            TAG         IMAGE ID      CREATED         SIZE
localhost/ee-satellite-rhel-8                                         latest      d9b8762094e4  15 minutes ago  445 MB
registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8       2.16        74f040829a5c  3 weeks ago     345 MB
</code></pre></div></div>

<p>Now, let’s check if our EE <code class="language-plaintext highlighter-rouge">localhost/ee-satellite-rhel-8</code> contains <code class="language-plaintext highlighter-rouge">ansible-core 2.16</code> and the collections <code class="language-plaintext highlighter-rouge">redhat.satellite</code> and <code class="language-plaintext highlighter-rouge">redhat.satellite_operations</code>. We are going
to use <code class="language-plaintext highlighter-rouge">ansible-navigator collections --execution-environment-image localhost/ee-satellite-rhel-8:latest --pull-policy never</code> for that:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Name                                 Version    Shadowed    Type         Path
0│ansible.builtin                      2.16.3     False       contained    /usr/local/lib/python3.11/site-packages/ansible
1│redhat.satellite                     4.0.0      False       contained    /usr/share/ansible/collections/ansible_collections/redhat/satellite
2│redhat.satellite_operations          2.1.0      False       contained    /usr/share/ansible/collections/ansible_collections/redhat/satellite_operations
</code></pre></div></div>

<p>:information_source: Since we don’t have a container registry on our host (which is perfectly normal!) we need to use <code class="language-plaintext highlighter-rouge">--pull-policy</code> or <code class="language-plaintext highlighter-rouge">--pp</code> with the value <code class="language-plaintext highlighter-rouge">never</code>, which
instructs <code class="language-plaintext highlighter-rouge">ansible-navigator</code> to not <em>pull</em> the EE, which would otherwise fail. This is <em>only</em> for EEs that you’ve built locally or pulled already from a container registry
and don’t want to update it every time you run <code class="language-plaintext highlighter-rouge">ansible-navigator</code>. This helps also speed up the ramp-up time of <code class="language-plaintext highlighter-rouge">ansible-navigator</code> :sunglasses:.</p>

<p>:information_source: <code class="language-plaintext highlighter-rouge">--execution-environment-image</code> can be shortened with <code class="language-plaintext highlighter-rouge">--eei</code>. This will give you back plenty of time if you are such a bad typist as I am and type
<code class="language-plaintext highlighter-rouge">--execution-environment-image</code> wrong at least twice every time I try to use it:rofl:.</p>

<p>Okay great, we have the <code class="language-plaintext highlighter-rouge">ansible-core</code> version as well as the Ansible collections <code class="language-plaintext highlighter-rouge">redhat.satellite</code> and <code class="language-plaintext highlighter-rouge">redhat.satellite_operations</code>.</p>

<p>Easy, wasn’t it? :slightly_smiling_face:</p>

<p>Let’s break down this easy EE definition:</p>

<ol>
  <li>
    <p><a href="https://ansible.readthedocs.io/projects/builder/en/stable/definition/#version"><code class="language-plaintext highlighter-rouge">version</code> option</a></p>

    <p>With <code class="language-plaintext highlighter-rouge">version</code> we specify the EE definition version to use. We want this to be <code class="language-plaintext highlighter-rouge">3</code>. Version <code class="language-plaintext highlighter-rouge">1</code> looks a little different and - as said - has quite some limitations.
Additionally version 3 is <strong>required</strong> when using <code class="language-plaintext highlighter-rouge">ansible-builder</code> 3.x (which we do).</p>
  </li>
  <li>
    <p><a href="https://ansible.readthedocs.io/projects/builder/en/stable/definition/#images"><code class="language-plaintext highlighter-rouge">images</code> option</a></p>

    <p><code class="language-plaintext highlighter-rouge">images</code> is a dictionary, and the only supported attribute within <code class="language-plaintext highlighter-rouge">images</code> is <code class="language-plaintext highlighter-rouge">base_image</code>, which itself <em>must</em> have a <code class="language-plaintext highlighter-rouge">name</code> attribute which specifies the base image to use.</p>

    <p>Remember we talked about using existing EEs? We use these existing EEs now to add “on top” of the existing EEs our own content.</p>
  </li>
  <li>
    <p><a href="https://ansible.readthedocs.io/projects/builder/en/stable/definition/#dependencies"><code class="language-plaintext highlighter-rouge">dependencies</code> option</a></p>

    <p>I only <em>briefly</em> explain these so-called “in-line dependencies”. We’ll later use separate files for each of the requirement types - you understand why later on.</p>

    <p>Alright, so <code class="language-plaintext highlighter-rouge">dependencies</code> can have multiple attributes, but we <em>only</em> specified the <code class="language-plaintext highlighter-rouge">galaxy</code> attribute, which itself can either have a <code class="language-plaintext highlighter-rouge">roles</code> attribute or a <code class="language-plaintext highlighter-rouge">collections</code>
 attribute. The latter of which we used. In there we specify the roles and collections we want to be included in the EE.</p>

    <p>Again, I leave the Python package and system package dependencies out, as well as more complex definitions of collections and roles (with version and source) as we’ll later
 have it in separate files.</p>
  </li>
  <li>
    <p><a href="https://ansible.readthedocs.io/projects/builder/en/stable/definition/#options"><code class="language-plaintext highlighter-rouge">options</code> option</a></p>

    <p>The <code class="language-plaintext highlighter-rouge">options</code> option can have a <em>bunch</em> of attributes, but in the context of this minimal EE definition, we simply need to set the <code class="language-plaintext highlighter-rouge">package_manager_path</code>, which defaults to
 <code class="language-plaintext highlighter-rouge">/usr/bin/dnf</code>, which is not present. Instead EEs make use of <code class="language-plaintext highlighter-rouge">/usr/bin/microdnf</code> a slimmed down version of <code class="language-plaintext highlighter-rouge">dnf</code>.</p>
  </li>
  <li>
    <p><a href="https://ansible.readthedocs.io/projects/builder/en/stable/definition/#additional-build-steps"><code class="language-plaintext highlighter-rouge">additional_build_steps</code> option</a></p>

    <p>The <code class="language-plaintext highlighter-rouge">additional_build_steps</code> option is probably <strong>the most important</strong> option when it comes to building complex EEs. In our example we copied the <code class="language-plaintext highlighter-rouge">ansible.cfg</code> to the
 <code class="language-plaintext highlighter-rouge">/home/runner</code> directory (which is home directory of the <code class="language-plaintext highlighter-rouge">ansible-runner</code> user) so that this user is able to reach for instance
 <a href="https://console.redhat.com">Red Hat’s Automation Hub</a> or your Private Automation Hub.</p>

    <p>We also specified a specific attribute: <code class="language-plaintext highlighter-rouge">prepend_galaxy</code>, this essentially tells <code class="language-plaintext highlighter-rouge">ansible-builder</code> to put the build steps in this section <strong>before</strong> the installation
 of Ansible content.</p>

    <p>:information_source: We’ll go into much more details later on this topic.</p>
  </li>
  <li>
    <p><a href="https://ansible.readthedocs.io/projects/builder/en/stable/definition/#additional-build-files"><code class="language-plaintext highlighter-rouge">additional_build_files</code> option</a></p>

    <p>With <code class="language-plaintext highlighter-rouge">additional_build_files</code> we can copy files we have next to our <code class="language-plaintext highlighter-rouge">execution-environment.yml</code> into the build context directory. From there we can add it to the EE.
 This is useful for providing the <code class="language-plaintext highlighter-rouge">ansible.cfg</code> to the EE, but will also come in handy if we need to add other files - such as certificate authority certificates - to
 the EE.</p>
  </li>
</ol>

<p>Before we move on, let’s look at what is in the <code class="language-plaintext highlighter-rouge">context</code> directory next to your <code class="language-plaintext highlighter-rouge">execution-environment.yml</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tree context/
context/
├── _build
│   ├── configs
│   │   └── ansible.cfg
│   ├── requirements.yml
│   └── scripts
│       ├── assemble
│       ├── check_ansible
│       ├── check_galaxy
│       ├── entrypoint
│       ├── install-from-bindep
│       └── introspect.py
└── Containerfile
</code></pre></div></div>

<p>So, the <code class="language-plaintext highlighter-rouge">context</code> directory contains the <code class="language-plaintext highlighter-rouge">_build</code> directory and a <code class="language-plaintext highlighter-rouge">Containerfile</code>. Let’s have a glimpse at them :sunglasses::</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">configs</code></p>

    <p>We introduced this directory ourselves, as we specified to copy our <code class="language-plaintext highlighter-rouge">ansible.cfg</code> to <code class="language-plaintext highlighter-rouge">_build/configs</code>. This is our <code class="language-plaintext highlighter-rouge">ansible.cfg</code> we specified to copy in the EE definition.
 If you check the content of your <code class="language-plaintext highlighter-rouge">ansible.cfg</code> and the one that ended up in the EE, you’ll find that they are the same.</p>

    <p>You don’t have to specify that config sub-directory, <code class="language-plaintext highlighter-rouge">_build</code> is enough. I personally just find it cleaner that way, so I know what comes from me in terms of additional files.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">requirements.yml</code></p>

    <p>Let’s quickly look what’s in the <code class="language-plaintext highlighter-rouge">requirements.yml</code>:</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span><span class="nb">cat </span>context/_build/requirements.yml
 collections:
 - name: redhat.satellite
 - name: redhat.satellite_operations
</code></pre></div>    </div>

    <p>Does that look familiar to you? :slightly_smiling_face:</p>

    <p>These are the collection we specified in our EE definition. They are simply added to a <code class="language-plaintext highlighter-rouge">requirements.yml</code> by <code class="language-plaintext highlighter-rouge">ansible-builder</code> when they are specified in-line, as we did.
 <a href="https://docs.ansible.com/ansible/latest/galaxy/user_guide.html#installing-roles-and-collections-from-the-same-requirements-yml-file"><code class="language-plaintext highlighter-rouge">requirements.yml</code></a> should be known to
 most Ansible users already: This is the standard format of providing depending collections and roles and can be read by <code class="language-plaintext highlighter-rouge">ansible-galaxy collection install</code> or
 <code class="language-plaintext highlighter-rouge">ansible-galaxy role install</code> when you pass the <code class="language-plaintext highlighter-rouge">--requirements-file</code> or, more commonly, the <code class="language-plaintext highlighter-rouge">-r</code> switch to the <code class="language-plaintext highlighter-rouge">ansible-galaxy command</code> and point it to the
 file, e.g.: <code class="language-plaintext highlighter-rouge">ansible-galaxy collection install -r requirements.yml</code>.
 This is exactly what <code class="language-plaintext highlighter-rouge">ansible-builder</code> does during the <code class="language-plaintext highlighter-rouge">galaxy stage</code> (where roles and collections are installed)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Containerfile</code></p>

    <p>This file is essentially the “translation” of the EE definition to “container build language”. Of course, certain things are predefined, but you’ll find it contains the
 options we specified.</p>

    <p>Let’s have a look:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ARG EE_BASE_IMAGE="registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.16"
 ARG PYCMD="/usr/bin/python3"
 ARG PKGMGR_PRESERVE_CACHE=""
 ARG ANSIBLE_GALAXY_CLI_COLLECTION_OPTS=""
 ARG ANSIBLE_GALAXY_CLI_ROLE_OPTS=""
 ARG PKGMGR="/usr/bin/microdnf"

 # Base build stage
 FROM $EE_BASE_IMAGE as base
 USER root
 ARG EE_BASE_IMAGE
 ARG PYCMD
 ARG PKGMGR_PRESERVE_CACHE
 ARG ANSIBLE_GALAXY_CLI_COLLECTION_OPTS
 ARG ANSIBLE_GALAXY_CLI_ROLE_OPTS
 ARG PKGMGR

 RUN $PYCMD -m ensurepip
 COPY _build/scripts/ /output/scripts/
 COPY _build/scripts/entrypoint /opt/builder/bin/entrypoint

 # Galaxy build stage
 FROM base as galaxy
 ARG EE_BASE_IMAGE
 ARG PYCMD
 ARG PKGMGR_PRESERVE_CACHE
 ARG ANSIBLE_GALAXY_CLI_COLLECTION_OPTS
 ARG ANSIBLE_GALAXY_CLI_ROLE_OPTS
 ARG PKGMGR

 COPY _build/configs/ansible.cfg /home/runner/.ansible.cfg
 RUN /output/scripts/check_galaxy
 COPY _build /build
 WORKDIR /build

 RUN ansible-galaxy role install $ANSIBLE_GALAXY_CLI_ROLE_OPTS -r requirements.yml --roles-path "/usr/share/ansible/roles"
 RUN ANSIBLE_GALAXY_DISABLE_GPG_VERIFY=1 ansible-galaxy collection install $ANSIBLE_GALAXY_CLI_COLLECTION_OPTS -r requirements.yml --collections-path "/usr/share/ansible/collections"

 # Builder build stage
 FROM base as builder
 WORKDIR /build
 ARG EE_BASE_IMAGE
 ARG PYCMD
 ARG PKGMGR_PRESERVE_CACHE
 ARG ANSIBLE_GALAXY_CLI_COLLECTION_OPTS
 ARG ANSIBLE_GALAXY_CLI_ROLE_OPTS
 ARG PKGMGR

 RUN $PYCMD -m pip install --no-cache-dir bindep pyyaml requirements-parser

 COPY --from=galaxy /usr/share/ansible /usr/share/ansible

 RUN $PYCMD /output/scripts/introspect.py introspect --sanitize --write-bindep=/tmp/src/bindep.txt --write-pip=/tmp/src/requirements.txt
 RUN /output/scripts/assemble

 # Final build stage
 FROM base as final
 ARG EE_BASE_IMAGE
 ARG PYCMD
 ARG PKGMGR_PRESERVE_CACHE
 ARG ANSIBLE_GALAXY_CLI_COLLECTION_OPTS
 ARG ANSIBLE_GALAXY_CLI_ROLE_OPTS
 ARG PKGMGR

 RUN /output/scripts/check_ansible $PYCMD

 COPY --from=galaxy /usr/share/ansible /usr/share/ansible

 COPY --from=builder /output/ /output/
 RUN /output/scripts/install-from-bindep &amp;&amp; rm -rf /output/wheels
 RUN chmod ug+rw /etc/passwd
 RUN mkdir -p /runner &amp;&amp; chgrp 0 /runner &amp;&amp; chmod -R ug+rwx /runner
 WORKDIR /runner
 RUN $PYCMD -m pip install --no-cache-dir 'dumb-init==1.2.5'
 RUN rm -rf /output
 LABEL ansible-execution-environment=true
 USER 1000
 ENTRYPOINT ["/opt/builder/bin/entrypoint", "dumb-init"]
 CMD ["bash"]
</code></pre></div>    </div>

    <p>I know, if you are not familiar with building containers, most of the file looks like gibberish to you. Don’t worry, with Version 3 of the EE definition, you don’t need to
 touch the <code class="language-plaintext highlighter-rouge">Containerfile</code> itself - <em>usually</em>.
 There might be <em>very, very</em> specific use-case where <code class="language-plaintext highlighter-rouge">ansible-builder</code> cannot fulfill your needs, but I personally haven’t encountered it (yet).</p>

    <p>Nevertheless, what you <strong>need</strong> to understand are the various stages the build passes through. This is because you can inject commands to each of those stages
 (at the very beginning and the very end of each section, essentially), and this is <em>exactly</em> what you need to realize complex EEs with proxies, certificates and so on.
 We’ll cover these build stages in the next section.</p>
  </li>
</ol>

<h3 id="execution-environment-stages">Execution Environment stages</h3>

<p>During an EE build, we actually build <em>multiple</em> intermediate images. We call these intermediate images <strong>stages</strong>.</p>

<p>If we take the <code class="language-plaintext highlighter-rouge">Containerfile</code> from the previous section, we can see the following statements in it:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[..]
FROM $EE_BASE_IMAGE as base  # first image
[..]
FROM base as galaxy  # second image
[..]
FROM base as builder  # third image
[..]
FROM base as final  # fourth image
[..]
</code></pre></div></div>

<p>With these <code class="language-plaintext highlighter-rouge">FROM X as Y</code> statements we start building <em>a new image</em>.</p>

<p>First, we start with the <code class="language-plaintext highlighter-rouge">base</code> stage. Next, is the <code class="language-plaintext highlighter-rouge">galaxy</code> stage, followed by the <code class="language-plaintext highlighter-rouge">builder</code> stage and lastly the <code class="language-plaintext highlighter-rouge">final</code> stage.
For all these stages, you can prepend or append container build commands yourself - this makes it highly flexible.</p>

<p>In below table you’ll see which <code class="language-plaintext highlighter-rouge">additional_build_steps</code> attribute needs to be used for which stage:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">stage</th>
      <th style="text-align: left">attribute</th>
      <th style="text-align: left">position</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">base</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">prepend_base</code></td>
      <td style="text-align: left">beginning of <code class="language-plaintext highlighter-rouge">base</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">base</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">append_base</code></td>
      <td style="text-align: left">end of <code class="language-plaintext highlighter-rouge">base</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">galaxy</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">prepend_galaxy</code></td>
      <td style="text-align: left">beginning of <code class="language-plaintext highlighter-rouge">galaxy</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">galaxy</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">append_galaxy</code></td>
      <td style="text-align: left">end of <code class="language-plaintext highlighter-rouge">galaxy</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">builder</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">prepend_builder</code></td>
      <td style="text-align: left">beginning of <code class="language-plaintext highlighter-rouge">builder</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">builder</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">append_builder</code></td>
      <td style="text-align: left">end of <code class="language-plaintext highlighter-rouge">builder</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">final</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">prepend_final</code></td>
      <td style="text-align: left">beginning of <code class="language-plaintext highlighter-rouge">final</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">final</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">append_final</code></td>
      <td style="text-align: left">end of <code class="language-plaintext highlighter-rouge">final</code></td>
    </tr>
  </tbody>
</table>

<p>To be able to use these stages effectively, we’ll need to understand what each of the sections does - let’s have a look.</p>

<h4 id="base-stage"><code class="language-plaintext highlighter-rouge">base</code> stage</h4>

<p>The <code class="language-plaintext highlighter-rouge">base</code> stages begins by ensuring that <code class="language-plaintext highlighter-rouge">pip</code> is available (<code class="language-plaintext highlighter-rouge">RUN $PYCMD -m ensurepip</code>). This is important, as we’ll use the intermediate image <code class="language-plaintext highlighter-rouge">base</code> as our base for the
other intermediate images - hence the name <code class="language-plaintext highlighter-rouge">base</code>.</p>

<p>Next, we copy the scripts we have in <code class="language-plaintext highlighter-rouge">_build/scripts</code> to <code class="language-plaintext highlighter-rouge">/output/scripts</code> and copy the <code class="language-plaintext highlighter-rouge">entrypoint</code> script to its destination at <code class="language-plaintext highlighter-rouge">/opt/builder/bin/entrypoint</code>. The
<code class="language-plaintext highlighter-rouge">entrypoint</code> script will later on be the entry point for the <code class="language-plaintext highlighter-rouge">final</code> image.</p>

<p>The <code class="language-plaintext highlighter-rouge">scripts</code> contain scripts which we need during the build of our intermediate containers. Usually, you don’t need to look at them and understand what’s happening.
For troubleshooting it’s surely worthwhile to have a look :slightly_smiling_face:.</p>

<h4 id="galaxy-stage"><code class="language-plaintext highlighter-rouge">galaxy</code> stage</h4>

<p>Within the <code class="language-plaintext highlighter-rouge">galaxy</code> stage we’ll only install all Ansible collections and roles that are asked to be installed. That’s it :slightly_smiling_face:.</p>

<h4 id="builder-stage"><code class="language-plaintext highlighter-rouge">builder</code> stage</h4>

<p>The builder stage first copies what we’ve installed in the <code class="language-plaintext highlighter-rouge">galaxy</code> stage to <code class="language-plaintext highlighter-rouge">/usr/share/ansible</code> and then we <code class="language-plaintext highlighter-rouge">introspect</code> the content of it. Which means in other words,
we extract the dependencies that each collection requires and write them into <code class="language-plaintext highlighter-rouge">/tmp/src/bindep.txt</code> for system package dependencies or <code class="language-plaintext highlighter-rouge">/tmp/src/requirements.txt</code>
for Python packages.</p>

<p>:information_source:
Remember the <code class="language-plaintext highlighter-rouge">ansible-builder introspect</code> a few sections earlier? That’s essentially the same.</p>

<p>Finally we run a mysterious script <code class="language-plaintext highlighter-rouge">/output/scripts/assemble</code>. That’s one of the scripts that are in the <code class="language-plaintext highlighter-rouge">context/scripts</code> directory when you run <code class="language-plaintext highlighter-rouge">ansible-builder create</code> only.</p>

<p>What this script essentially does is resolving Python package dependencies and installing them to <code class="language-plaintext highlighter-rouge">/output</code>, which we need for the next stage. Additionally system packages are
installed and a list of them is collected and written for the next stage into <code class="language-plaintext highlighter-rouge">/output</code>.</p>

<p>We also cache what we’ve downloaded for Python packages, so the next stage progresses quicker :sunglasses:.</p>

<h4 id="final-stage"><code class="language-plaintext highlighter-rouge">final</code> stage</h4>

<p>This is - who would have guessed it - the final image. Essentially we combine everything now.</p>

<p>First we copy from the <code class="language-plaintext highlighter-rouge">galaxy</code> stage the Ansible collections and roles to <code class="language-plaintext highlighter-rouge">/usr/share/ansible/</code>, then we copy the result of the <code class="language-plaintext highlighter-rouge">builder</code> stage from <code class="language-plaintext highlighter-rouge">/output</code> to
<code class="language-plaintext highlighter-rouge">/output</code> and re-install the cached Python packages and as well the system package dependencies.</p>

<h3 id="complex-execution-environments">Complex execution environments</h3>

<p>With all the knowledge from the previous chapters, we can finally start creating complex execution environments :sunglasses:.</p>

<p>I’ll make up a completely random scenario where we install a bunch of collections, Python and system packages. In my imaginary scenario, we’ll need to set a proxy,
a custom Python package repository and we also need to install custom certificate authority certificates. Further, we’ll disable and enable repositories.</p>

<h4 id="specifying-dependencies-as-files">Specifying dependencies as files</h4>

<p>A few sections earlier, we specified the Ansible collections we wanted to install via in-line dependencies. Above I said, we’ll be using files.
The reason being, that - from my point of view - the more collections, Python and system packages you want to install, the harder to read the EE definition gets.</p>

<p>For this reason I’ve decided for myself to always use files to specify the dependencies - no matter how much I have.</p>

<p>We have three types of dependencies we can specify:</p>

<ol>
  <li>Ansible collections and roles</li>
  <li>Python packages</li>
  <li>System packages</li>
</ol>

<p>They all have a very specific format; They are easy to remember formats, however. At least from my perspective.</p>

<h4 id="installing-ansible-collections-and-roles">Installing Ansible collections and roles</h4>

<p>Defining Ansible collections and roles should be the easiest of all. The
<a href="https://docs.ansible.com/ansible/latest/galaxy/user_guide.html#installing-roles-and-collections-from-the-same-requirements-yml-file">format</a> is probably known to most
Ansible users.</p>

<p>For this example, I’ve copied one of my own <code class="language-plaintext highlighter-rouge">requirements.yml</code> and placed it next to my <code class="language-plaintext highlighter-rouge">execution-environment.yml</code>. I use the below
<code class="language-plaintext highlighter-rouge">requirements.yml</code> for automating Satellite end-to-end. It contains a few collections, as well as some roles:</p>

<p>:information_source: If you don’t specify a version for a collection or role, it’ll default to use the latest possible version.</p>

<p>If you want reproducibility for your EEs (so that it builds the same <em>every time</em>, even months after you created the initial EE), you <em>must</em> specify fixed versions of
collections and roles. <code class="language-plaintext highlighter-rouge">&gt;=</code> means “bigger than or equal to” (as seen in the code block below), which results in the installation of new versions of the
respective collections and roles if they are available.</p>

<p>This is only for the “user-specified” Ansible collections and roles. Once you install Ansible collections, they can come with their own dependencies, which you
cannot influence in that sense. So even if you specify fixed versions of your “user-supplied” Ansible collections, it doesn’t mean that your EE is 100% reproducible.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">collections</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">redhat.satellite'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">&gt;=3.10.0'</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">redhat.satellite_operations'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">&gt;=1.3.0'</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">redhat.rhel_system_roles'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">&gt;=1.21.1'</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ansible.posix'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">&gt;=1.5.4'</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">community.crypto'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">&gt;=2.3.2'</span>

  <span class="c1"># NOTE: Temporarily disabling the official redhat.insights collection and adding</span>
  <span class="c1">#       a temporary publish of the insights collection within my own namespace</span>
  <span class="c1">#       which contains PR https://github.com/RedHatInsights/ansible-collections-insights/pull/90.</span>
  <span class="c1">#       This PR provides required functionality for the insights role (obfuscating)</span>
  <span class="c1">#       and I didn't want to work around this issue.</span>
  <span class="c1">#       Another PR was also cherry-picked to this collection to fix the Insights client</span>
  <span class="c1">#       registration (https://github.com/RedHatInsights/ansible-collections-insights/pull/89)</span>
  <span class="c1">#</span>
  <span class="c1">#  - name: 'redhat.insights'</span>
  <span class="c1">#    version: '&gt;=1.2.0'</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">sscheib.insights'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0.0.2'</span>

<span class="na">roles</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">rhel_iso_kickstart'</span>
    <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://github.com/sscheib/ansible-role-rhel_iso_kickstart.git'</span>
    <span class="na">scm</span><span class="pi">:</span> <span class="s1">'</span><span class="s">git'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">v2.0.6'</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">user_deployment'</span>
    <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://github.com/sscheib/ansible-role-user_deployment.git'</span>
    <span class="na">scm</span><span class="pi">:</span> <span class="s1">'</span><span class="s">git'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">v1.0.5'</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">package_installation'</span>
    <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://github.com/sscheib/ansible-role-package_installation.git'</span>
    <span class="na">scm</span><span class="pi">:</span> <span class="s1">'</span><span class="s">git'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">v1.0.1'</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">service_management'</span>
    <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://github.com/sscheib/ansible-role-service_management.git'</span>
    <span class="na">scm</span><span class="pi">:</span> <span class="s1">'</span><span class="s">git'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">v1.0.2'</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">generate_ssl_key_pairs'</span>
    <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://github.com/sscheib/ansible-role-generate_ssl_key_pairs.git'</span>
    <span class="na">scm</span><span class="pi">:</span> <span class="s1">'</span><span class="s">git'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">v1.1.5'</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">register_to_satellite'</span>
    <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://github.com/sscheib/ansible-role-register_to_satellite.git'</span>
    <span class="na">scm</span><span class="pi">:</span> <span class="s1">'</span><span class="s">git'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">v1.0.4'</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">satellite_create_host'</span>
    <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://github.com/sscheib/ansible-role-satellite_create_host.git'</span>
    <span class="na">scm</span><span class="pi">:</span> <span class="s1">'</span><span class="s">git'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">v1.0.2'</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">satellite_publish_promote_content_views'</span>
    <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://github.com/sscheib/ansible-role-satellite_publish_promote_content_views.git'</span>
    <span class="na">scm</span><span class="pi">:</span> <span class="s1">'</span><span class="s">git'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">v1.0.2'</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">satellite_prepare_installation'</span>
    <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://github.com/sscheib/ansible-role-satellite_prepare_installation.git'</span>
    <span class="na">scm</span><span class="pi">:</span> <span class="s1">'</span><span class="s">git'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">v1.0.3'</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">satellite_template_synchronization'</span>
    <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://github.com/sscheib/ansible-role-satellite_template_synchronization.git'</span>
    <span class="na">scm</span><span class="pi">:</span> <span class="s1">'</span><span class="s">git'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">v1.0.2'</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">satellite_global_parameters'</span>
    <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://github.com/sscheib/ansible-role-satellite_global_parameters.git'</span>
    <span class="na">scm</span><span class="pi">:</span> <span class="s1">'</span><span class="s">git'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">v1.0.1'</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">file_deployment'</span>
    <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://github.com/sscheib/ansible-role-file_deployment.git'</span>
    <span class="na">scm</span><span class="pi">:</span> <span class="s1">'</span><span class="s">git'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">v1.0.1'</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>As you see, I am using both community and certified collections. The roles are all my own :slightly_smiling_face:.</p>

<p>To make <code class="language-plaintext highlighter-rouge">ansible-builder</code> aware of this file, we need to specify the following in our <code class="language-plaintext highlighter-rouge">execution-environment.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
<span class="na">dependencies</span><span class="pi">:</span>
  <span class="na">galaxy</span><span class="pi">:</span> <span class="s1">'</span><span class="s">requirements.yml'</span>
<span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
</code></pre></div></div>

<h4 id="installing-python-packages">Installing Python packages</h4>

<p>Python package requirements follow also a very specific <a href="https://pip.pypa.io/en/stable/reference/requirements-file-format/">format</a>. Below I’ll made up a random set
of Python packages to install in different versions.</p>

<p>:information_source: If you don’t specify a version for a Python package, it’ll default to use the latest possible version.</p>

<p>If you want reproducibility for your EEs (so that it builds the same <em>every time</em>, even months after you created the initial EE), you <em>must</em> specify fixed versions for
Python packages. <code class="language-plaintext highlighter-rouge">&gt;=</code> means “bigger than or equal to” (as seen in the code block below), which results in the installation of new versions of the
respective Python packages if they are available and <code class="language-plaintext highlighter-rouge">pip</code> dependency resolution finds it will not cause dependency issues.</p>

<p>This is only for the “user-specified” Python packages. Once you install Ansible collections and Python packages, they come with their own dependencies, which you
cannot influence in that sense. So even if you specify fixed versions of your “user-supplied” Python packages, it doesn’t mean that your EE is 100% reproducible.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pytz
python-dateutil&gt;=2.7.0
awxkit
proxmoxer
ansible-pylibssh&gt;=0.2.0
jxmlease
ncclient
netaddr
paramiko
xmltodict
grpcio
protobuf
jsonschema
textfsm
ttp
xmltodict
PyYAML
</code></pre></div></div>

<p>We’ll place the above content into the file <code class="language-plaintext highlighter-rouge">requirements.txt</code>, next to our <code class="language-plaintext highlighter-rouge">execution-environment.yml</code>.</p>

<p>To make <code class="language-plaintext highlighter-rouge">ansible-builder</code> aware of this file, we need to specify the following in our <code class="language-plaintext highlighter-rouge">execution-environment.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
<span class="na">dependencies</span><span class="pi">:</span>
  <span class="na">python</span><span class="pi">:</span> <span class="s1">'</span><span class="s">requirements.txt'</span>
<span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
</code></pre></div></div>

<h4 id="installing-system-packages">Installing system packages</h4>

<p>Last but not least, we have the system packages. Also these follow a specific <a href="https://docs.opendev.org/opendev/bindep/latest/readme.html">format</a>.</p>

<p>:information_source: If you don’t specify a version for a system package, it’ll default to use the latest possible version.</p>

<p>If you want reproducibility for your EEs (so that it builds the same <em>every time</em>, even months after you created the initial EE), you <em>must</em> specify a fixed version for
your system packages.</p>

<p>This is only for the “user-specified” system packages. Once you install Ansible collections, Python packages and system packages, they can come with their own
dependencies, which you cannot influence in that sense. So even if you specify fixed versions of your “user-supplied” system packages, it doesn’t mean that your EE
is 100% reproducible.</p>

<p>I made up again a random list of system packages to install:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>libyaml-devel [test platform:rpm]
libyaml-dev [test platform:dpkg]
python3-devel [test platform:rpm]
python3 [test platform:rpm]
gcc [compile platform:rpm]
libssh-dev [compile platform:dpkg]
libssh-devel [compile platform:rpm]
python3-Cython [compile platform:fedora-35 platform:rhel-9]
python3-six [platform:centos-9 platform:rhel-9]
python39-six [platform:centos-8 platform:rhel-8]
python3-lxml [platform:centos-9 platform:rhel-9]
python39-lxml [platform:centos-8 platform:rhel-8]
findutils [compile platform:centos-8 platform:rhel-8]
gcc [compile platform:centos-8 platform:rhel-8]
make [compile platform:centos-8 platform:rhel-8]
python3-devel [compile platform:centos-9 platform:rhel-9]
python39-devel [compile platform:centos-8 platform:rhel-8]
python3-cffi [platform:centos-9 platform:rhel-9]
jq
grep == 3.3
</code></pre></div></div>

<p>The format is the most complex of the three, and I encourage you to <a href="https://docs.opendev.org/opendev/bindep/latest/readme.html">read up on it</a> to understand it. For basic
requirements, you can simply name the RPM you’d like to have installed - like I did with <code class="language-plaintext highlighter-rouge">jq</code> above.</p>

<p>I’ve also added an example for specifying a fixed version of the package <code class="language-plaintext highlighter-rouge">grep</code>.</p>

<p>We’ll place the above content in the file <code class="language-plaintext highlighter-rouge">bindep.txt</code>, again next to our <code class="language-plaintext highlighter-rouge">execution-environment.yml</code>.</p>

<p>To make <code class="language-plaintext highlighter-rouge">ansible-builder</code> aware of this file, we need to specify the following in our <code class="language-plaintext highlighter-rouge">execution-environment.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
<span class="na">dependencies</span><span class="pi">:</span>
  <span class="na">system</span><span class="pi">:</span> <span class="s1">'</span><span class="s">bindep.txt'</span>
<span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
</code></pre></div></div>

<h4 id="adding-certificates-to-an-ee">Adding certificates to an EE</h4>

<p>Adding certificates is essentially the same as with every RHEL-like system. In the case of EEs, we need to copy the certificates first into our <code class="language-plaintext highlighter-rouge">_build</code>
directory (as with the <code class="language-plaintext highlighter-rouge">ansible.cfg</code>).</p>

<p>Let’s imagine we have a file called <code class="language-plaintext highlighter-rouge">ca.cert.pem</code> and another one <code class="language-plaintext highlighter-rouge">intermediate.cert.pem</code> next to our <code class="language-plaintext highlighter-rouge">execution-environments.yml</code> file.</p>

<p>To add these certificates to the EE, we first need to tell <code class="language-plaintext highlighter-rouge">ansible-builder</code> to copy these files to the <code class="language-plaintext highlighter-rouge">_build</code> directory:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
<span class="na">additional_build_files</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ca.cert.pem'</span>
      <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">certs/'</span>

    <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">intermediate.cert.pem'</span>
      <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">certs/'</span>
<span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
</code></pre></div></div>

<p>With the above, we’ll copy both <code class="language-plaintext highlighter-rouge">ca.cert.pem</code> and <code class="language-plaintext highlighter-rouge">intermediate.cert.pem</code> to <code class="language-plaintext highlighter-rouge">_build/certs</code> inside the build context directory.</p>

<p>Next we need to copy these files actually to their correct destination. For that, we need to inject build steps into one of the stages we talked about.</p>

<p>Now often the question comes up: Which stage?</p>

<p>The answer is, as so often, it depends :rofl:.</p>

<p>If you need the certificates to validate your connection to your private automation hub, then you’ll need them in the <code class="language-plaintext highlighter-rouge">galaxy</code> stage. Do you require certificate validation with
your proxy, and need to access the internet or some internal systems via a proxy, then you’ll probably need the certificates in all stages (but the <code class="language-plaintext highlighter-rouge">base</code> stage, probably).</p>

<p>As you see, the answer really depends on your specific requirement.</p>

<p>Nevertheless, the procedure is always the same when you specify it in the EE definition:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
<span class="na">additional_build_steps</span><span class="pi">:</span>
  <span class="na">prepend_galaxy</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">COPY</span><span class="nv"> </span><span class="s">_build/certs/ca.cert.pem</span><span class="nv"> </span><span class="s">/etc/pki/ca-trust/source/anchors/'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">COPY</span><span class="nv"> </span><span class="s">_build/certs/intermediate.cert.pem</span><span class="nv"> </span><span class="s">/etc/pki/ca-trust/source/anchors/'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">update-ca-trust'</span>
<span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
</code></pre></div></div>

<p>In the case above, I added it to the beginning of the <code class="language-plaintext highlighter-rouge">galaxy</code> stage. If you need to use it in another <code class="language-plaintext highlighter-rouge">stage</code>, simply replace <code class="language-plaintext highlighter-rouge">prepend_galaxy</code> with the corresponding
attribute for the <a href="#execution-environment-stages">stage</a> required.</p>

<h4 id="defining-a-proxy">Defining a proxy</h4>

<p>Defining a proxy really depends on your use case - again. Most commonly, you’d have to run all connections that go outside of your corporate network through the proxy.
This means, every time we install something. Which means, you’ll need it in all <code class="language-plaintext highlighter-rouge">stages</code> :slightly_smiling_face:.</p>

<p>Further, we need to differentiate between a system proxy and a proxy only for <code class="language-plaintext highlighter-rouge">pip</code>.</p>

<p>Let’s first go with the system proxy. A system proxy is set via the environment variables <code class="language-plaintext highlighter-rouge">http_proxy</code> and <code class="language-plaintext highlighter-rouge">https_proxy</code>. And if you want to exclude (sub-)domains,
you can make use of <code class="language-plaintext highlighter-rouge">no_proxy</code>.</p>

<p>If you’ve never encountered any of these variables before, you might want to review the <a href="https://www.gnu.org/software/wget/manual/html_node/Proxies.html">documentation</a> of
them prior to using them.</p>

<p>In <code class="language-plaintext highlighter-rouge">ansible-builder</code> we can do it like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
<span class="na">additional_build_steps</span><span class="pi">:</span>
  <span class="na">prepend_builder</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ENV</span><span class="nv"> </span><span class="s">http_proxy=http://my.proxy.example.com:3128'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ENV</span><span class="nv"> </span><span class="s">https_proxy=http://my.proxy.example.com:3128'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ENV</span><span class="nv"> </span><span class="s">no_proxy=sub.example.org,another.domain.evil.corp'</span>
<span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
</code></pre></div></div>

<p>When it comes to the <code class="language-plaintext highlighter-rouge">pip</code> proxy, we need to set it independently using the <code class="language-plaintext highlighter-rouge">pip config</code> command:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
<span class="na">additional_build_steps</span><span class="pi">:</span>
  <span class="na">prepend_builder</span><span class="pi">:</span>
    <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">pip3</span><span class="nv"> </span><span class="s">config</span><span class="nv"> </span><span class="s">--user</span><span class="nv"> </span><span class="s">set</span><span class="nv"> </span><span class="s">global.proxy</span><span class="nv"> </span><span class="s">http://my.proxy.example.com:3128'</span>
<span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
</code></pre></div></div>

<p>In which stage you’ll add these, is totally up to you and depends on your <em>specific</em> use case.</p>

<h4 id="custom-python-package-repository">Custom Python package repository</h4>

<p>Some users might have their Python packages scanned and published on a custom repository. It is easy to also set that in an EE definition:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
<span class="na">additional_build_steps</span><span class="pi">:</span>
  <span class="na">prepend_builder</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">pip3</span><span class="nv"> </span><span class="s">config</span><span class="nv"> </span><span class="s">--user</span><span class="nv"> </span><span class="s">set</span><span class="nv"> </span><span class="s">global.index-url</span><span class="nv"> </span><span class="s">http://custom.repository.example.com/simple'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">pip3</span><span class="nv"> </span><span class="s">config</span><span class="nv"> </span><span class="s">--user</span><span class="nv"> </span><span class="s">set</span><span class="nv"> </span><span class="s">global.trusted-host</span><span class="nv"> </span><span class="s">custom.repository.example.com'</span>
<span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
</code></pre></div></div>

<p>:information_source: It is important to note, that you not only need to set the <code class="language-plaintext highlighter-rouge">index-url</code>, but also need to flag the host as trusted. Otherwise <code class="language-plaintext highlighter-rouge">pip</code> will refuse installation.</p>

<h4 id="enabling-and-disabling-repositories">Enabling and disabling repositories</h4>

<p>Sometimes you’ll have the need to enable other repositories than the default <code class="language-plaintext highlighter-rouge">UBI</code> and RHEL repositories within the EE build context. For instance to install a custom package.</p>

<p>If you have read the blog post in its entirety then you know that we need to make use of <code class="language-plaintext highlighter-rouge">microdnf</code> instead of <code class="language-plaintext highlighter-rouge">dnf</code> in an EE context.</p>

<p>Enabling and disabling repositories is as easy as the tasks above, but this time we need to override an existing environment variable: <code class="language-plaintext highlighter-rouge">PKGMGR_OPTS</code>.</p>

<p>By default, the environment variable <code class="language-plaintext highlighter-rouge">PKGMGR_OPTS</code> has the following value (at the time of this writing):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--nodocs --setopt=install_weak_deps=0
</code></pre></div></div>

<p>We’ll simply extend that by adding our <code class="language-plaintext highlighter-rouge">--disablerepo=</code> and <code class="language-plaintext highlighter-rouge">--enablerepo=</code> switches to it:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--nodocs --setopt=install_weak_deps=0 --disablerepo=* --enablerepo=ubi-8-*"
</code></pre></div></div>

<p>In the above code, we’ll disable all repositories and only enable the <code class="language-plaintext highlighter-rouge">UBI</code> 8 repositories.</p>

<p>We’ll define that like the following in the EE definition:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">additional_build_steps</span><span class="pi">:</span>
  <span class="na">prepend_builder</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ENV</span><span class="nv"> </span><span class="s">PKGMGR_OPTS="--nodocs</span><span class="nv"> </span><span class="s">--setopt=install_weak_deps=0</span><span class="nv"> </span><span class="s">--disablerepo=*</span><span class="nv"> </span><span class="s">--enablerepo=ubi-8-*"'</span>
</code></pre></div></div>

<h4 id="the-complete-complex-execution-environment-making-use-of-advanced-yaml-syntax">The complete complex execution environment: Making use of advanced <code class="language-plaintext highlighter-rouge">YAML</code> syntax</h4>

<p>If we combine all the previously discussed modifications into one EE definition, we’ll end up with something like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">version</span><span class="pi">:</span> <span class="m">3</span>

<span class="na">images</span><span class="pi">:</span>
  <span class="na">base_image</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.16'</span>

<span class="na">dependencies</span><span class="pi">:</span>
  <span class="na">galaxy</span><span class="pi">:</span> <span class="s1">'</span><span class="s">requirements.yml'</span>
  <span class="na">python</span><span class="pi">:</span> <span class="s1">'</span><span class="s">requirements.txt'</span>
  <span class="na">system</span><span class="pi">:</span> <span class="s1">'</span><span class="s">bindep.txt'</span>

<span class="na">options</span><span class="pi">:</span>
  <span class="na">package_manager_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/usr/bin/microdnf'</span>

<span class="na">additional_build_files</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ansible.cfg'</span>
      <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">configs/'</span>

    <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ca.cert.pem'</span>
      <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">certs/'</span>

    <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">intermediate.cert.pem'</span>
      <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">certs/'</span>

<span class="na">additional_build_steps</span><span class="pi">:</span>
  <span class="na">prepend_base</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">COPY</span><span class="nv"> </span><span class="s">_build/certs/ca.cert.pem</span><span class="nv"> </span><span class="s">/etc/pki/ca-trust/source/anchors/'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">COPY</span><span class="nv"> </span><span class="s">_build/certs/intermediate.cert.pem</span><span class="nv"> </span><span class="s">/etc/pki/ca-trust/source/anchors/'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">update-ca-trust'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ENV</span><span class="nv"> </span><span class="s">https_proxy=http://lab-development-rhel8.core.rh.scheib.me:3128'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ENV</span><span class="nv"> </span><span class="s">http_proxy=http://lab-development-rhel8.core.rh.scheib.me:3128'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">pip3</span><span class="nv"> </span><span class="s">config</span><span class="nv"> </span><span class="s">--user</span><span class="nv"> </span><span class="s">set</span><span class="nv"> </span><span class="s">global.index-url</span><span class="nv"> </span><span class="s">http://lab-development-rhel8.core.rh.scheib.me/simple'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">pip3</span><span class="nv"> </span><span class="s">config</span><span class="nv"> </span><span class="s">--user</span><span class="nv"> </span><span class="s">set</span><span class="nv"> </span><span class="s">global.trusted-host</span><span class="nv"> </span><span class="s">lab-development-rhel8.core.rh.scheib.me'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">pip3</span><span class="nv"> </span><span class="s">config</span><span class="nv"> </span><span class="s">--user</span><span class="nv"> </span><span class="s">set</span><span class="nv"> </span><span class="s">global.proxy</span><span class="nv"> </span><span class="s">http://lab-development-rhel8.core.rh.scheib.me:3128'</span>

  <span class="na">prepend_galaxy</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">COPY</span><span class="nv"> </span><span class="s">_build/certs/ca.cert.pem</span><span class="nv"> </span><span class="s">/etc/pki/ca-trust/source/anchors/'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">COPY</span><span class="nv"> </span><span class="s">_build/certs/intermediate.cert.pem</span><span class="nv"> </span><span class="s">/etc/pki/ca-trust/source/anchors/'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">update-ca-trust'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ENV</span><span class="nv"> </span><span class="s">https_proxy=http://lab-development-rhel8.core.rh.scheib.me:3128'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ENV</span><span class="nv"> </span><span class="s">http_proxy=http://lab-development-rhel8.core.rh.scheib.me:3128'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">COPY</span><span class="nv"> </span><span class="s">_build/configs/ansible.cfg</span><span class="nv"> </span><span class="s">/home/runner/.ansible.cfg'</span>

  <span class="na">prepend_builder</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">COPY</span><span class="nv"> </span><span class="s">_build/certs/ca.cert.pem</span><span class="nv"> </span><span class="s">/etc/pki/ca-trust/source/anchors/'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">COPY</span><span class="nv"> </span><span class="s">_build/certs/intermediate.cert.pem</span><span class="nv"> </span><span class="s">/etc/pki/ca-trust/source/anchors/'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ENV</span><span class="nv"> </span><span class="s">https_proxy=http://lab-development-rhel8.core.rh.scheib.me:3128'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ENV</span><span class="nv"> </span><span class="s">http_proxy=http://lab-development-rhel8.core.rh.scheib.me:3128'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">update-ca-trust'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">pip3</span><span class="nv"> </span><span class="s">config</span><span class="nv"> </span><span class="s">--user</span><span class="nv"> </span><span class="s">set</span><span class="nv"> </span><span class="s">global.index-url</span><span class="nv"> </span><span class="s">http://lab-development-rhel8.core.rh.scheib.me/simple'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">pip3</span><span class="nv"> </span><span class="s">config</span><span class="nv"> </span><span class="s">--user</span><span class="nv"> </span><span class="s">set</span><span class="nv"> </span><span class="s">global.trusted-host</span><span class="nv"> </span><span class="s">lab-development-rhel8.core.rh.scheib.me'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">pip3</span><span class="nv"> </span><span class="s">config</span><span class="nv"> </span><span class="s">--user</span><span class="nv"> </span><span class="s">set</span><span class="nv"> </span><span class="s">global.proxy</span><span class="nv"> </span><span class="s">http://lab-development-rhel8.core.rh.scheib.me:3128'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ENV</span><span class="nv"> </span><span class="s">PKGMGR_OPTS="--nodocs</span><span class="nv"> </span><span class="s">--setopt=install_weak_deps=0</span><span class="nv"> </span><span class="s">--disablerepo=*</span><span class="nv"> </span><span class="s">--enablerepo=ubi-8-*"'</span>

  <span class="na">prepend_final</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">COPY</span><span class="nv"> </span><span class="s">_build/certs/ca.cert.pem</span><span class="nv"> </span><span class="s">/etc/pki/ca-trust/source/anchors/'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">COPY</span><span class="nv"> </span><span class="s">_build/certs/intermediate.cert.pem</span><span class="nv"> </span><span class="s">/etc/pki/ca-trust/source/anchors/'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ENV</span><span class="nv"> </span><span class="s">https_proxy=http://lab-development-rhel8.core.rh.scheib.me:3128'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ENV</span><span class="nv"> </span><span class="s">http_proxy=http://lab-development-rhel8.core.rh.scheib.me:3128'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">update-ca-trust'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">pip3</span><span class="nv"> </span><span class="s">config</span><span class="nv"> </span><span class="s">--user</span><span class="nv"> </span><span class="s">set</span><span class="nv"> </span><span class="s">global.index-url</span><span class="nv"> </span><span class="s">http://lab-development-rhel8.core.rh.scheib.me/simple'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">pip3</span><span class="nv"> </span><span class="s">config</span><span class="nv"> </span><span class="s">--user</span><span class="nv"> </span><span class="s">set</span><span class="nv"> </span><span class="s">global.trusted-host</span><span class="nv"> </span><span class="s">lab-development-rhel8.core.rh.scheib.me'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">pip3</span><span class="nv"> </span><span class="s">config</span><span class="nv"> </span><span class="s">--user</span><span class="nv"> </span><span class="s">set</span><span class="nv"> </span><span class="s">global.proxy</span><span class="nv"> </span><span class="s">http://lab-development-rhel8.core.rh.scheib.me:3128'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ENV</span><span class="nv"> </span><span class="s">PKGMGR_OPTS="--nodocs</span><span class="nv"> </span><span class="s">--setopt=install_weak_deps=0</span><span class="nv"> </span><span class="s">--disablerepo=*</span><span class="nv"> </span><span class="s">--enablerepo=ubi-8-*"'</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>As you surely noticed, we are doing the same things often multiple times. That’s due to the different images we build.</p>

<p>There is a little something, that can make this a lot more tidy than it is currently: <a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_advanced_syntax.html#yaml-anchors-and-aliases-sharing-variable-values"><code class="language-plaintext highlighter-rouge">YAML anchors and aliases</code></a>.</p>

<p>It is not used <em>that</em> widely with Ansible to my knowledge, as it can make things pretty quickly, pretty messy, so be careful when using it.</p>

<p>With <code class="language-plaintext highlighter-rouge">YAML</code> anchors and aliases, you can include repetitive definitions in place. This not only looks tidier, but it has the benefit that you’ll only need to update <em>one</em>
reference if you, for instance, change your proxy - instead of updating all of the occurrences.</p>

<p>Let’s look into what it looks like when using it:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">version</span><span class="pi">:</span> <span class="m">3</span>

<span class="na">images</span><span class="pi">:</span>
  <span class="na">base_image</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.16'</span>

<span class="na">dependencies</span><span class="pi">:</span>
  <span class="na">galaxy</span><span class="pi">:</span> <span class="s1">'</span><span class="s">requirements.yml'</span>
  <span class="na">python</span><span class="pi">:</span> <span class="s1">'</span><span class="s">requirements.txt'</span>
  <span class="na">system</span><span class="pi">:</span> <span class="s1">'</span><span class="s">bindep.txt'</span>

<span class="na">options</span><span class="pi">:</span>
  <span class="na">package_manager_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/usr/bin/microdnf'</span>

<span class="na">additional_build_files</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ansible.cfg'</span>
      <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">configs/'</span>

    <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ca.cert.pem'</span>
      <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">certs/'</span>

    <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">intermediate.cert.pem'</span>
      <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">certs/'</span>

<span class="na">additional_build_steps</span><span class="pi">:</span>
  <span class="na">prepend_base</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="nl">&amp;copy-certs</span> <span class="pi">|-</span>
         <span class="s">COPY _build/certs/ca.cert.pem /etc/pki/ca-trust/source/anchors/</span>
         <span class="s">COPY _build/certs/intermediate.cert.pem /etc/pki/ca-trust/source/anchors</span>
         <span class="s">RUN update-ca-trust</span>

    <span class="pi">-</span> <span class="nl">&amp;system-proxy</span> <span class="pi">|-</span>
        <span class="s">ENV https_proxy=http://lab-development-rhel8.core.rh.scheib.me:3128</span>
        <span class="s">ENV http_proxy=http://lab-development-rhel8.core.rh.scheib.me:3128</span>
    <span class="pi">-</span> <span class="nl">&amp;pip</span> <span class="pi">|-</span>
        <span class="s">RUN pip3 config --user set global.index-url http://lab-development-rhel8.core.rh.scheib.me/simple</span>
        <span class="s">RUN pip3 config --user set global.trusted-host lab-development-rhel8.core.rh.scheib.me</span>
        <span class="s">RUN pip3 config --user set global.proxy http://lab-development-rhel8.core.rh.scheib.me:3128</span>

  <span class="na">prepend_galaxy</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="nv">*copy-certs</span>
    <span class="pi">-</span> <span class="nv">*system-proxy</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">COPY</span><span class="nv"> </span><span class="s">_build/configs/ansible.cfg</span><span class="nv"> </span><span class="s">/home/runner/.ansible.cfg'</span>

  <span class="na">prepend_builder</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="nv">*copy-certs</span>
    <span class="pi">-</span> <span class="nv">*system-proxy</span>
    <span class="pi">-</span> <span class="nv">*pip</span>
    <span class="pi">-</span> <span class="nl">&amp;disable-repos</span> <span class="pi">&gt;-</span>
       <span class="s">ENV PKGMGR_OPTS="--nodocs --setopt=install_weak_deps=0 --disablerepo=* --enablerepo=ubi-8-*"</span>

  <span class="na">prepend_final</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="nv">*copy-certs</span>
    <span class="pi">-</span> <span class="nv">*system-proxy</span>
    <span class="pi">-</span> <span class="nv">*pip</span>
    <span class="pi">-</span> <span class="nv">*disable-repos</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>Doesn’t that look <strong>much</strong> cleaner now? :sunglasses:.</p>

<h3 id="using-custom-base-images">Using custom base images</h3>

<p>The last topic I’d like to cover is using your very own <code class="language-plaintext highlighter-rouge">base</code> images. As you’ve seen in the above EE definition we often repeat the same steps. Such things as copying the
certificates, and setting the system proxy.</p>

<p>If you know that you <strong>always</strong> need certain things in your EE, we can apply a simple concept: Build your own <code class="language-plaintext highlighter-rouge">base</code> image, based on one of the official EEs.</p>

<p>Things that you might always need are, for instance:</p>

<ul>
  <li>Specific system proxy</li>
  <li>Specific EE modifications you need to perform always</li>
  <li>Adding your corporate certificates</li>
</ul>

<p>Again, this <em>only</em> applies to things that you need in <em>all</em> your EEs.</p>

<p>The process itself is straight forward. We’ll define a EE as we used to do, but with the bare minimum of options, and leaving out <em>everything</em> that we don’t need <em>always</em>.
In my case that’s Python packages as well as Ansible content:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">version</span><span class="pi">:</span> <span class="m">3</span>

<span class="na">images</span><span class="pi">:</span>
  <span class="na">base_image</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.16'</span>

<span class="na">dependencies</span><span class="pi">:</span>
  <span class="na">system</span><span class="pi">:</span> <span class="s1">'</span><span class="s">bindep.txt'</span>

<span class="na">options</span><span class="pi">:</span>
  <span class="na">package_manager_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/usr/bin/microdnf'</span>

<span class="na">additional_build_files</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ansible.cfg'</span>
      <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">configs/'</span>

    <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ca.cert.pem'</span>
      <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">certs/'</span>

    <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">intermediate.cert.pem'</span>
      <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">certs/'</span>

<span class="na">additional_build_steps</span><span class="pi">:</span>
  <span class="na">prepend_base</span><span class="pi">:</span>
    <span class="c1"># copy files</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">COPY</span><span class="nv"> </span><span class="s">_build/certs/ca.cert.pem</span><span class="nv"> </span><span class="s">/etc/pki/ca-trust/source/anchors/'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">COPY</span><span class="nv"> </span><span class="s">_build/certs/intermediate.cert.pem</span><span class="nv"> </span><span class="s">/etc/pki/ca-trust/source/anchors'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">COPY</span><span class="nv"> </span><span class="s">_build/configs/ansible.cfg</span><span class="nv"> </span><span class="s">/home/runner/.ansible.cfg'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">update-ca-trust'</span>

    <span class="c1"># override pip proxy and package repository</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">pip3</span><span class="nv"> </span><span class="s">config</span><span class="nv"> </span><span class="s">--user</span><span class="nv"> </span><span class="s">set</span><span class="nv"> </span><span class="s">global.index-url</span><span class="nv"> </span><span class="s">http://lab-development-rhel8.core.rh.scheib.me/simple'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">pip3</span><span class="nv"> </span><span class="s">config</span><span class="nv"> </span><span class="s">--user</span><span class="nv"> </span><span class="s">set</span><span class="nv"> </span><span class="s">global.trusted-host</span><span class="nv"> </span><span class="s">lab-development-rhel8.core.rh.scheib.me'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">RUN</span><span class="nv"> </span><span class="s">pip3</span><span class="nv"> </span><span class="s">config</span><span class="nv"> </span><span class="s">--user</span><span class="nv"> </span><span class="s">set</span><span class="nv"> </span><span class="s">global.proxy</span><span class="nv"> </span><span class="s">http://lab-development-rhel8.core.rh.scheib.me:3128'</span>

    <span class="c1"># set the system proxy</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ENV</span><span class="nv"> </span><span class="s">https_proxy=http://lab-development-rhel8.core.rh.scheib.me:3128'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ENV</span><span class="nv"> </span><span class="s">http_proxy=http://lab-development-rhel8.core.rh.scheib.me:3128'</span>

    <span class="c1"># disable all repositories but the UBI ones</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">ENV</span><span class="nv"> </span><span class="s">PKGMGR_OPTS="--nodocs</span><span class="nv"> </span><span class="s">--setopt=install_weak_deps=0</span><span class="nv"> </span><span class="s">--disablerepo=*</span><span class="nv"> </span><span class="s">--enablerepo=ubi-8-*"'</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>In my imaginary scenario above I <em>always</em> need:</p>

<ul>
  <li>The certificates of my public key infrastructure inside my EE</li>
  <li>Proxy configuration, for both the system itself and <code class="language-plaintext highlighter-rouge">pip</code></li>
  <li>We are also going to use a custom Python package repository</li>
  <li>I need one package, that is defined in <code class="language-plaintext highlighter-rouge">bindep.txt</code>: <code class="language-plaintext highlighter-rouge">socat [platform:rpm]</code></li>
  <li>Also I want to ensure that only <code class="language-plaintext highlighter-rouge">UBI</code> repositories are enabled</li>
</ul>

<p>You can also include Ansible content and as well Python packages you always want to have in <em>each</em> EE. But please remember: If you don’t require it <em>always</em>,
but only in specific EEs, you should not consider adding that to your custom <code class="language-plaintext highlighter-rouge">base image</code>.</p>

<p>Let’s build the <code class="language-plaintext highlighter-rouge">base</code> image:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-builder build <span class="nt">-f</span> base.yml <span class="nt">-t</span> ee-base-rhel-8:latest <span class="nt">-v3</span>
<span class="o">[</span>..]
<span class="o">[</span>3/3] COMMIT ee-base-rhel-8:latest
<span class="nt">--</span><span class="o">&gt;</span> ff13573ab020
Successfully tagged localhost/ee-base-rhel-8:latest
ff13573ab0209bdbc8cdcee3d0aaae4d8d643d91d87f1c38449806e983a15e46
</code></pre></div></div>

<p>Now we have the EE on our local machine and <code class="language-plaintext highlighter-rouge">ansible-navigator images</code> knows about it:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   Image                                                                            Tag         Execution environment                 Created                          Size
 1│ee-base-rhel-8                                                                   latest      True                                  About a minute ago               359 MB
 2│ee-minimal-rhel8                                                                 2.16        True                                  4 weeks ago                      345 MB
 3│ee-satellite-rhel-8                                                              latest      True                                  3 days ago                       446 MB
</code></pre></div></div>

<p>Perfect. How do we utilize it now in <code class="language-plaintext highlighter-rouge">ee-satellite-rhel-8</code>?</p>

<p>That’s easy: Can you recall the following section of the EE definition?</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
<span class="na">images</span><span class="pi">:</span>
  <span class="na">base_image</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.16'</span>
<span class="pi">[</span><span class="nv">..</span><span class="pi">]</span>
</code></pre></div></div>

<p>Guess what? We’ll replace that now with our just created image <code class="language-plaintext highlighter-rouge">localhost/ee-base-rhel-8:latest</code> :sunglasses:.</p>

<p>The final <code class="language-plaintext highlighter-rouge">execution-environment.yml</code> for our EE <code class="language-plaintext highlighter-rouge">ee-satellite-rhel-8:latest</code> will look like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">version</span><span class="pi">:</span> <span class="m">3</span>

<span class="na">images</span><span class="pi">:</span>
  <span class="na">base_image</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">localhost/ee-base-rhel-8:latest'</span>

<span class="na">dependencies</span><span class="pi">:</span>
  <span class="na">galaxy</span><span class="pi">:</span> <span class="s1">'</span><span class="s">requirements.yml'</span>
  <span class="na">python</span><span class="pi">:</span> <span class="s1">'</span><span class="s">requirements.txt'</span>
  <span class="na">system</span><span class="pi">:</span> <span class="s1">'</span><span class="s">bindep.txt'</span>

<span class="na">options</span><span class="pi">:</span>
  <span class="na">package_manager_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/usr/bin/microdnf'</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>We handle all the necessary extra steps already (certificates, proxy, etc.) in our own <code class="language-plaintext highlighter-rouge">base</code> image, so you don’t have to worry about that anymore when building your
“real” EE. This also has the benefit we only need to do it <em>once</em>, compared to the previous multiple times - depending on your use case, of course.</p>

<p>You can push the new <code class="language-plaintext highlighter-rouge">base</code> EE now to your Automation Hub, or any other container registry you have in your company. That way everybody can use this new corporate
base EE :slightly_smiling_face:.</p>

<p>Easy, wasn’t it? :sunglasses:</p>

<p>:warning:
<strong>A word of caution</strong>: Since we now effectively decoupled pulling Red Hat’s certified EE of our “real” EE, you <strong>need</strong> to update your custom <code class="language-plaintext highlighter-rouge">base</code> EE
<strong>regularly</strong> as well. Otherwise you don’t receive updates of the certified EEs.</p>

<h3 id="enabling-non-red-hat-repositories">Enabling non-Red Hat repositories</h3>

<p>There might be a need for you to enable custom <code class="language-plaintext highlighter-rouge">RPM</code> repositories, which are not distributed by Red Hat.</p>

<p><code class="language-plaintext highlighter-rouge">microdnf</code> is, unfortunately, not up for that task - at least I couldn’t find a way to make this work with <code class="language-plaintext highlighter-rouge">microdnf</code>.</p>

<p>The difference of official Red Hat repositories and custom repositories with regards to <code class="language-plaintext highlighter-rouge">GPG</code> key signing, is the fact that <code class="language-plaintext highlighter-rouge">UBI</code> knows about the <code class="language-plaintext highlighter-rouge">GPG</code> keys Red Hat signs
the <code class="language-plaintext highlighter-rouge">RPM</code> packages with. The <code class="language-plaintext highlighter-rouge">GPG</code> key of Red Hat is certainly different to a custom repository, where you - or a different vendor - signs the packages with a different
<code class="language-plaintext highlighter-rouge">GPG</code> key.</p>

<p>In ‘usual’ operating system usage (on RHEL), there is not much magic to importing a custom <code class="language-plaintext highlighter-rouge">GPG</code> key for a custom <code class="language-plaintext highlighter-rouge">RPM</code> repository. It starts to get complicated with <code class="language-plaintext highlighter-rouge">microdnf</code>
in <code class="language-plaintext highlighter-rouge">UBI</code>.</p>

<h4 id="the-issue">The issue</h4>

<p>When trying to enable a custom <code class="language-plaintext highlighter-rouge">RPM</code> repository (in my case <code class="language-plaintext highlighter-rouge">org-core_prd-zabbix-zabbix_repo-zabbix-zabbix-6_0-rhel-8-8-x86_64</code>) which is provided by my Red Hat Satellite to
the system which is building the EE, I always receive the following error:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>error: failed to parse public key for /var/cache/yum/metadata/org-core_prd-zabbix-zabbix_repo-zabbix-zabbix-6_0-rhel-8-8-x86_64/gpg_key_content
</code></pre></div></div>

<p>I started digging around in my EE by spinning up a container using the image <code class="language-plaintext highlighter-rouge">registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.16</code> with <code class="language-plaintext highlighter-rouge">podman</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman run --rm -it registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.16 /bin/bash
</code></pre></div></div>

<p>When inspecting <code class="language-plaintext highlighter-rouge">/etc/yum.repos.d/redhat.repo</code>, which is the repository configuration file for all repositories provided by a Red Hat Satellite (to which the system needs
to be subscribed to), we can see the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[satellite-client-6-for-rhel-8-x86_64-rpms]
name=Red Hat Satellite Client 6 for RHEL 8 x86_64 (RPMs)
baseurl=https://satellite.example.com/pulp/content//org-core/lce-default-prod/ccv-default-rhel-8/content/dist/layered/rhel8/x86_64/sat-client/6/os
enabled=false
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
gpgcheck=true
metadata_expire=1
sslclientcert=/etc/pki/entitlement-host/3057439186715165628.pem
sslclientkey=/etc/pki/entitlement-host/3057439186715165628-key.pem
sslcacert=/etc/rhsm-host/ca/katello-server-ca.pem
sslverify=true

[org-core_prd-zabbix-zabbix_repo-zabbix-zabbix-6_0-rhel-8]
name=repo-zabbix-zabbix-6_0-rhel-8
baseurl=https://satellite.example.com/pulp/content//org-core/lce-default-prod/ccv-default-rhel-8/custom/prd-zabbix-zabbix/repo-zabbix-zabbix-6_0-rhel-8
enabled=false
gpgkey=https://satellite.example.com/katello/api/v2/repositories/14/gpg_key_content
gpgcheck=true
metadata_expire=1
sslclientcert=/etc/pki/entitlement-host/3057439186715165628.pem
sslclientkey=/etc/pki/entitlement-host/3057439186715165628-key.pem
sslcacert=/etc/rhsm-host/ca/katello-server-ca.pem
sslverify=true

[org-core_prd-elastic-elastic_repo-elastic-elastic-8-el-8]
name=repo-elastic-elastic-8-el-8
baseurl=https://satellite.example.com/pulp/content//org-core/lce-default-prod/ccv-default-rhel-8/custom/prd-elastic-elastic/repo-elastic-elastic-8-el-8
enabled=false
gpgkey=https://satellite.example.com/katello/api/v2/repositories/13/gpg_key_content
gpgcheck=true
metadata_expire=1
sslclientcert=/etc/pki/entitlement-host/3057439186715165628.pem
sslclientkey=/etc/pki/entitlement-host/3057439186715165628-key.pem
sslcacert=/etc/rhsm-host/ca/katello-server-ca.pem
sslverify=true

[rhel-8-for-x86_64-appstream-rpms]
name=Red Hat Enterprise Linux 8 for x86_64 - AppStream (RPMs)
baseurl=https://satellite.example.com/pulp/content//org-core/lce-default-prod/ccv-default-rhel-8/content/dist/rhel8/$releasever/x86_64/appstream/os
enabled=true
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
gpgcheck=true
metadata_expire=1
sslclientcert=/etc/pki/entitlement-host/3057439186715165628.pem
sslclientkey=/etc/pki/entitlement-host/3057439186715165628-key.pem
sslcacert=/etc/rhsm-host/ca/katello-server-ca.pem
sslverify=true

[rhel-8-for-x86_64-baseos-rpms]
name=Red Hat Enterprise Linux 8 for x86_64 - BaseOS (RPMs)
baseurl=https://satellite.example.com/pulp/content//org-core/lce-default-prod/ccv-default-rhel-8/content/dist/rhel8/$releasever/x86_64/baseos/os
enabled=true
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
gpgcheck=true
metadata_expire=1
sslclientcert=/etc/pki/entitlement-host/3057439186715165628.pem
sslclientkey=/etc/pki/entitlement-host/3057439186715165628-key.pem
sslcacert=/etc/rhsm-host/ca/katello-server-ca.pem
sslverify=true
</code></pre></div></div>

<p>According to the above repository configuration file, I should be able to retrieve the <code class="language-plaintext highlighter-rouge">GPG</code> key for the repository <code class="language-plaintext highlighter-rouge">org-core_prd-zabbix-zabbix_repo-zabbix-zabbix-6_0-rhel-8</code>
via the URL <code class="language-plaintext highlighter-rouge">https://satellite.example.com/katello/api/v2/repositories/14/gpg_key_content</code>.</p>

<p>Let’s download it, and parse it with <code class="language-plaintext highlighter-rouge">gpg</code> to check if it actually is a valid <code class="language-plaintext highlighter-rouge">GPG</code> public key:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">bash-4.4#</span><span class="w"> </span>curl <span class="nt">-k</span> https://satellite.example.com/katello/api/v2/repositories/14/gpg_key_content <span class="nt">-o</span> /tmp/zabbix-gpg
<span class="go">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  2938  100  2938    0     0   1438      0  0:00:02  0:00:02 --:--:--  1438
</span><span class="gp">bash-4.4#</span><span class="w"> </span>gpg <span class="nt">--show-keys</span> <span class="nt">--with-fingerprint</span> /tmp/zabbix-gpg  
<span class="go">pub   dsa1024 2012-10-28 [SC]
      FBAB D5FB 2025 5ECA B22E  E194 D13D 58E4 79EA 5ED4
</span><span class="gp">uid                      Zabbix SIA &lt;packager@zabbix.com&gt;</span><span class="w">
</span><span class="go">sub   elg1024 2012-10-28 [E]

pub   rsa2048 2016-07-15 [SC]
      A184 8F53 52D0 22B9 471D  83D0 082A B56B A14F E591
</span><span class="gp">uid                      Zabbix LLC &lt;packager@zabbix.com&gt;</span><span class="w">
</span><span class="go">sub   rsa2048 2016-07-15 [E]
</span></code></pre></div></div>

<p>:information_source: The <code class="language-plaintext highlighter-rouge">-k</code> option of <code class="language-plaintext highlighter-rouge">curl</code> allows for insecure connections to my Satellite. The reason being, that the EE does not trust the certificate authority I have
signed the Satellite’s certificate with. This can, of course, be circumvented by adding the appropriate certificate authority certificates to <code class="language-plaintext highlighter-rouge">/etc/pki/ca-trust/source/anchors</code>
and update the certificate authority database using <code class="language-plaintext highlighter-rouge">update-ca-trust</code>.</p>

<p>That looks good, let’s try to import the downloaded <code class="language-plaintext highlighter-rouge">GPG</code> key with the <code class="language-plaintext highlighter-rouge">rpm</code> command:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">bash-4.4#</span><span class="w"> </span>rpm <span class="nt">--import</span> /etc/pki/rpm-gpg/zabbix-gpg
<span class="gp">bash-4.4#</span><span class="w"> </span><span class="nb">echo</span> <span class="nv">$?</span>
<span class="go">0
</span><span class="gp">bash-4.4#</span><span class="w"> </span>rpm <span class="nt">-q</span> <span class="nt">--queryformat</span> <span class="s2">"%{SUMMARY}</span><span class="se">\n</span><span class="s2">"</span> <span class="si">$(</span>rpm <span class="nt">-q</span> gpg-pubkey<span class="si">)</span>
<span class="gp">gpg(Red Hat, Inc. (release key 2) &lt;security@redhat.com&gt;</span><span class="o">)</span>
<span class="gp">gpg(Red Hat, Inc. (auxiliary key) &lt;security@redhat.com&gt;</span><span class="o">)</span>
<span class="gp">gpg(Zabbix SIA &lt;packager@zabbix.com&gt;</span><span class="o">)</span>
<span class="gp">gpg(Zabbix LLC &lt;packager@zabbix.com&gt;</span><span class="o">)</span>
</code></pre></div></div>

<p>Okay, great, let’s try to install a package from that repository: <code class="language-plaintext highlighter-rouge">zabbix-sender</code></p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">bash-4.4#</span><span class="w"> </span>microdnf <span class="nb">install</span> <span class="nt">--enablerepo</span><span class="o">=</span><span class="k">*</span>zabbix<span class="k">*</span> zabbix-sender
<span class="go">Downloading metadata...
Downloading metadata...
Downloading metadata...
Package                                                                                                                         Repository                                Size
Installing:
 zabbix-sender-6.0.27-release1.el8.x86_64                                                                                       org-core_prd-zabbix-zabbix_repo-zabb     457.5 kB
Transaction Summary:
 Installing:        1 packages
 Reinstalling:      0 packages
 Upgrading:         0 packages
 Obsoleting:        0 packages
 Removing:          0 packages
 Downgrading:       0 packages
Downloading packages...
error: failed to parse public key for /var/cache/yum/metadata/org-core_prd-zabbix-zabbix_repo-zabbix-zabbix-6_0-rhel-8-8-x86_64/gpg_key_content
</span></code></pre></div></div>

<p>Even when downloading the <code class="language-plaintext highlighter-rouge">GPG</code> key and specifying it as file in <code class="language-plaintext highlighter-rouge">/etc/yum.repos.d/redhat.repo</code>, the same error would persist:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">bash-4.4#</span><span class="w"> </span><span class="nb">cat</span> /etc/yum.repos.d/redhat.repo
<span class="go">[..]

[org-core_prd-zabbix-zabbix_repo-zabbix-zabbix-6_0-rhel-8]
name=repo-zabbix-zabbix-6_0-rhel-8
baseurl=https://satellite.example.com/pulp/content//org-core/lce-default-prod/ccv-default-rhel-8/custom/prd-zabbix-zabbix/repo-zabbix-zabbix-6_0-rhel-8
enabled=false
gpgkey=file:///tmp/zabbix-gpg
gpgcheck=true
metadata_expire=1
sslclientcert=/etc/pki/entitlement-host/3057439186715165628.pem
sslclientkey=/etc/pki/entitlement-host/3057439186715165628-key.pem
sslcacert=/etc/rhsm-host/ca/katello-server-ca.pem
sslverify=true

[..]
</span><span class="gp">bash-4.4#</span><span class="w"> </span>microdnf clean all
<span class="go">Complete.
</span><span class="gp">bash-4.4#</span><span class="w"> </span>microdnf <span class="nb">install</span> <span class="nt">--enablerepo</span><span class="o">=</span><span class="k">*</span>zabbix<span class="k">*</span> zabbix-sender
<span class="go">Downloading metadata...
Downloading metadata...
Downloading metadata...
Package                                                                                                                         Repository                                Size
Installing:
 zabbix-sender-6.0.27-release1.el8.x86_64                                                                                       org-core_prd-zabbix-zabbix_repo-zabb     457.5 kB
Transaction Summary:
 Installing:        1 packages
 Reinstalling:      0 packages
 Upgrading:         0 packages
 Obsoleting:        0 packages
 Removing:          0 packages
 Downgrading:       0 packages
Downloading packages...
error: failed to parse public key for /var/cache/yum/metadata/org-core_prd-zabbix-zabbix_repo-zabbix-zabbix-6_0-rhel-8-8-x86_64/gpg_key_content
</span></code></pre></div></div>

<p>I <strong>think</strong> that is because <code class="language-plaintext highlighter-rouge">microdnf</code> updates the contents of <code class="language-plaintext highlighter-rouge">/etc/yum.repos.d/*</code> <em>every time</em> <code class="language-plaintext highlighter-rouge">microdnf</code> is invoked. Let’s see if we can spot the update while watching
the file <code class="language-plaintext highlighter-rouge">/etc/yum.repos.d/redhat.repo</code> in a <code class="language-plaintext highlighter-rouge">tmux</code> session.</p>

<p>First, we need to install <code class="language-plaintext highlighter-rouge">tmux</code> and <code class="language-plaintext highlighter-rouge">procps-ng</code> - the latter provides the <code class="language-plaintext highlighter-rouge">watch</code> command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>microdnf install tmux procps-ng
</code></pre></div></div>

<p>Then create a new <code class="language-plaintext highlighter-rouge">tmux</code> session by running <code class="language-plaintext highlighter-rouge">tmux</code> followed by creating a horizontal split of the current <code class="language-plaintext highlighter-rouge">tmux</code> window using <code class="language-plaintext highlighter-rouge">CTRL</code> + <code class="language-plaintext highlighter-rouge">b</code> <code class="language-plaintext highlighter-rouge">"</code>.</p>

<p>In either of the so-called <code class="language-plaintext highlighter-rouge">panes</code>, first, we’ll update <code class="language-plaintext highlighter-rouge">/etc/yum.repos.d/redhat.repo</code> to specify the <code class="language-plaintext highlighter-rouge">GPG</code> key as local file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[..]

[org-core_prd-zabbix-zabbix_repo-zabbix-zabbix-6_0-rhel-8]
name=repo-zabbix-zabbix-6_0-rhel-8
baseurl=https://satellite.example.com/pulp/content//org-core/lce-default-prod/ccv-default-rhel-8/custom/prd-zabbix-zabbix/repo-zabbix-zabbix-6_0-rhel-8
enabled=false
gpgkey=file:///tmp/zabbix-gpg
gpgcheck=true
metadata_expire=1
sslclientcert=/etc/pki/entitlement-host/3057439186715165628.pem
sslclientkey=/etc/pki/entitlement-host/3057439186715165628-key.pem
sslcacert=/etc/rhsm-host/ca/katello-server-ca.pem
sslverify=true

[..]
</code></pre></div></div>

<p>Next, we’ll create a copy of the file to <code class="language-plaintext highlighter-rouge">/tmp/redhat.repo</code>. We’ll use that together with <code class="language-plaintext highlighter-rouge">diff</code> to find any possible differences:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[root@612c8f7fbb1e runner]#</span><span class="w"> </span><span class="nb">cp</span> /etc/yum.repos.d/redhat.repo /tmp/redhat.repo
<span class="gp">[root@612c8f7fbb1e runner]#</span><span class="w"> </span>diff /etc/yum.repos.d/redhat.repo /tmp/redhat.repo
<span class="gp">[root@612c8f7fbb1e runner]#</span><span class="w">
</span></code></pre></div></div>

<p>The files are, of course, equal at this point.</p>

<p>Let’s run <code class="language-plaintext highlighter-rouge">watch</code> and switch to our other <code class="language-plaintext highlighter-rouge">pane</code> to run <code class="language-plaintext highlighter-rouge">microdnf</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">watch -n1 diff /etc/yum.repos.d/redhat.repo /tmp/redhat.repo
</span></code></pre></div></div>

<p>Next, switch the <code class="language-plaintext highlighter-rouge">pane</code> by using <code class="language-plaintext highlighter-rouge">CTRL</code> + <code class="language-plaintext highlighter-rouge">b</code> <code class="language-plaintext highlighter-rouge">o</code> and try installing the <code class="language-plaintext highlighter-rouge">zabbix-sender</code> package again:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[root@612c8f7fbb1e runner]#</span><span class="w">  </span>microdnf <span class="nb">install</span> <span class="nt">--enablerepo</span><span class="o">=</span><span class="k">*</span>zabbix<span class="k">*</span> zabbix-sender
<span class="go">
[..]

error: failed to parse public key for /var/cache/yum/metadata/org-core_prd-zabbix-zabbix_repo-zabbix-zabbix-6_0-rhel-8-8-x86_64/gpg_key_content
</span></code></pre></div></div>

<p>The outcome is the same - as expected. But now, look at what the other command captured:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">Every 1.0s: diff /etc/yum.repos.d/redhat.repo /tmp/redhat.repo

17c17
&lt; gpgkey=https://satellite.example.com/katello/api/v2/repositories/14/gpg_key_content
---
</span><span class="gp">&gt;</span><span class="w"> </span><span class="nv">gpgkey</span><span class="o">=</span>file:///tmp/zabbix-gpg
</code></pre></div></div>

<p>Immediately at the start of <code class="language-plaintext highlighter-rouge">microdnf</code>, the file content changed and was reverted to the original <code class="language-plaintext highlighter-rouge">gpgkey</code> line.</p>

<p>As I said, I couldn’t figure out a way to make this work with <code class="language-plaintext highlighter-rouge">microdnf</code>. :pensive:</p>

<h4 id="solutions-to-the-problem">Solutions to the problem</h4>

<p>So what’s the solution to the problem then, I hear you ask. Well, there are two ways we can make this work:</p>

<ol>
  <li>Disable <code class="language-plaintext highlighter-rouge">GPG</code> key checking for that specific repository</li>
  <li>Think a little outside the box</li>
</ol>

<p>I dislike the first option, as disabling <code class="language-plaintext highlighter-rouge">GPG</code> key checking is <em>never</em> a good idea - plus I like the idea of the second option (bear with me, we’ll get to it in a minute)
:sunglasses:.</p>

<p>Let’s briefly look into disabling <code class="language-plaintext highlighter-rouge">GPG</code> key checking for a specific repository. We’ll utilize the <code class="language-plaintext highlighter-rouge">--setopt</code> parameter of <code class="language-plaintext highlighter-rouge">microdnf</code> to set the option <code class="language-plaintext highlighter-rouge">gpgcheck</code> to <code class="language-plaintext highlighter-rouge">0</code> for
the specific repository that fails <code class="language-plaintext highlighter-rouge">GPG</code> validation: <code class="language-plaintext highlighter-rouge">org-core_prd-zabbix-zabbix_repo-zabbix-zabbix-6_0-rhel-8</code>.</p>

<p>This will look something like this:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[root@612c8f7fbb1e runner]#</span><span class="w"> </span>microdnf <span class="nb">install </span>zabbix-sender <span class="nt">--enablerepo</span><span class="o">=</span><span class="k">*</span>zabbix<span class="k">*</span> <span class="nt">--setopt</span> org-core_prd-zabbix-zabbix_repo-zabbix-zabbix-6_0-rhel-8.gpgcheck<span class="o">=</span>0
<span class="go">Downloading metadata...
Downloading metadata...
Downloading metadata...
Package                                                                                                                         Repository                            Size
Installing:
 zabbix-sender-6.0.27-release1.el8.x86_64                                                                                       org-core_prd-zabbix-zabbix_repo-zabb  457.5 kB
Transaction Summary:
 Installing:        1 packages
 Reinstalling:      0 packages
 Upgrading:         0 packages
 Obsoleting:        0 packages
 Removing:          0 packages
 Downgrading:       0 packages
Running transaction test...
</span><span class="gp">Installing: zabbix-sender;</span>6.0.27-release1.el8<span class="p">;</span>x86_64<span class="p">;</span>org-core_prd-zabbix-zabbix_repo-zabbix-zabbix-6_0-rhel-8
<span class="go">Complete.
</span></code></pre></div></div>

<p>Perfect, <code class="language-plaintext highlighter-rouge">zabbix-sender</code> is installed.</p>

<p>This can be set during EE build with the environment variable <code class="language-plaintext highlighter-rouge">PKGMGR_OPTS</code>. It’s exactly the same as described in the
<a href="#enabling-and-disabling-repositories">Enabling and disabling repositories</a> section.</p>

<p>Again, I dislike the option of disabling <code class="language-plaintext highlighter-rouge">GPG</code> validation for security reasons.</p>

<p>So, what’s the other option then?</p>

<p>While playing around in the EE, I thought: What about I try installing the package with <code class="language-plaintext highlighter-rouge">dnf</code> instead of <code class="language-plaintext highlighter-rouge">microdnf</code>?!</p>

<p>As it turns out: This seems to work perfectly fine. No disabling of <code class="language-plaintext highlighter-rouge">GPG</code> validation or anything fancy required - just a <code class="language-plaintext highlighter-rouge">microdnf install -y dnf</code> followed by
<code class="language-plaintext highlighter-rouge">dnf install -y zabbix-sender</code>.</p>

<p>Let’s see if we can implement that into an EE definition.</p>

<p>We <em>need</em> to change two things:</p>

<ol>
  <li>Adjust the option <code class="language-plaintext highlighter-rouge">package_manager_path</code> to use <code class="language-plaintext highlighter-rouge">dnf</code> instead of <code class="language-plaintext highlighter-rouge">microdnf</code> - or leave it in fact on it’s default value, which will use <code class="language-plaintext highlighter-rouge">dnf</code></li>
  <li>Prepend a step to each build step that utilizes <code class="language-plaintext highlighter-rouge">dnf</code>, to install <code class="language-plaintext highlighter-rouge">dnf</code>. That is to ensure <code class="language-plaintext highlighter-rouge">dnf</code> is available</li>
  <li>Optionally, append a step after each build step that utilizes <code class="language-plaintext highlighter-rouge">dnf</code> to remove <code class="language-plaintext highlighter-rouge">dnf</code> again, as we do not need it anymore. This saves a little space :slightly_smiling_face:</li>
</ol>

<p>Based on the above <a href="#the-complete-complex-execution-environment-making-use-of-advanced-yaml-syntax">EE definition</a>, and adding additionally the installation of <code class="language-plaintext highlighter-rouge">zabbix-sender</code>
from a custom 3rd-party repository, as well as incorporating the above steps, an example EE definition can look something like this:</p>

<p>:warning: Please read the notes after the EE definition example. Removing <code class="language-plaintext highlighter-rouge">dnf</code> is not as straight forward as one would imagine and is certainly not without risk. I am just
showcasing that it <em>can</em> be done - but it is certainly nothing I’d recommend doing.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">version</span><span class="pi">:</span> <span class="m">3</span>

<span class="na">images</span><span class="pi">:</span>
  <span class="na">base_image</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.16'</span>

<span class="na">dependencies</span><span class="pi">:</span>
  <span class="na">galaxy</span><span class="pi">:</span> <span class="s1">'</span><span class="s">requirements.yml'</span>
  <span class="na">python</span><span class="pi">:</span> <span class="s1">'</span><span class="s">requirements.txt'</span>
  <span class="na">system</span><span class="pi">:</span> <span class="s1">'</span><span class="s">bindep.txt'</span>

<span class="na">options</span><span class="pi">:</span>
  <span class="na">package_manager_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/usr/bin/dnf'</span>

<span class="na">additional_build_files</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ansible.cfg'</span>
      <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">configs/'</span>

    <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ca.cert.pem'</span>
      <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">certs/'</span>

    <span class="pi">-</span> <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">intermediate.cert.pem'</span>
      <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">certs/'</span>

<span class="na">additional_build_steps</span><span class="pi">:</span>
  <span class="na">prepend_base</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="nl">&amp;copy-certs</span> <span class="pi">|-</span>
        <span class="s">COPY _build/certs/* /etc/pki/ca-trust/source/anchors/</span>
        <span class="s">RUN update-ca-trust</span>

    <span class="pi">-</span> <span class="nl">&amp;system-proxy</span> <span class="pi">|-</span>
        <span class="s">ENV https_proxy=http://lab-development-rhel8.core.rh.scheib.me:3128</span>
        <span class="s">ENV http_proxy=http://lab-development-rhel8.core.rh.scheib.me:3128</span>
    <span class="pi">-</span> <span class="nl">&amp;pip</span> <span class="pi">|-</span>
        <span class="s">RUN pip3 config --user set global.index-url http://lab-development-rhel8.core.rh.scheib.me/simple</span>
        <span class="s">RUN pip3 config --user set global.trusted-host lab-development-rhel8.core.rh.scheib.me</span>
        <span class="s">RUN pip3 config --user set global.proxy http://lab-development-rhel8.core.rh.scheib.me:3128</span>

  <span class="na">prepend_galaxy</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="nv">*copy-certs</span>
    <span class="pi">-</span> <span class="nv">*system-proxy</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">COPY</span><span class="nv"> </span><span class="s">_build/configs/ansible.cfg</span><span class="nv"> </span><span class="s">/home/runner/.ansible.cfg'</span>

  <span class="na">prepend_builder</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="nv">*copy-certs</span>
    <span class="pi">-</span> <span class="nv">*system-proxy</span>
    <span class="pi">-</span> <span class="nv">*pip</span>
    <span class="pi">-</span> <span class="nl">&amp;enable-ubi</span> <span class="pi">|-</span>
       <span class="s">ENV PKGMGR_OPTS="--nodocs --setopt=install_weak_deps=0 --disablerepo=* --enablerepo=ubi-8-*"</span>

    <span class="pi">-</span> <span class="nl">&amp;install-dnf</span> <span class="pi">|-</span>
        <span class="s">RUN rpm -qa | sort &gt; /tmp/before</span>
        <span class="s">RUN microdnf install -y dnf</span>
        <span class="s">RUN rpm -qa | sort &gt; /tmp/after</span>

    <span class="pi">-</span> <span class="nl">&amp;manage-repos</span> <span class="pi">&gt;-</span>
       <span class="s">ENV PKGMGR_OPTS="--nodocs --setopt=install_weak_deps=0 --disablerepo=* --enablerepo=ubi-8-* --enablerepo=*zabbix*"</span>

  <span class="na">append_builder</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="nl">&amp;remove-dnf</span> <span class="pi">|-</span>
        <span class="s">RUN dnf clean all</span>
        <span class="s">RUN dnf --setopt=protected_packages="" --setopt=protect_running_kernel=false \</span>
            <span class="s">remove -y $(comm -13 /tmp/before /tmp/after)</span>

    <span class="pi">-</span> <span class="nl">&amp;clean-dnf</span> <span class="pi">|-</span>
        <span class="s">RUN rm -rf /tmp/before /tmp/after</span>
        <span class="s">RUN rm -rf /var/cache/dnf /var/cache/yum</span>
        <span class="s">RUN rm -rf /var/lib/dnf/history.sqlite /var/lib/dnf/history.sqlite-shm /var/lib/dnf/history.sqlite-wal</span>
        <span class="s">RUN rm -rf /var/log/dnf.librepo.log /var/log/dnf.log /var/log/dnf.rpm.log /var/log/hawkey.log</span>

  <span class="na">prepend_final</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="nv">*copy-certs</span>
    <span class="pi">-</span> <span class="nv">*system-proxy</span>
    <span class="pi">-</span> <span class="nv">*pip</span>
    <span class="pi">-</span> <span class="nv">*enable-ubi</span>
    <span class="pi">-</span> <span class="nv">*install-dnf</span>
    <span class="pi">-</span> <span class="nv">*manage-repos</span>

  <span class="na">append_final</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="nv">*remove-dnf</span>
    <span class="pi">-</span> <span class="nv">*clean-dnf</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>:information_source: The file <code class="language-plaintext highlighter-rouge">bindep.txt</code> merely contains <code class="language-plaintext highlighter-rouge">zabbix-sender</code> as package.</p>

<p>You might notice that in the above EE definition we do some ‘fancy’ things. Let me break them down one by one:</p>

<ol>
  <li>
    <p>Removing <code class="language-plaintext highlighter-rouge">dnf</code> again after we are done using it</p>

    <p>Unfortunately, <code class="language-plaintext highlighter-rouge">microdnf</code> <a href="https://github.com/rpm-software-management/microdnf/issues/45">does not support</a> something like the <code class="language-plaintext highlighter-rouge">dnf</code> option <code class="language-plaintext highlighter-rouge">autoremove</code>.
 For that reason we need to save the installed packages <em>before</em> we install <code class="language-plaintext highlighter-rouge">dnf</code> and <em>after</em> we installed <code class="language-plaintext highlighter-rouge">dnf</code>. This allows us to compare what was installed
 as dependencies with <code class="language-plaintext highlighter-rouge">dnf</code>, so that we are able to remove those dependencies later again.</p>

    <p>By default, both <code class="language-plaintext highlighter-rouge">dnf</code> and <code class="language-plaintext highlighter-rouge">microdnf</code> will prevent us from removing <code class="language-plaintext highlighter-rouge">dnf</code>, as it is considered a
 <a href="https://rpm-software-management.github.io/dnf-plugins-core/protected_packages.html"><code class="language-plaintext highlighter-rouge">protected</code> package</a> - and rightfully so. According to the
 <a href="https://rpm-software-management.github.io/dnf-plugins-core/protected_packages.html">documentation</a> of the <code class="language-plaintext highlighter-rouge">protected_packages</code> <code class="language-plaintext highlighter-rouge">dnf</code> plugin, disabling the plugin <em>should</em>
 work by providing <code class="language-plaintext highlighter-rouge">--disableplugin=protected_packages</code> to <code class="language-plaintext highlighter-rouge">dnf</code>, but I couldn’t make it work.</p>

    <p>Instead, we set the <code class="language-plaintext highlighter-rouge">protected_packages</code> to an empty list. Further, the other required option is <code class="language-plaintext highlighter-rouge">protect_running_kernel=false</code>, otherwise we would not be able
 to remove <code class="language-plaintext highlighter-rouge">dnf</code>.</p>

    <p>Finally, we pass the the differences of <code class="language-plaintext highlighter-rouge">/tmp/before</code> and <code class="language-plaintext highlighter-rouge">/tmp/after</code> using <a href="https://www.gnu.org/software/coreutils/manual/html_node/comm-invocation.html"><code class="language-plaintext highlighter-rouge">comm</code></a> to the
 <code class="language-plaintext highlighter-rouge">dnf</code> remove command to remove the leftover dependencies.</p>

    <p>:warning: Removing <code class="language-plaintext highlighter-rouge">dnf</code> is <strong>dangerous</strong>. We risk breaking other packages’ dependencies when forcefully removing the dependencies of <code class="language-plaintext highlighter-rouge">dnf</code>. I recommend to leaving <code class="language-plaintext highlighter-rouge">dnf</code> and
 its dependencies installed, although this results in a <em>slightly</em> larger image.</p>
  </li>
  <li>
    <p>Removing left over log files</p>

    <p>Additionally to removing <code class="language-plaintext highlighter-rouge">dnf</code>, we should clean up all log files of <code class="language-plaintext highlighter-rouge">dnf</code> and <code class="language-plaintext highlighter-rouge">microdnf</code>. This is usually done by default, but since we are appending something to the end of
  a build stage and are invoking <code class="language-plaintext highlighter-rouge">microdnf</code> again, we should once more ensure that unnecessary log files are removed.</p>

    <p>Finally, we remove the two temporary files we needed to compare the before and after <code class="language-plaintext highlighter-rouge">RPMs</code>.</p>
  </li>
</ol>

<p>:warning: <strong>Another word of caution</strong>: Removing protected packages is something I <strong>cannot</strong> recommend to do, as it might have unexpected consequences. I don’t know of any at
the moment, but I imagine there is a risk of breaking <em>something</em>. After all, the size difference before and after installing <code class="language-plaintext highlighter-rouge">dnf</code> was roughly 80 megabytes. Given that the
image is already roughly ~900+ megabytes big, the additional 80 will not make a big difference, in my opinion.</p>

<p>Of course, you can build your very own <a href="#using-custom-base-images">base image</a> and incorporate the installation of <code class="language-plaintext highlighter-rouge">dnf</code> in the base image. This would remove the need of
installing and removing <code class="language-plaintext highlighter-rouge">dnf</code> at every build stage where packages are installed.</p>

<p>You could add the installation to your base image and the removal as the very last step in your actual EE. That way you’d still save some space.</p>

<p>But again: <strong>I strongly recommend not removing <code class="language-plaintext highlighter-rouge">dnf</code> again, as it can possibly break <em>something</em>.</strong></p>

<h2 id="conclusion">Conclusion</h2>

<p>I <em>think</em> I am done. Honestly, I kind of lost the overview with all the topics - it turned out to be longer than I anticipated :rofl:.</p>

<p>I hope you learned something new :slightly_smiling_face:. Please let me know if you find anything to be incorrect!</p>

<p>If you have any questions, just leave a comment and I might be able to incorporate your use-case in this post.</p>

<p>.. until next time,</p>

<p>Steffen</p>

<h2 id="change-log">Change log</h2>

<h3 id="2024-04-25">2024-04-25</h3>

<ul>
  <li>Adding a section about <a href="#mounting-certificates-inside-the-ee-while-using-ansible-navigator">mounting certificates into an <code class="language-plaintext highlighter-rouge">EE</code></a>. Thanks to my colleague
<a href="https://github.com/tuxpreacher">Jason Breitweg</a> for discussing this with me!</li>
</ul>

<h3 id="2024-04-01">2024-04-01</h3>

<ul>
  <li>Adding a section about <a href="#enabling-non-red-hat-repositories">enabling custom repositories</a></li>
  <li>Spelling fixes</li>
</ul>

<h3 id="2024-03-12">2024-03-12</h3>

<ul>
  <li>Fixing the initial change log date</li>
</ul>

<h3 id="2024-03-11">2024-03-11</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">markdownlint</code> fixes</li>
  <li>Spelling fixes</li>
</ul>

<h3 id="2024-03-10">2024-03-10</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">markdownlint</code> fixes</li>
</ul>

<h3 id="2024-03-02">2024-03-02</h3>

<ul>
  <li>Adding Section about custom <code class="language-plaintext highlighter-rouge">base</code> images</li>
  <li>Adding <code class="language-plaintext highlighter-rouge">SHA</code> digest image “pinning” -
Thanks to my colleague <a href="https://github.com/michaelalang">Michaela Lang</a> for pointing this out!</li>
  <li>Clarification about reproducibility with regards to Ansible content, Python and system packages -
Thanks to my colleague <a href="https://github.com/michaelalang">Michaela Lang</a> for pointing this out!</li>
</ul>]]></content><author><name>Steffen Scheib</name></author><summary type="html"><![CDATA[Preface]]></summary></entry><entry><title type="html">Publishing roles to Ansible Galaxy - with or without GitHub Actions</title><link href="https://blog.scheib.me/2023/11/26/ansible-galaxy-publish-roles.html" rel="alternate" type="text/html" title="Publishing roles to Ansible Galaxy - with or without GitHub Actions" /><published>2023-11-26T00:00:00+00:00</published><updated>2024-03-10T00:00:00+00:00</updated><id>https://blog.scheib.me/2023/11/26/ansible-galaxy-publish-roles</id><content type="html" xml:base="https://blog.scheib.me/2023/11/26/ansible-galaxy-publish-roles.html"><![CDATA[<h2 id="preface">Preface</h2>

<p>First off, this is going to be a small blog post. I personally found it too difficult to figure out how to publish my roles to
<a href="https://galaxy.ansible.com/ui/">Ansible Galaxy</a>, that’s why I didn’t used do it for my roles right from the start.</p>

<p>Instead I simply published my roles on GitHub. One downside was, the roles were
not as easy to discover as if they were published on Ansible Galaxy - the place where people usually look for existing roles.</p>

<p>A few weeks back, I was asked on LinkedIn whether I could publish my roles on Ansible Galaxy, so that more users could discover them and use them - and maybe contribute some
features to them :slightly_smiling_face:. That’s when I started looking into this again and I have to admit, that I struggled quite a bit until I finally figured out how
to publish the roles.</p>

<p>At that time I thought it was only me who was not able to figure it out, but quite recently another person reached out to me on LinkedIn asking me whether I could
help getting some roles published to Ansible Galaxy.</p>

<p>So I decided to write this small blog post to provide a little bit of guidance. Once you know where to look, it really is easy.</p>

<h2 id="requirements">Requirements</h2>

<p>What you’ll need to follow along is the following:</p>

<ol>
  <li>A GitHub account. With the GitHub account you’ll be able to login to Ansible Galaxy. To my knowledge there is no other way (anymore) to register or log into Ansible Galaxy</li>
  <li>A role you’d like to publish. The role needs to be stored in a git repository that is publicly accessible on GitHub. Anything other than GitHub does not work (to my knowledge)</li>
  <li>
    <p>An Ansible Galaxy API token. You’ll find it by visiting <a href="https://galaxy.ansible.com/">Ansible Galaxy</a>, then login via GitHub, click on <code class="language-plaintext highlighter-rouge">Collections</code> on the left hand side,
followed by <code class="language-plaintext highlighter-rouge">API token</code>. Finally, click on <code class="language-plaintext highlighter-rouge">Load token</code></p>

    <p>:warning: Be aware that loading a new token, invalidates your old token (if you had a token previously)</p>
  </li>
</ol>

<p>Please be aware, that the role needs to follow the <a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse_roles.html#role-directory-structure">official role structure</a>.</p>

<p>Further, you’ll need the role content to be at the top level of your git repository - at least I couldn’t figure out a different way. What I mean by that is, that you
cannot have a <code class="language-plaintext highlighter-rouge">roles/</code> directory inside your git repository and publish any role that is inside <code class="language-plaintext highlighter-rouge">roles/</code>, but instead the role structure needs to be at the top level.</p>

<p>If you struggle to understand what I mean, please look at one of my roles (e.g.
<a href="https://github.com/sscheib/ansible-role-rhel_iso_kickstart">ansible-role-rhel_iso_kickstart</a>) to understand the role structure I am referring to.</p>

<h2 id="publishing-roles-using-the-command-line">Publishing roles using the command line</h2>

<p>Once you meet all the requirements, let’s look into publishing your role using the command line first.</p>

<p>For the purpose of this blog, I have create a <a href="https://github.com/sscheib/ansible-role-dummy">sample/dummy role</a> which merely prints a given message via
<code class="language-plaintext highlighter-rouge">ansible.builtin.debug</code>. As the blog post’s purpose is to provide a little help when publishing roles to Ansible Galaxy, the complexity of the role doesn’t matter at all.</p>

<p>Once you have written your role, please lint it using Ansible Lint, as described in my blog post
<a href="https://blog.scheib.me/2023/11/22/github-actions-ansible.html">Getting started with testing Ansible code using Ansible Lint - with or without GitHub Actions</a>. Ansible
Galaxy will perform some form of linting, but I don’t know which profile is getting applied.</p>

<p>Let’s first look at my role structure:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>tree ansible-role-dummy/
ansible-role-dummy/
├── defaults
│   └── main.yml
├── LICENSE
├── meta
│   └── main.yml
├── README.md
├── tasks
│   └── main.yml
└── vars
    └── main.yml

4 directories, 6 files
</code></pre></div></div>

<p>As you can see it is a very basic role without any bells and whistles.</p>

<p>With that being said, importing the role is actually pretty straight forward. We need to run the command <code class="language-plaintext highlighter-rouge">ansible-galaxy role import</code> and provide some command line
switches and values.</p>

<p>What the <code class="language-plaintext highlighter-rouge">ansible-galaxy role import</code> command needs, is the following:</p>

<ol>
  <li>The Galaxy server to use. In our case that’s <a href="https://galaxy.ansible.com"><code class="language-plaintext highlighter-rouge">https://galaxy.ansible.com</code></a>. The corresponding command line argument is <code class="language-plaintext highlighter-rouge">--server</code> or <code class="language-plaintext highlighter-rouge">-s</code></li>
  <li>The aforementioned token you generated on <a href="https://galaxy.ansible.com"><code class="language-plaintext highlighter-rouge">https://galaxy.ansible.com</code></a>. The corresponding command line argument is <code class="language-plaintext highlighter-rouge">--token</code> or <code class="language-plaintext highlighter-rouge">--api-key</code></li>
  <li>Your GitHub username. This is a positional argument without any dedicated command line switch.</li>
  <li>Your repository name. This is also a positional argument without any dedicated command line switch.</li>
  <li>By default the repository name will be the role name. If you want a different role name to be used you need to have set that in <code class="language-plaintext highlighter-rouge">meta/main.yml</code> and additionally pass it to
the <code class="language-plaintext highlighter-rouge">ansible-galaxy</code> command</li>
  <li>Also by default, the <code class="language-plaintext highlighter-rouge">master</code> branch is going to get used of your GitHub repository. I’ll use <code class="language-plaintext highlighter-rouge">main</code> as my default branch, therefore I need to pass the command line
argument <code class="language-plaintext highlighter-rouge">--branch</code> to it and provide it with the value of <code class="language-plaintext highlighter-rouge">main</code></li>
</ol>

<p>Additionally, as said, your role needs to be pushed to your GitHub repository and the repository needs to be publicly accessible.</p>

<p>The <code class="language-plaintext highlighter-rouge">ansible-galaxy</code> command will look like following:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-galaxy role import <span class="nt">--branch</span> &lt;YOUR_BRANCH&gt; <span class="nt">--role-name</span> &lt;YOUR_ROLE_NAME&gt; <span class="nt">--server</span> https://galaxy.ansible.com <span class="nt">--token</span> &lt;YOUR_TOKEN&gt; &lt;YOUR_GITHUB_USERNAME&gt; &lt;YOUR_GITHUB_REPOSITORY_NAME&gt;
</code></pre></div></div>

<p>:information_source: <code class="language-plaintext highlighter-rouge">&lt;YOUR_GITHUB_REPOSITORY_NAME&gt;</code> really refers to the <strong>name</strong> of the repository, not the URL you’d use to pull down your code.</p>

<p>To import my role <code class="language-plaintext highlighter-rouge">dummy</code> from my GitHub repository <a href="https://github.com/sscheib/ansible-role-dummy"><code class="language-plaintext highlighter-rouge">ansible-role-dummy</code></a>, with my GitHub username <code class="language-plaintext highlighter-rouge">sscheib</code>, I need to run
the following command:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-galaxy role import <span class="nt">--branch</span> main <span class="nt">--role-name</span> dummy <span class="nt">--server</span> https://galaxy.ansible.com <span class="nt">--token</span> MY_TOKEN sscheib ansible-role-dummy
</code></pre></div></div>

<p>The import process looks like the following:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-galaxy role import <span class="nt">--branch</span> main <span class="nt">--role-name</span> dummy <span class="nt">--server</span> https://galaxy.ansible.com <span class="nt">--token</span> e4a4811672a51e064bb5fc97290b5d0a92f9094d sscheib ansible-role-dummy
Successfully submitted import request 2056392558890447847457884111007500265
Starting import: <span class="nv">task_id</span><span class="o">=</span>2056392558890447847457884111007500265, <span class="nv">pulp_id</span><span class="o">=</span>018c0bfb-20c0-7d1a-9559-11f84021c7e9

<span class="o">====</span> PARAMETERS <span class="o">====</span>
importer username: sscheib
matched user: sscheib <span class="nb">id</span>:XXXXX
github_user: sscheib
github_repo: ansible-role-dummy
github_reference: main
alternate_role_name: dummy

<span class="o">====</span> CHECK FOR MATCHING ROLE<span class="o">(</span>S<span class="o">)</span> <span class="o">====</span>
user:sscheib repo:ansible-role-dummy did not match any existing roles

<span class="o">=====</span> CLONING REPO <span class="o">=====</span>
cloning https://github.com/sscheib/ansible-role-dummy ...

<span class="o">=====</span> GIT ATTRIBUTES <span class="o">=====</span>
github_reference<span class="o">(</span>branch<span class="o">)</span>: main
github_commit: b689e1ee5c8c165ceb0531b7560f234b064fd443
github_commit_message: Initial commit
github_commit_date: 2023-11-26T15:09:54+01:00

<span class="o">=====</span> LOADING ROLE <span class="o">=====</span>
Importing with galaxy-importer 0.4.16
Determined role name to be dummy
Linting role dummy via ansible-lint...
...ansible-lint run <span class="nb">complete
</span>Legacy role loading <span class="nb">complete</span>

<span class="o">=====</span> PROCESSING LOADER RESULTS <span class="o">====</span>
enumerated role name dummy
created new role <span class="nb">id</span>:37383 sscheib.dummy

<span class="o">=====</span> COMPUTING ROLE VERSIONS <span class="o">====</span>

<span class="o">====</span> SAVING ROLE <span class="o">====</span>

Import completed
</code></pre></div></div>

<p>Once that’s completed successfully, you can now login to <a href="https://galaxy.ansible.com"><code class="language-plaintext highlighter-rouge">https://galaxy.ansible.com</code></a> and browse to your profile and see the imported role.
In my case, you can find it on my <a href="https://galaxy.ansible.com/ui/standalone/roles/sscheib/dummy/">Ansible Galaxy profile</a>.</p>

<h3 id="updating-a-role">Updating a role</h3>

<p>I intentionally did not fully adjust the <code class="language-plaintext highlighter-rouge">README.md</code> which I copied from one of my other roles, so I’ll be able to showcase what updating a role looks like.</p>

<p>First, I went ahead and edited my <code class="language-plaintext highlighter-rouge">README.md</code> file, as can be seen by the
<a href="https://github.com/sscheib/ansible-role-dummy/commit/26e6b2f5396eaf4a9d73682ba657fa8ef5340fd1">git commit</a> I have performed. I basically removed a bunch of lines,
which I ‘forgot’ to remove earlier.</p>

<p>Once I pushed the code to GitHub, I can now trigger an import of the same role again:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-galaxy role import <span class="nt">--branch</span> main <span class="nt">--role-name</span> dummy <span class="nt">--server</span> https://galaxy.ansible.com <span class="nt">--token</span> MY_TOKEN sscheib ansible-role-dummy
Successfully submitted import request 2056399856190313650539110125029237695
Starting import: <span class="nv">task_id</span><span class="o">=</span>2056399856190313650539110125029237695, <span class="nv">pulp_id</span><span class="o">=</span>018c0c57-3b99-762f-ad6b-85509cb723bf

<span class="o">====</span> PARAMETERS <span class="o">====</span>
importer username: sscheib
matched user: sscheib <span class="nb">id</span>:XXXXX
github_user: sscheib
github_repo: ansible-role-dummy
github_reference: main
alternate_role_name: dummy

<span class="o">====</span> CHECK FOR MATCHING ROLE<span class="o">(</span>S<span class="o">)</span> <span class="o">====</span>
user:sscheib repo:ansible-role-dummy matched existing role sscheib.dummy <span class="nb">id</span>:37383

<span class="o">=====</span> CLONING REPO <span class="o">=====</span>
cloning https://github.com/sscheib/ansible-role-dummy ...

<span class="o">=====</span> GIT ATTRIBUTES <span class="o">=====</span>
github_reference<span class="o">(</span>branch<span class="o">)</span>: main
github_commit: 26e6b2f5396eaf4a9d73682ba657fa8ef5340fd1
github_commit_message: README.md
github_commit_date: 2023-11-26T16:52:39+01:00

<span class="o">=====</span> LOADING ROLE <span class="o">=====</span>
Importing with galaxy-importer 0.4.16
Determined role name to be dummy
Linting role dummy via ansible-lint...
...ansible-lint run <span class="nb">complete
</span>Legacy role loading <span class="nb">complete</span>

<span class="o">=====</span> PROCESSING LOADER RESULTS <span class="o">====</span>
enumerated role name dummy

<span class="o">=====</span> COMPUTING ROLE VERSIONS <span class="o">====</span>

<span class="o">====</span> SAVING ROLE <span class="o">====</span>

Import completed
</code></pre></div></div>

<p>This time the output looks a little different, as it found an existing role (which we pushed earlier) and now only updates it.</p>

<h3 id="tagging-releases">Tagging releases</h3>

<p>The last thing to do is to create a new <a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging"><code class="language-plaintext highlighter-rouge">git tag</code></a> to have a proper version on the role in Ansible Galaxy.</p>

<p>This can easily be done via <code class="language-plaintext highlighter-rouge">git tag v1.0.1</code> (of course substitute the version with yours) and by pushing the tag to GitHub using <code class="language-plaintext highlighter-rouge">git push origin v1.0.1</code> (again, please
substitute the version with yours).</p>

<p>This will looks something like this:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git tag v1.0.1
<span class="nv">$ </span>git push origin v1.0.1
Total 0 <span class="o">(</span>delta 0<span class="o">)</span>, reused 0 <span class="o">(</span>delta 0<span class="o">)</span>, pack-reused 0
To github.com:sscheib/ansible-role-dummy.git
 <span class="k">*</span> <span class="o">[</span>new tag]         v1.0.1 -&gt; v1.0.1
</code></pre></div></div>

<p>Perfect. We can list the tags using <code class="language-plaintext highlighter-rouge">git tag</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git tag
v1.0.1
</code></pre></div></div>

<p>Finally, we import the role once again:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-galaxy role import <span class="nt">--branch</span> main <span class="nt">--role-name</span> dummy <span class="nt">--server</span> https://galaxy.ansible.com <span class="nt">--token</span> MY_TOKEN sscheib ansible-role-dummy
Successfully submitted import request 2056400027670397563943177324356333381
Starting import: <span class="nv">task_id</span><span class="o">=</span>2056400027670397563943177324356333381, <span class="nv">pulp_id</span><span class="o">=</span>018c0c59-65ae-7667-85db-e266b7826f45

<span class="o">====</span> PARAMETERS <span class="o">====</span>
importer username: sscheib
matched user: sscheib <span class="nb">id</span>:XXXXX
github_user: sscheib
github_repo: ansible-role-dummy
github_reference: main
alternate_role_name: dummy

<span class="o">====</span> CHECK FOR MATCHING ROLE<span class="o">(</span>S<span class="o">)</span> <span class="o">====</span>
user:sscheib repo:ansible-role-dummy matched existing role sscheib.dummy <span class="nb">id</span>:37383

<span class="o">=====</span> CLONING REPO <span class="o">=====</span>
cloning https://github.com/sscheib/ansible-role-dummy ...

<span class="o">=====</span> GIT ATTRIBUTES <span class="o">=====</span>
github_reference<span class="o">(</span>branch<span class="o">)</span>: main
github_commit: 26e6b2f5396eaf4a9d73682ba657fa8ef5340fd1
github_commit_message: README.md
github_commit_date: 2023-11-26T16:52:39+01:00

<span class="o">=====</span> LOADING ROLE <span class="o">=====</span>
Importing with galaxy-importer 0.4.16
Determined role name to be dummy
Linting role dummy via ansible-lint...
...ansible-lint run <span class="nb">complete
</span>Legacy role loading <span class="nb">complete</span>

<span class="o">=====</span> PROCESSING LOADER RESULTS <span class="o">====</span>
enumerated role name dummy

<span class="o">=====</span> COMPUTING ROLE VERSIONS <span class="o">====</span>
adding new version from tag: v1.0.1
tag: v1.0.1 version: 1.0.1

<span class="o">====</span> SAVING ROLE <span class="o">====</span>
</code></pre></div></div>

<p>This time the output looks again a little different, please pay attention to the following from the above output:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>..]
<span class="o">=====</span> COMPUTING ROLE VERSIONS <span class="o">====</span>
adding new version from tag: v1.0.1
tag: v1.0.1 version: 1.0.1
<span class="o">[</span>..]
</code></pre></div></div>

<p>Browsing now to my role on <a href="https://galaxy.ansible.com/ui/standalone/roles/sscheib/dummy/">Ansible Galaxy</a> I can see that indeed the current version is labeled as <code class="language-plaintext highlighter-rouge">v1.0.1</code>.</p>

<p>Mission accomplished :sunglasses:.</p>

<h2 id="publishing-roles-using-github-actions">Publishing roles using GitHub Actions</h2>

<p>Lastly, I’d like to show you an automated way of publishing your roles to Ansible Galaxy by using <a href="https://github.com/features/actions">GitHub Actions</a>.</p>

<p>As in my <a href="https://blog.scheib.me/2023/11/22/github-actions-ansible.html#ansible-lint-with-github-actions">other blog post about Ansible Lint</a>, setting up a GitHub Action is
super easy. I am using <a href="https://github.com/robertdebock"><code class="language-plaintext highlighter-rouge">@robertdebock's</code></a> GitHub Action <a href="https://github.com/robertdebock/galaxy-action"><code class="language-plaintext highlighter-rouge">galaxy-action</code></a>, which takes care
of publishing a role to Ansible Galaxy.</p>

<p>For this, we need two things:</p>

<ol>
  <li>The Ansible Galaxy token</li>
  <li>A GitHub Action workflow definition file</li>
</ol>

<p>Let’s first create the workflow definition file.
For that we need to create a directory path for the Github workflows within your repository’s root directory via:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> .github/workflows
</code></pre></div></div>

<p>Next, simply place the workflow configuration file in there. I named mine <code class="language-plaintext highlighter-rouge">ansible-galaxy.yml</code> (but you can choose any name) and it contains the following:</p>

<!-- markdownlint-disable MD003 MD022 -->

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="nn">---</span>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Publish</span><span class="nv"> </span><span class="s">latest</span><span class="nv"> </span><span class="s">release</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">Ansible</span><span class="nv"> </span><span class="s">Galaxy'</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">main'</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span> <span class="pi">{}</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Publish</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">Ansible</span><span class="nv"> </span><span class="s">Galaxy'</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ubuntu-latest'</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">checkout'</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s1">'</span><span class="s">actions/checkout@v2'</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">galaxy'</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s1">'</span><span class="s">robertdebock/galaxy-action@1.2.0'</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">galaxy_api_key</span><span class="pi">:</span> <span class="s1">'</span><span class="s">${{</span><span class="nv"> </span><span class="s">secrets.galaxy_api_key</span><span class="nv"> </span><span class="s">}}'</span>
          <span class="na">git_branch</span><span class="pi">:</span> <span class="s1">'</span><span class="s">main'</span>
<span class="nn">...</span></code></pre></figure>

<!-- markdownlint-enable MD003 MD022 -->

<p>The above workflow will run on any push or merge to the <code class="language-plaintext highlighter-rouge">main</code> branch and will publish the latest code in the branch <code class="language-plaintext highlighter-rouge">main</code> to Ansible Galaxy.</p>

<p>There is one catch, however. The Action will need access to your Ansible Galaxy token you created earlier. Of course, you don’t want to put that into the workflow definition
file in plain text, that’s why we are going to use a <a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions">GitHub Repository Secret</a>, which is
referenced via</p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="s">${{ secrets.galaxy_api_key }}</span></code></pre></figure>
<p>in the above workflow definition.</p>

<p>To create a GitHub Repository Secret for your repository, head to your GitHub repository, click on <code class="language-plaintext highlighter-rouge">Settings</code>. On the left-hand side, select <code class="language-plaintext highlighter-rouge">Secrets and variables</code>, followed
by <code class="language-plaintext highlighter-rouge">Actions</code>. Lastly click on <code class="language-plaintext highlighter-rouge">New repository secret</code> to create a new Repository Secret. Give it the name of <code class="language-plaintext highlighter-rouge">GALAXY_API_KEY</code> and put in your token you created earlier.</p>

<p>Finally, push the changed code to GitHub and enjoy an automated upload of your roles to Ansible Galaxy. :slightly_smiling_face:</p>

<p>You can always check for the status of the workflow by visiting your GitHub repository’s page, click on <code class="language-plaintext highlighter-rouge">Actions</code> and check on the latest run. From there you can also
run the workflow manually again (thanks to the definition of <code class="language-plaintext highlighter-rouge">workflow_dispatch: {}</code> in the workflow file), should you have the need for it.</p>

<h2 id="closing-thoughts">Closing thoughts</h2>

<p>A small blog post this time around, but I hope you learned something new! :slightly_smiling_face:</p>

<p>Until next time,</p>

<p>Steffen :sunglasses:</p>

<h2 id="change-log">Change log</h2>

<h3 id="2024-03-10">2024-03-10</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">markdownlint</code> fixes</li>
</ul>

<h3 id="2024-02-02">2024-02-02</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">markdownlint</code> fixes</li>
</ul>]]></content><author><name>Steffen Scheib</name></author><summary type="html"><![CDATA[Preface]]></summary></entry><entry><title type="html">Getting started with testing Ansible code using Ansible Lint - with or without GitHub Actions</title><link href="https://blog.scheib.me/2023/11/22/github-actions-ansible.html" rel="alternate" type="text/html" title="Getting started with testing Ansible code using Ansible Lint - with or without GitHub Actions" /><published>2023-11-22T00:00:00+00:00</published><updated>2024-03-11T00:00:00+00:00</updated><id>https://blog.scheib.me/2023/11/22/github-actions-ansible</id><content type="html" xml:base="https://blog.scheib.me/2023/11/22/github-actions-ansible.html"><![CDATA[<h2 id="preface">Preface</h2>

<p>A while ago I started playing around with <a href="https://github.com/features/actions">GitHub Actions</a> because I really liked the idea of having Ansible code automatically
checked after I pushed code to GitHub or after I merged code
from a
<a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches#about-branches">feature branch</a>,
e.g. <code class="language-plaintext highlighter-rouge">ft-my_feature</code> to the <code class="language-plaintext highlighter-rouge">main</code> branch.</p>

<p>Of course this idea isn’t new, I am probably among the last ones that actively publishes Ansible code to adopt it. But the idea is simple: Ensure that whenever code
gets committed and pushed or merged to a specific branch (or really to any branch) validate the code if it follows a set of common and good practices with regards to Ansible.</p>

<p>With this blog post, I’d like to provide some guidance around getting started with syntactically testing Ansible code and translate the local testing to GitHub Actions.</p>

<h2 id="a-brief-look-into-history-testing-ansible-code-syntactically">A brief look into history: Testing Ansible code syntactically</h2>

<p>Let’s first have a look at a very basic way of testing Ansible code. This is really only suitable for beginners, as this way of testing code is very limited, as you’ll find
out in a minute.</p>

<p>If you’ve ever looked into testing an Ansible playbook, you’ve surely come across
<a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_intro.html#verifying-playbooks"><code class="language-plaintext highlighter-rouge">ansible-playbook --syntax-check</code></a>. This command merely checks a given
playbook for syntactical errors. Nothing more. This command is especially helpful when you first get started learning Ansible, as it provides an easy and quick way of
identifying whether you have made any syntactical errors in your playbook.</p>

<p>Let’s look at an easy example. A common mistake is the indentation of <code class="language-plaintext highlighter-rouge">YAML</code>. At times you just have a space too much or too less and Ansible will not run your playbook.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Testing</span><span class="nv"> </span><span class="s">Ansible</span><span class="nv"> </span><span class="s">code'</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s1">'</span><span class="s">all'</span>

  <span class="na">tasks</span><span class="pi">:</span>
     <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Print</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">message'</span>
       <span class="na">ansible.builtin.debug</span><span class="pi">:</span>
         <span class="na">msg</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Test</span><span class="nv"> </span><span class="s">message'</span>

  <span class="err">  </span><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Another</span><span class="nv"> </span><span class="s">task'</span>
      <span class="na">ansible.builtin.debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Another</span><span class="nv"> </span><span class="s">message'</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>Can you spot the error already? Right, I have indented the first task by one space more than the others. Let’s see what <code class="language-plaintext highlighter-rouge">ansible-playbook --syntax-check playbook.yml</code> has
to say about the playbook:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-playbook <span class="nt">--syntax-check</span> playbook.yml
<span class="o">[</span>WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match <span class="s1">'all'</span>
ERROR! We were unable to <span class="nb">read </span>either as JSON nor YAML, these are the errors we got from each:
JSON: Expecting value: line 1 column 1 <span class="o">(</span>char 0<span class="o">)</span>

Syntax Error <span class="k">while </span>loading YAML.
  did not find expected key

The error appears to be <span class="k">in</span> <span class="s1">'/home/sscheib/playbook.yml'</span>: line 10, column 5, but may
be elsewhere <span class="k">in </span>the file depending on the exact syntax problem.

The offending line appears to be:


    - name: <span class="s1">'Another task'</span>
    ^ here
<span class="o">[</span>steffen@development ~]<span class="err">$</span>
</code></pre></div></div>

<p>Great, it caught the error, perfect.</p>

<p>Let’s fix the code and re-run that check:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-playbook <span class="nt">--syntax-check</span> playbook.yml

playbook: playbook.yml
</code></pre></div></div>

<p>Looks good :slightly_smiling_face:</p>

<p>As I said earlier, <code class="language-plaintext highlighter-rouge">ansible-playbook --syntax-check</code> is great for getting started, but it certainly has its limitations.</p>

<p>One of those, let’s call it ‘limitations’, is the fact that it can only test <em>playbooks</em>. Nothing else. It was never designed to test anything else, hence I
called it a ‘limitation’, but nevertheless, it’s something <code class="language-plaintext highlighter-rouge">ansible-playbook --syntax-check</code> is not capable of doing.</p>

<p>Let’s take the simplest of all cases. I have a playbook and want to include some tasks using the <code class="language-plaintext highlighter-rouge">ansible.builtin.include_task</code> module. The file I’d like to include
is <code class="language-plaintext highlighter-rouge">my_tasks.yml</code>, which looks like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Print</span><span class="nv"> </span><span class="s">yet</span><span class="nv"> </span><span class="s">another</span><span class="nv"> </span><span class="s">message'</span>
  <span class="na">ansible.builtin.debug</span><span class="pi">:</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Test</span><span class="nv"> </span><span class="s">message'</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>Let’s validate the syntax:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-playbook <span class="nt">--syntax-check</span> my_tasks.yml
<span class="o">[</span>WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match <span class="s1">'all'</span>
ERROR! <span class="s1">'ansible.builtin.debug'</span> is not a valid attribute <span class="k">for </span>a Play

The error appears to be <span class="k">in</span> <span class="s1">'/home/sscheib/my_tasks.yml'</span>: line 2, column 3, but may
be elsewhere <span class="k">in </span>the file depending on the exact syntax problem.

The offending line appears to be:

<span class="nt">---</span>
- name: <span class="s1">'Print yet another message'</span>
  ^ here
</code></pre></div></div>

<p>It does not work. At least not like that. The reason is simple: <code class="language-plaintext highlighter-rouge">ansible-playbook</code> is only meant to test, well, <em>playbooks</em>. Okay, then let’s
use <code class="language-plaintext highlighter-rouge">ansible.builtin.include_tasks</code> to include the tasks in <code class="language-plaintext highlighter-rouge">my_tasks.yml</code> and re-run the syntax check:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-playbook <span class="nt">--syntax-check</span> playbook.yml

playbook: playbook.yml
</code></pre></div></div>

<p>Great, that looks promising! But to be sure, let’s introduce an intentional issue into <code class="language-plaintext highlighter-rouge">my_tasks.yml</code> to ensure it is really checked:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Intentionally</span><span class="nv"> </span><span class="s">wrong'</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Print</span><span class="nv"> </span><span class="s">yet</span><span class="nv"> </span><span class="s">another</span><span class="nv"> </span><span class="s">message'</span>
      <span class="na">ansible.builtin.debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Test</span><span class="nv"> </span><span class="s">message'</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>Let’s re-run that check:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-playbook <span class="nt">--syntax-check</span> playbook.yml

playbook: playbook.yml
</code></pre></div></div>

<p>Erm, wait what?! Why did it pass?</p>

<p>Well, there is an important distinction of <code class="language-plaintext highlighter-rouge">include_tasks</code> and <code class="language-plaintext highlighter-rouge">import_tasks</code><sup id="fnref:import_vs_include" role="doc-noteref"><a href="#fn:import_vs_include" class="footnote" rel="footnote">1</a></sup>. <code class="language-plaintext highlighter-rouge">include_tasks</code> will load the file <code class="language-plaintext highlighter-rouge">my_test.yml</code> when it encounters
that exact task that loads the tasks. <code class="language-plaintext highlighter-rouge">import_tasks</code> on the other hand, loads the tasks <em>before</em> the playbook run has started. Essentially you can think of it as simple
adding the tasks that we are including in place of the <code class="language-plaintext highlighter-rouge">import_tasks</code> statement.</p>

<p>When we re-run the syntax check one last time, you’ll see, it’ll fail when using <code class="language-plaintext highlighter-rouge">import_tasks</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ansible-playbook <span class="nt">--syntax-check</span> playbook.yml
ERROR! We were unable to <span class="nb">read </span>either as JSON nor YAML, these are the errors we got from each:
JSON: Expecting value: line 1 column 1 <span class="o">(</span>char 0<span class="o">)</span>

Syntax Error <span class="k">while </span>loading YAML.
  did not find expected key

The error appears to be <span class="k">in</span> <span class="s1">'/home/sscheib/my_tasks.yml'</span>: line 3, column 5, but may
be elsewhere <span class="k">in </span>the file depending on the exact syntax problem.

The offending line appears to be:

- name: <span class="s1">'Intentionally wrong'</span>
    - name: <span class="s1">'Print yet another message'</span>
    ^ here
</code></pre></div></div>

<p>Okay, do I need to use now <code class="language-plaintext highlighter-rouge">include_tasks</code> over <code class="language-plaintext highlighter-rouge">import_tasks</code> and all is resolved? Well, not quite.</p>

<p>What about testing Ansible roles and not only playbooks? When we talk about testing roles, can we also test the variables located in <code class="language-plaintext highlighter-rouge">vars/</code> and <code class="language-plaintext highlighter-rouge">defaults/</code> within
a role directory? What about <code class="language-plaintext highlighter-rouge">handlers/</code>?</p>

<p>I am afraid that won’t work with <code class="language-plaintext highlighter-rouge">ansible-playbook --syntax-check</code> at all. Which is perfectly fine because, again, <code class="language-plaintext highlighter-rouge">ansible-playbook</code> was never meant to test anything other than <em>playbooks</em>.</p>

<p>But what, if I’d like to test my roles?! Keep on reading, we’ll talk about it in the next chapter :sunglasses:</p>

<h2 id="introducing-ansible-lint">Introducing Ansible Lint</h2>

<h3 id="overview">Overview</h3>

<p><a href="https://ansible.readthedocs.io/projects/lint/">Ansible Lint</a> is a tool that was introduced to aid Ansible playbook, role and collections developers in writing
consistent good Ansible code. It basically starts where <code class="language-plaintext highlighter-rouge">ansible-playbook --syntax-check</code> ends. Ansible Lint is <em>much</em> more sophisticated than the syntax check of
the <code class="language-plaintext highlighter-rouge">ansible-playbook</code> command. Ansible Lint does not only syntactically check playbooks, roles and collections, but also ensures common practices are followed.
Ansible Lint further ensures common practices are followed for <code class="language-plaintext highlighter-rouge">YAML</code> by using <code class="language-plaintext highlighter-rouge">yamllint</code>.</p>

<p>In case you wondered whether you need to use Ansible Lint alongside <code class="language-plaintext highlighter-rouge">ansible-playbook --syntax-check</code> to have a better test coverage, then I have good news for you:
Ansible Lint calls the previously discussed <code class="language-plaintext highlighter-rouge">ansible-playbook --syntax check</code> <sup id="fnref:ansible_lint_playbook_syntax" role="doc-noteref"><a href="#fn:ansible_lint_playbook_syntax" class="footnote" rel="footnote">2</a></sup> by default. :sunglasses:</p>

<p>Ansible Lint works with rules. Rules can be individually enabled or disabled, but generally the rules included in Ansible Lint are well-thought out and shouldn’t
be disabled carelessly. These rules are developed by the Ansible Community on <a href="https://github.com/ansible/ansible-lint/tree/main">Github</a>. Ansible Lint - and the rules -
are written, the same as Ansible itself, in Python. The individual rules that are included in the upstream variant of Ansible Lint (which can be
installed via <code class="language-plaintext highlighter-rouge">pip install ansible-lint</code>) can also be reviewed on <a href="https://github.com/ansible/ansible-lint/tree/main/src/ansiblelint/rules">GitHub</a>.</p>

<p>For Red Hat subscribers, a RPM variant is provided by Red Hat in the Red Hat Ansible Automation Platform repository as part of the tool set for Ansible developers.</p>

<h3 id="getting-started">Getting started</h3>

<p>So what do you need to get started with Ansible Lint?</p>

<p>First of, we need to install Ansible Lint. I personally use the <code class="language-plaintext highlighter-rouge">pip</code> variant, although I have access to the Ansible Automation Platform repository. I use the <code class="language-plaintext highlighter-rouge">pip</code> variant
for two reasons:</p>

<ol>
  <li>Working with “the next” version of Ansible Lint helps me fix issues in my code before they actually are introduced into Red Hat’s downstream variant and thus I can guide
my customers (as I work at Red Hat as a Technical Account Manager for Ansible) better</li>
  <li>I use <a href="https://pre-commit.com/"><code class="language-plaintext highlighter-rouge">pre-commit</code></a> for all of my git repositories - we’ll come to that later - and thus need to use a Python virtual environment (<code class="language-plaintext highlighter-rouge">venv</code>) anyway
so why not use Ansible Lint also via <code class="language-plaintext highlighter-rouge">pip</code> :slightly_smiling_face:</li>
</ol>

<p>To configure Ansible Lint to work with a good set of rules, I’ll primarily work with two configuration files (one for Ansible Lint, the other for <code class="language-plaintext highlighter-rouge">yamllint</code>), which
I personally found to be very good for all my needs.</p>

<p>The Ansible Lint configuration file can be put at three places in your current working directory <sup id="fnref:ansible_lint_config_location" role="doc-noteref"><a href="#fn:ansible_lint_config_location" class="footnote" rel="footnote">3</a></sup>:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">.ansible-lint</code> (which is what I use personally)</li>
  <li><code class="language-plaintext highlighter-rouge">.config/ansible-lint.yml</code></li>
  <li><code class="language-plaintext highlighter-rouge">.config/ansible-lint.yaml</code></li>
</ul>

<p>My configuration file looks like the following:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">exclude_paths</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s1">'</span><span class="s">.git/'</span>
  <span class="pi">-</span> <span class="s1">'</span><span class="s">files/'</span>

<span class="na">kinds</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">tasks</span><span class="pi">:</span> <span class="s1">'</span><span class="s">tasks/*.{yml,yaml}'</span>
  <span class="pi">-</span> <span class="na">vars</span><span class="pi">:</span> <span class="s1">'</span><span class="s">vars/*.{yml,yaml}'</span>
  <span class="pi">-</span> <span class="na">vars</span><span class="pi">:</span> <span class="s1">'</span><span class="s">defaults/*.{yml,yaml}'</span>
  <span class="pi">-</span> <span class="na">meta</span><span class="pi">:</span> <span class="s1">'</span><span class="s">meta/main.{yml,yaml}'</span>
  <span class="pi">-</span> <span class="na">yaml</span><span class="pi">:</span> <span class="s1">'</span><span class="s">.ansible-lint'</span>
  <span class="pi">-</span> <span class="na">yaml</span><span class="pi">:</span> <span class="s1">'</span><span class="s">.github/workflows/*.{yml,yaml}'</span>
  <span class="pi">-</span> <span class="na">yaml</span><span class="pi">:</span> <span class="s1">'</span><span class="s">.pre-commit-config.yaml'</span>
  <span class="pi">-</span> <span class="na">yaml</span><span class="pi">:</span> <span class="s1">'</span><span class="s">.yamllint'</span>
  <span class="pi">-</span> <span class="na">yaml</span><span class="pi">:</span> <span class="s1">'</span><span class="s">collections/requirements.yml'</span>

<span class="na">loop_var_prefix</span><span class="pi">:</span> <span class="s1">'</span><span class="s">^(__|{role}_)'</span>
<span class="na">max_block_depth</span><span class="pi">:</span> <span class="m">20</span>
<span class="na">offline</span><span class="pi">:</span> <span class="no">true</span>
<span class="na">profile</span><span class="pi">:</span> <span class="s1">'</span><span class="s">production'</span>
<span class="na">skip_action_validation</span><span class="pi">:</span> <span class="no">false</span>
<span class="na">skip_list</span><span class="pi">:</span> <span class="pi">[]</span>
<span class="na">task_name_prefix</span><span class="pi">:</span> <span class="s1">'</span><span class="s">{stem}</span><span class="nv"> </span><span class="s">|</span><span class="nv"> </span><span class="s">'</span>
<span class="na">use_default_rules</span><span class="pi">:</span> <span class="no">true</span>
<span class="na">var_naming_pattern</span><span class="pi">:</span> <span class="s1">'</span><span class="s">^[a-z_][a-z0-9_]*$'</span>
<span class="na">warn_list</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s1">'</span><span class="s">experimental'</span>
<span class="na">write_list</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s1">'</span><span class="s">none'</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>Let’s go through the more important rules step by step:</p>

<h4 id="exclude_paths"><code class="language-plaintext highlighter-rouge">exclude_paths</code></h4>

<p>As the name says it: This will exclude paths from being processed. Anything below <code class="language-plaintext highlighter-rouge">.git</code> is not necessary to be scanned, nor do any files stored inside <code class="language-plaintext highlighter-rouge">files/</code>.</p>

<h4 id="kinds"><code class="language-plaintext highlighter-rouge">kinds</code></h4>

<p>With <code class="language-plaintext highlighter-rouge">kinds</code> we tell Ansible Lint which files should be considered as what file kind.</p>

<h4 id="offline"><code class="language-plaintext highlighter-rouge">offline</code></h4>

<p>With <code class="language-plaintext highlighter-rouge">offline</code> we define that collections and roles defined in <code class="language-plaintext highlighter-rouge">collections/requirements.yml</code> should not be installed using <code class="language-plaintext highlighter-rouge">ansible-galaxy</code> <em>before</em> linting. That means
in turn, of course, that you are responsible to install the roles and collections required by your role or collection. I disabled it on purpose to speed up the linting
process a little.</p>

<h4 id="profile"><code class="language-plaintext highlighter-rouge">profile</code></h4>

<p><code class="language-plaintext highlighter-rouge">profile</code> tells Ansible Lint which <a href="https://ansible.readthedocs.io/projects/lint/profiles/">profile</a> it should use. The profile defines which rules will be loaded by Ansible
Lint and thus validated against. The profile <a href="https://ansible.readthedocs.io/projects/lint/profiles/#production"><code class="language-plaintext highlighter-rouge">production</code></a> is the most restrictive one and is intended
for code that ‘meets requirements for inclusion in Ansible Automation Platform (AAP) as validated or certified content.’ - you can’t write any better code than with
this profile, I guess :slightly_smiling_face:</p>

<h4 id="write_list"><code class="language-plaintext highlighter-rouge">write_list</code></h4>

<p>Ansible Lint includes (in later versions) the possibility to <a href="https://ansible.readthedocs.io/projects/lint/autofix/">fix</a> problematic code by invoking Ansible Lint via
<code class="language-plaintext highlighter-rouge">--fix</code>. I don’t want Ansible Lint to touch anything actively, thus I have set this to <code class="language-plaintext highlighter-rouge">none</code> which will prevent any action.</p>

<p>There are many more options that can be configured in Ansible Lint, which I personally don’t use, please <a href="https://ansible.readthedocs.io/projects/lint/">check them out</a>.</p>

<h3 id="yamllint">yamllint</h3>

<p>So, I have spoken of two configuration files. The other one is <code class="language-plaintext highlighter-rouge">.yamllint</code> - yes, Ansible Lint invokes <a href="https://github.com/adrienverge/yamllint"><code class="language-plaintext highlighter-rouge">yamllint</code></a> as well :blush:.
<code class="language-plaintext highlighter-rouge">yamllint</code> does one thing: Validate <code class="language-plaintext highlighter-rouge">YAML</code> files kind of the same way as Ansible Lint does: with rules. These rules can, the same as for Ansible Lint, be configured with the
configuration file located at <code class="language-plaintext highlighter-rouge">.yamllint</code>. In other words, <code class="language-plaintext highlighter-rouge">yamllint</code> makes sure the <code class="language-plaintext highlighter-rouge">YAML</code> code itself is valid. It doesn’t care about the Ansible portion at all, as you can
verify any <code class="language-plaintext highlighter-rouge">YAML</code> file with it. Conveniently, Ansible Lint includes <code class="language-plaintext highlighter-rouge">yamllint</code> :sunglasses:.</p>

<p>My configuration file looks like follows:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">extends</span><span class="pi">:</span> <span class="s1">'</span><span class="s">default'</span>

<span class="na">rules</span><span class="pi">:</span>
  <span class="na">braces</span><span class="pi">:</span>
    <span class="na">level</span><span class="pi">:</span> <span class="s1">'</span><span class="s">error'</span>
    <span class="na">max-spaces-inside</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">brackets</span><span class="pi">:</span>
    <span class="na">level</span><span class="pi">:</span> <span class="s1">'</span><span class="s">error'</span>
    <span class="na">max-spaces-inside</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">colons</span><span class="pi">:</span>
    <span class="na">level</span><span class="pi">:</span> <span class="s1">'</span><span class="s">error'</span>
    <span class="na">max-spaces-after</span><span class="pi">:</span> <span class="s">-1</span>
  <span class="na">commas</span><span class="pi">:</span>
    <span class="na">level</span><span class="pi">:</span> <span class="s1">'</span><span class="s">error'</span>
    <span class="na">max-spaces-after</span><span class="pi">:</span> <span class="s">-1</span>
  <span class="na">comments</span><span class="pi">:</span> <span class="s1">'</span><span class="s">enable'</span>
  <span class="na">comments-indentation</span><span class="pi">:</span> <span class="s1">'</span><span class="s">enable'</span>
  <span class="na">document-end</span><span class="pi">:</span> <span class="s1">'</span><span class="s">enable'</span>
  <span class="na">document-start</span><span class="pi">:</span> <span class="s1">'</span><span class="s">enable'</span>
  <span class="na">empty-lines</span><span class="pi">:</span>
    <span class="na">level</span><span class="pi">:</span> <span class="s1">'</span><span class="s">error'</span>
    <span class="na">max</span><span class="pi">:</span> <span class="m">3</span>
  <span class="na">empty-values</span><span class="pi">:</span> <span class="s1">'</span><span class="s">enable'</span>
  <span class="na">float-values</span><span class="pi">:</span> <span class="s1">'</span><span class="s">enable'</span>
  <span class="na">hyphens</span><span class="pi">:</span> <span class="s1">'</span><span class="s">enable'</span>
  <span class="na">indentation</span><span class="pi">:</span> <span class="s1">'</span><span class="s">enable'</span>
  <span class="na">key-duplicates</span><span class="pi">:</span> <span class="s1">'</span><span class="s">enable'</span>
  <span class="na">key-ordering</span><span class="pi">:</span> <span class="s1">'</span><span class="s">disable'</span>
  <span class="na">line-length</span><span class="pi">:</span>
    <span class="na">max</span><span class="pi">:</span> <span class="m">120</span>
  <span class="na">new-line-at-end-of-file</span><span class="pi">:</span> <span class="s1">'</span><span class="s">enable'</span>
  <span class="na">new-lines</span><span class="pi">:</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s1">'</span><span class="s">unix'</span>
  <span class="na">octal-values</span><span class="pi">:</span> <span class="s1">'</span><span class="s">enable'</span>
  <span class="na">quoted-strings</span><span class="pi">:</span> <span class="s1">'</span><span class="s">enable'</span>
  <span class="na">trailing-spaces</span><span class="pi">:</span> <span class="s1">'</span><span class="s">enable'</span>
  <span class="na">truthy</span><span class="pi">:</span> <span class="s1">'</span><span class="s">enable'</span>

<span class="na">yaml-files</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s1">'</span><span class="s">*.yaml'</span>
  <span class="pi">-</span> <span class="s1">'</span><span class="s">*.yml'</span>
  <span class="pi">-</span> <span class="s1">'</span><span class="s">.yamllint'</span>
  <span class="pi">-</span> <span class="s1">'</span><span class="s">.ansible.lint'</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>I have basically enabled all rules, but one: <code class="language-plaintext highlighter-rouge">key-ordering</code> (more to that in a little bit). I also extended the default line length of 80 to a more reasonable 120. I did some
research and this seems to be the “unwritten universally accepted” line length for Ansible. Anything below 120 is kind of hard to deal with, especially if you deal with long
variable names.</p>

<h4 id="my-thoughts-on-key-ordering-in-the-context-of-ansible">My thoughts on <code class="language-plaintext highlighter-rouge">key-ordering</code> in the context of Ansible</h4>

<p>Okay, this is rather off topic, as this is more a very strong <em>personal</em> opinion on why this setting shouldn’t be used for Ansible. If you are interested in my thoughts,
keep on reading :sunglasses:</p>

<p><code class="language-plaintext highlighter-rouge">yamllint</code> has a setting which is called <code class="language-plaintext highlighter-rouge">key-ordering</code>. <code class="language-plaintext highlighter-rouge">key-ordering</code> forces you to write module options in an alphabetical order, which I don’t want to do.</p>

<p>Here is why:</p>

<p>While ordering arguments alphabetically at first seems pretty useful, as it ensures you have the very same ordering for every task you write, I personally prefer
to write the most important arguments of a module at the top, followed by an order that makes sense to me.</p>

<p>For instance, creating a simple directory with <code class="language-plaintext highlighter-rouge">ansible.builtin.file</code> will look like the following when I write it:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Create</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">directory'</span>
  <span class="na">ansible.builtin.file</span><span class="pi">:</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/tmp/test_dir'</span>
    <span class="na">state</span><span class="pi">:</span> <span class="s1">'</span><span class="s">directory'</span>
    <span class="na">owner</span><span class="pi">:</span> <span class="s1">'</span><span class="s">steffen'</span>
    <span class="na">group</span><span class="pi">:</span> <span class="s1">'</span><span class="s">steffen'</span>
    <span class="na">mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0644'</span>
  <span class="na">register</span><span class="pi">:</span> <span class="s1">'</span><span class="s">out'</span>
</code></pre></div></div>

<p>With <code class="language-plaintext highlighter-rouge">key-ordering</code> enabled, I’d be forced to write it like so:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">ansible.builtin.file</span><span class="pi">:</span>
    <span class="na">dest</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/tmp/test_dir'</span>
    <span class="na">group</span><span class="pi">:</span> <span class="s1">'</span><span class="s">steffen'</span>
    <span class="na">mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0644'</span>
    <span class="na">owner</span><span class="pi">:</span> <span class="s1">'</span><span class="s">steffen'</span>
    <span class="na">state</span><span class="pi">:</span> <span class="s1">'</span><span class="s">directory'</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Create</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">directory'</span>
  <span class="na">register</span><span class="pi">:</span> <span class="s1">'</span><span class="s">out'</span>
</code></pre></div></div>

<p>For me <em>personally</em> this is counter-intuitive. While it guarantees that you <em>always</em> have the very same ordering, having split <code class="language-plaintext highlighter-rouge">user</code> and <code class="language-plaintext highlighter-rouge">group</code> is not something I would do.
Of course, your mileage may vary.</p>

<p>Moreover, I think that it makes reading Ansible a lot harder. Maybe it’s just me, but I am used to having the <code class="language-plaintext highlighter-rouge">name</code> of a task as the <em>very first</em> attribute. Not the
module. Of course, the position of the module can change - depending on the name. :grin:</p>

<p>Look at the following example task:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Do</span><span class="nv"> </span><span class="s">something'</span>
  <span class="na">theforeman.foreman.activation_key</span><span class="pi">:</span>
    <span class="na">another_arg</span><span class="pi">:</span> <span class="s1">'</span><span class="s">blubb'</span>
    <span class="na">validate_certs</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">register</span><span class="pi">:</span> <span class="s1">'</span><span class="s">output'</span>
  <span class="na">loop</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">bla'</span><span class="pi">]</span>
  <span class="na">loop_control</span><span class="pi">:</span>
    <span class="na">loop_var</span><span class="pi">:</span> <span class="s1">'</span><span class="s">_my_var'</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>When enabling <code class="language-plaintext highlighter-rouge">key-ordering</code>, the following ordering is required:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="pi">-</span> <span class="na">loop</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">bla'</span><span class="pi">]</span>
  <span class="na">loop_control</span><span class="pi">:</span>
    <span class="na">loop_var</span><span class="pi">:</span> <span class="s1">'</span><span class="s">_my_var'</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">Do something'</span>
  <span class="na">register</span><span class="pi">:</span> <span class="s1">'</span><span class="s">output'</span>
  <span class="na">theforeman.foreman.activation_key</span><span class="pi">:</span>
    <span class="na">another_arg</span><span class="pi">:</span> <span class="s1">'</span><span class="s">blubb'</span>
    <span class="na">validate_certs</span><span class="pi">:</span> <span class="no">true</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>This is so far off Ansible-wise that I’d say, “No, that’s not Ansible. GO AWAY!”. Again, I think it makes reading Ansible <em>a lot</em> harder.</p>

<p>And in case you ask yourself whether the above example would technically work with Ansible: Yes it does. Of course, <code class="language-plaintext highlighter-rouge">theforeman.foreman.activation_key</code> will complain it is
missing required arguments, but Ansible accepts the above example perfectly fine.</p>

<p>Again, your mileage may vary, but for me personally, this shouldn’t be allowed with Ansible. Really.</p>

<h3 id="ansible-lint-summary">Ansible Lint summary</h3>

<p>For beginners Ansible Lint might seem intimidating at first, but keep in mind, you don’t need to start right away with the
<a href="https://ansible.readthedocs.io/projects/lint/profiles/#production"><code class="language-plaintext highlighter-rouge">production</code></a> profile. Maybe start with the
<a href="https://ansible.readthedocs.io/projects/lint/profiles/#basic"><code class="language-plaintext highlighter-rouge">basic</code></a> or the <a href="https://ansible.readthedocs.io/projects/lint/profiles/#basic"><code class="language-plaintext highlighter-rouge">moderate</code></a> profile and work your
way up to the more sophisticated profiles.</p>

<p>If you’d like to share your code via <a href="https://galaxy.ansible.com/ui/">Ansible Galaxy</a> (I’ll talk about that in a later blog post), I’d encourage you to validate your code
against the <a href="https://ansible.readthedocs.io/projects/lint/profiles/#shared"><code class="language-plaintext highlighter-rouge">shared</code></a> profile (which is also what Ansible Lint recommends) or if you are really into it, go for
the <a href="https://ansible.readthedocs.io/projects/lint/profiles/#production"><code class="language-plaintext highlighter-rouge">production</code></a> profile right away.</p>

<p>Better Ansible code usually encourages other people to contribute to your code, so at the end, everybody benefits :slightly_smiling_face:.</p>

<h2 id="pre-commit"><a href="https://pre-commit.com/"><code class="language-plaintext highlighter-rouge">pre-commit</code></a></h2>

<p>Having the goal in mind to have your code linted when merging a branch or pushing code to a branch, one would think the general workflow would look something like
the following:</p>

<ol>
  <li>Write Ansible code</li>
  <li>Commit your code</li>
  <li>Push your code to GitHub/GitLab/etc.</li>
  <li>Get your code linted automatically</li>
  <li>On linting errors, fix the Ansible code</li>
  <li>Go back to 2.</li>
</ol>

<p>You can already see how time consuming and ineffective this approach would be.</p>

<p>My workflow looks a little different. I start by writing Ansible Code and regularly test the code using Ansible Lint on my development machine. This helps with immediately
correcting the code before I even finished writing it.</p>

<p>To ‘force’ myself into that continuous testing, I make use of <a href="https://pre-commit.com/"><code class="language-plaintext highlighter-rouge">pre-commit</code></a>. <code class="language-plaintext highlighter-rouge">pre-commit</code> basically installs a
<a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">git hook</a> script that runs anything I define before being allowed to commit the code.
For <code class="language-plaintext highlighter-rouge">pre-commit</code> to work you need to have initialized a git repository in your current directory (<code class="language-plaintext highlighter-rouge">git init</code>) or cloned an existing git repository.
<code class="language-plaintext highlighter-rouge">pre-commit</code> can be installed via <code class="language-plaintext highlighter-rouge">pip install pre-commit</code> (please use a Python virtual environment).</p>

<p><code class="language-plaintext highlighter-rouge">pre-commit</code> can be individually configured using a <a href="https://pre-commit.com/#2-add-a-pre-commit-configuration">configuration file</a>, which can be placed in your git initialized
directory at <code class="language-plaintext highlighter-rouge">.pre-commit-config.yaml</code></p>

<p>My configuration file looks like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">repos</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">repo</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://github.com/ansible/ansible-lint'</span>
    <span class="na">rev</span><span class="pi">:</span> <span class="s1">'</span><span class="s">v6.20.3'</span>
    <span class="na">hooks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Ansible-lint'</span>
        <span class="na">additional_dependencies</span><span class="pi">:</span>
          <span class="c1"># https://github.com/pre-commit/pre-commit/issues/1526</span>
          <span class="c1"># If you want to use specific version of ansible-core or ansible, feel</span>
          <span class="c1"># free to override `additional_dependencies` in your own hook config</span>
          <span class="c1"># file.</span>
          <span class="pi">-</span> <span class="s1">'</span><span class="s">ansible-core&gt;=2.15'</span>
        <span class="na">always_run</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">hook</span><span class="nv"> </span><span class="s">runs</span><span class="nv"> </span><span class="s">ansible-lint.'</span>
        <span class="na">entry</span><span class="pi">:</span> <span class="s1">'</span><span class="s">python3</span><span class="nv"> </span><span class="s">-m</span><span class="nv"> </span><span class="s">ansiblelint</span><span class="nv"> </span><span class="s">-v</span><span class="nv"> </span><span class="s">--force-color'</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ansible-lint'</span>
        <span class="na">language</span><span class="pi">:</span> <span class="s1">'</span><span class="s">python'</span>
        <span class="c1"># do not pass files to ansible-lint, see:</span>
        <span class="c1"># https://github.com/ansible/ansible-lint/issues/611</span>
        <span class="na">pass_filenames</span><span class="pi">:</span> <span class="no">false</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>Once you have installed <code class="language-plaintext highlighter-rouge">pre-commit</code> and put the configuration file in place, it’s time to install the git hook using <code class="language-plaintext highlighter-rouge">pre-commit install</code>. The installed git hook will
ensure that every time you commit code using <code class="language-plaintext highlighter-rouge">git commit</code>, the code is linted using Ansible Lint. If your code passes Ansible Lint, the commit will be performed, otherwise
Ansible Lint will let you know what’s wrong and the commit is prevented. Your code remains untouched, of course (unless you run Ansible Lint with the <code class="language-plaintext highlighter-rouge">--fix</code> option that is).</p>

<p>I usually run <code class="language-plaintext highlighter-rouge">pre-commit run --all</code> after I installed the git hook to check if everything works as expected.</p>

<p><code class="language-plaintext highlighter-rouge">pre-commit</code> has been a game changer to me as it forces me to fix faulty Ansible code before I commit it.</p>

<h2 id="ansible-lint-with-github-actions">Ansible Lint with GitHub Actions</h2>

<p>Finally, we are there. I know, it’s been a long post (again), but I felt this context was necessary before starting linting your code with GitHub Actions.</p>

<p>So how do you actually use Ansible Lint with GitHub Actions? Well, with another configuration file, of course, but it’s <em>really</em> easy.</p>

<p>First off, we’ll create a directory inside your git repository: <code class="language-plaintext highlighter-rouge">.github/workflows</code>. This is the place where GitHub looks for any workflows to run.
I have a file in <code class="language-plaintext highlighter-rouge">.github/workflows</code> that configures the Ansible Lint GitHub action (you can name it whatever you want, as long as it has either <code class="language-plaintext highlighter-rouge">yml</code> or <code class="language-plaintext highlighter-rouge">yaml</code>
as extension): <code class="language-plaintext highlighter-rouge">ansible-lint.yml</code></p>

<p>My <code class="language-plaintext highlighter-rouge">ansible-lint.yml</code> looks like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ansible-lint'</span>
<span class="na">on</span><span class="pi">:</span>
  <span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">main'</span><span class="pi">]</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span> <span class="pi">{}</span>
<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Ansible</span><span class="nv"> </span><span class="s">Lint'</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ubuntu-latest'</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s1">'</span><span class="s">actions/checkout@v4'</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Run</span><span class="nv"> </span><span class="s">ansible-lint'</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ansible/ansible-lint@main'</span>
<span class="nn">...</span>
</code></pre></div></div>

<p>The above configuration runs the official <a href="https://github.com/marketplace/actions/run-ansible-lint">GitHub Action for Ansible Lint</a> on a pull request to the <code class="language-plaintext highlighter-rouge">main</code> branch. By
specifying the attribute <code class="language-plaintext highlighter-rouge">workflow_dispatch</code> (it’s on purpose an empty dictionary) you are able to run the linting on demand, even without a pull request.</p>

<h2 id="conclusion">Conclusion</h2>

<p>That’s it already for this time.</p>

<p>I hope this post is helpful to dive into the world of linting Ansible code - with or without GitHub Actions. Happy Linting! :sunglasses:</p>

<h2 id="change-log">Change log</h2>

<h3 id="2024-03-11">2024-03-11</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">markdownlint</code> fixes</li>
  <li>Spelling fixes</li>
</ul>

<h3 id="2024-02-02">2024-02-02</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">markdownlint</code> fixes</li>
</ul>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:import_vs_include" role="doc-endnote">
      <p><a href="https://docs.ansible.com/ansible/2.9/user_guide/playbooks_reuse_includes.html#includes-vs-imports">Including and Importing Task Files</a> <a href="#fnref:import_vs_include" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:ansible_lint_playbook_syntax" role="doc-endnote">
      <p><a href="https://ansible.readthedocs.io/projects/lint/rules/syntax-check/#correct-code">Ansible Lint syntax-check</a> <a href="#fnref:ansible_lint_playbook_syntax" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:ansible_lint_config_location" role="doc-endnote">
      <p><a href="https://ansible.readthedocs.io/projects/lint/configuring/">Ansible Lint configuration file locations</a> <a href="#fnref:ansible_lint_config_location" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Steffen Scheib</name></author><summary type="html"><![CDATA[Preface]]></summary></entry><entry><title type="html">Ansible role rhel_iso_kickstart</title><link href="https://blog.scheib.me/2023/10/03/ansible-role-rhel_iso_kickstart.html" rel="alternate" type="text/html" title="Ansible role rhel_iso_kickstart" /><published>2023-10-03T00:00:00+00:00</published><updated>2024-03-11T00:00:00+00:00</updated><id>https://blog.scheib.me/2023/10/03/ansible-role-rhel_iso_kickstart</id><content type="html" xml:base="https://blog.scheib.me/2023/10/03/ansible-role-rhel_iso_kickstart.html"><![CDATA[<h2 id="preface">Preface</h2>

<p>I have been playing around with the idea of writing a blog post series about my Ansible roles for quite a while now. Not only to ‘promote’ my Ansible roles, but also to show case
how extremely flexible Ansible really is. Often times people think of Ansible as “just another configuration management tool”. While this is absolutely true, Ansible - in my
opinion - is so much more than that. Ansible is great in automating a series of tasks across multiple systems - that is really the <strong>strength of Ansible</strong>.</p>

<p>To disclose it right away: I am working at Red Hat as Senior Technical Account Manager Ansible - so please take the above with a grain of salt, as I am most probably biased.</p>

<p>With that being said, let’s dive into my Ansible role <a href="https://github.com/sscheib/ansible-role-rhel_iso_kickstart"><code class="language-plaintext highlighter-rouge">rhel_iso_kickstart</code></a> :sunglasses:</p>

<h2 id="introduction">Introduction</h2>

<p>I regularly deploy new <a href="https://www.redhat.com/de/technologies/management/satellite">Red Hat Satellite</a> instances - for testing purposes. Or when I broke one of the Satellite
instances (again) while playing around a bit <em>too much</em>. Or when I (once again) move to a new server or basically revamp my complete infrastructure. So you see, I have quite a
need for that :grin:.</p>

<p>I also noticed that a few of my colleagues had the same need, as well as some of our customers. I couldn’t find an existing <em>automated way</em> of downloading a given RHEL
<code class="language-plaintext highlighter-rouge">ISO image</code> and implanting a Kickstart into it, while also allowing to customize certain things, such as enabling
<a href="https://en.wikipedia.org/wiki/Federal_Information_Processing_Standards"><code class="language-plaintext highlighter-rouge">FIPS</code></a>.</p>

<p>So I decided, I’ll just write an Ansible role for everybody to use to ease this regular task.</p>

<h2 id="prerequisite-obtaining-an-api-token-to-authenticate-to-the-red-hat-customer-portal">Prerequisite: Obtaining an API token to authenticate to the Red Hat Customer Portal</h2>

<p>First off, to download an <code class="language-plaintext highlighter-rouge">ISO image</code> from the <a href="https://access.redhat.com">Red Hat Customer Portal</a> you need to be a Red Hat subscriber. If you don’t own any subscriptions,
you can make use of <a href="https://developers.redhat.com/articles/faqs-no-cost-red-hat-enterprise-linux">Red Hat’s Developer Subscription</a> which is provided at no cost by Red Hat.</p>

<p>Once you created your account and are able to download from the Red Hat Customer Portal, you need to create an API Token, which we’ll use to authenticate to the Red Hat
Customer Portal. For that, simply login to Red Hat’s Customer Portal and create an <a href="https://access.redhat.com/management/api">API Token</a>.</p>

<p>Note down that token, as we are going to need it for the role to function.</p>

<h2 id="prerequisite-obtaining-the-checksum-of-an-iso-image-to-download">Prerequisite: Obtaining the checksum of an <code class="language-plaintext highlighter-rouge">ISO image</code> to download</h2>

<p>The Red Hat Customer Portal API enables downloading of <code class="language-plaintext highlighter-rouge">ISO images</code> only <strong>by checksum</strong>. To download an <code class="language-plaintext highlighter-rouge">ISO image</code>, you first need to identify the checksum to pass to the
role. This checksum can be retrieved for any <code class="language-plaintext highlighter-rouge">ISO image</code> on the Red Hat Customer Portal and can be found on the respective download page of the <code class="language-plaintext highlighter-rouge">ISO image</code> itself.</p>

<p>For RHEL you can visit <a href="https://access.redhat.com/downloads/content/rhel">https://access.redhat.com/downloads/content/rhel</a> and simply click on <strong>Show details</strong>.
As an example, the <strong>Red Hat Enterprise Linux 8.8 Binary DVD</strong> will show the following additional details:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>File name: rhel-8.8-x86_64-dvd.iso
File Size: 11.7 GB
SHA-256 Checksum: 517abcc67ee3b7212f57e180f5d30be3e8269e7a99e127a3399b7935c7e00a09
Last Updated: 2023-04-26
</code></pre></div></div>

<p>We are going to need the <code class="language-plaintext highlighter-rouge">SHA-256 Checksum</code> :slightly_smiling_face:.</p>

<h2 id="installation">Installation</h2>

<p>Installation is easy and straight forward. I tag my Role releases using <a href="https://semver.org/">semantic versioning</a> on GitHub. Installing a specific tag works through providing
a <code class="language-plaintext highlighter-rouge">requirements.yml</code> to the <code class="language-plaintext highlighter-rouge">ansible-galaxy</code> command.</p>

<p>If you’d want to install v2.0.0 of my Role, you could use the following <code class="language-plaintext highlighter-rouge">requirements.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">roles</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">rhel_iso_kickstart'</span>
    <span class="na">src</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://github.com/sscheib/ansible-role-rhel_iso_kickstart.git'</span>
    <span class="na">scm</span><span class="pi">:</span> <span class="s1">'</span><span class="s">git'</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">v2.0.0'</span>
</code></pre></div></div>

<p>Installing it is as easy as that:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ansible-galaxy role <span class="nb">install</span> <span class="nt">-r</span> requirements.yml
</code></pre></div></div>

<h2 id="a-deeper-look-into-the-role">A deeper look into the role</h2>

<p>So what actually does this role?</p>

<p>The role does the following:</p>

<ol>
  <li>Download a RHEL <code class="language-plaintext highlighter-rouge">ISO image</code> to your local filesystem - that can be your local machine or a server in a data center</li>
  <li>Optional: Unpack the <code class="language-plaintext highlighter-rouge">ISO image</code></li>
  <li>Optional: Add a custom Kickstart or the Kickstart shipped with the role to the unpacked <code class="language-plaintext highlighter-rouge">ISO image</code></li>
  <li>Optional: Adjust the Kickstart to set a root password, create users and add custom <code class="language-plaintext highlighter-rouge">%post</code> sections</li>
  <li>Optional: Validate the Kickstart using <code class="language-plaintext highlighter-rouge">ksvalidator</code></li>
  <li>Optional: Adjust the kernel parameters to load the Kickstart automatically</li>
  <li>Optional: Enable <code class="language-plaintext highlighter-rouge">FIPS</code> in the kernel parameters</li>
  <li>Optional: Adjust the timeout of GRUB, so you don’t have to wait 60 seconds for the installation to start</li>
  <li>Optional: Adjust the GRUB menu entry to use; Either validate the <code class="language-plaintext highlighter-rouge">ISO image</code> before installing or directly install it</li>
  <li>Optional: Create the actual <code class="language-plaintext highlighter-rouge">ISO image</code></li>
  <li>Optional: Make the <code class="language-plaintext highlighter-rouge">ISO image</code> bootable on <code class="language-plaintext highlighter-rouge">BIOS</code> and <code class="language-plaintext highlighter-rouge">UEFI</code> systems</li>
  <li>Optional: Implant an MD5 sum so it can be checked during booting</li>
</ol>

<p>TL;DR: Quite a lot.</p>

<p>Chances are that you do not need or want to use certain features of the role, such as enabling <code class="language-plaintext highlighter-rouge">FIPS</code>. Then I have good news for you: All steps but the very first are optional
and can be configured through variables. :sunglasses:</p>

<h2 id="use-cases">Use cases</h2>

<p>I have identified three major use cases for the role:</p>

<ol>
  <li>Only download an <code class="language-plaintext highlighter-rouge">ISO image</code>, don’t touch it</li>
  <li>Download the <code class="language-plaintext highlighter-rouge">ISO image</code> and enable <code class="language-plaintext highlighter-rouge">FIPS</code>, so you don’t have to do it manually every time before th <code class="language-plaintext highlighter-rouge">ISO image</code> boots, but do not perform any other changes to
the <code class="language-plaintext highlighter-rouge">ISO image</code></li>
  <li>Embed a customized Kickstart into the <code class="language-plaintext highlighter-rouge">ISO image</code> to use it for unattended installing</li>
</ol>

<p>I am sure, there plenty of other use cases I haven’t thought of yet. If you happen to have a different use case, consider contributing with a feature request or
simply comment on this blog post :slightly_smiling_face:</p>

<p>Now, let’s take look at the above use cases and how to configure the role to achieve each of them.</p>

<h3 id="downloading-an-iso-image">Downloading an <code class="language-plaintext highlighter-rouge">ISO image</code></h3>

<p>Downloading the <code class="language-plaintext highlighter-rouge">ISO image</code> is the easiest of the three use cases. You’ll only need to configure:</p>

<ul>
  <li>Which <code class="language-plaintext highlighter-rouge">ISO image</code> to download</li>
  <li>Where to download it to</li>
  <li>The permissions of both the download directory and the <code class="language-plaintext highlighter-rouge">ISO image</code></li>
  <li>Provide the API token to authenticate against the Red Hat Customer Portal</li>
</ul>

<p>An example of a playbook could look something like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">hosts</span><span class="pi">:</span> <span class="s1">'</span><span class="s">localhost'</span>
  <span class="na">gather_facts</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">rhel_iso_kickstart'</span>
  <span class="na">vars</span><span class="pi">:</span>
    <span class="c1"># the checksum of a RHEL 8.8 ISO to download from the Red Hat Customer Portal</span>
    <span class="na">checksum</span><span class="pi">:</span> <span class="s1">'</span><span class="s">517abcc67ee3b7212f57e180f5d30be3e8269e7a99e127a3399b7935c7e00a09'</span>
    <span class="na">download_directory</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/home/steffen/workdir'</span>
    <span class="na">download_timeout</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3600'</span>
    <span class="na">download_directory_owner</span><span class="pi">:</span> <span class="s1">'</span><span class="s">steffen'</span>
    <span class="na">download_directory_group</span><span class="pi">:</span> <span class="s1">'</span><span class="s">steffen'</span>
    <span class="na">download_directory_mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0755'</span>
    <span class="na">iso_owner</span><span class="pi">:</span> <span class="s1">'</span><span class="s">steffen'</span>
    <span class="na">iso_group</span><span class="pi">:</span> <span class="s1">'</span><span class="s">steffen'</span>
    <span class="na">iso_mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0600'</span>
    <span class="na">api_token</span><span class="pi">:</span> <span class="kt">!vault</span> <span class="pi">|</span>
          <span class="s">$ANSIBLE_VAULT;1.1;AES256</span>
          <span class="s">[..]</span>
</code></pre></div></div>

<h3 id="downloading-an-iso-image-and-enabling-fips-for-the-iso-image">Downloading an <code class="language-plaintext highlighter-rouge">ISO image</code> and enabling <code class="language-plaintext highlighter-rouge">FIPS</code> for the <code class="language-plaintext highlighter-rouge">ISO image</code></h3>

<p>Enabling <code class="language-plaintext highlighter-rouge">FIPS</code> on top of downloading the image is not much more complicated. You need to configure the following:</p>

<ul>
  <li>Which <code class="language-plaintext highlighter-rouge">ISO image</code> to download</li>
  <li>Where to download it to</li>
  <li>The permissions of both the download directory and the <code class="language-plaintext highlighter-rouge">ISO image</code></li>
  <li>Provide the API token to authenticate against the Red Hat Customer Portal</li>
  <li>Disable Kickstart validation</li>
  <li>Specify a temporary work directory and the permissions to it</li>
  <li>Specify a temporary mount path to mount the original downloaded <code class="language-plaintext highlighter-rouge">ISO image</code> (to extract it’s content)</li>
  <li>Destination path to the custom <code class="language-plaintext highlighter-rouge">ISO image</code> along with the permissions of it</li>
  <li>Enabling the option to enable <code class="language-plaintext highlighter-rouge">FIPS</code></li>
  <li>Enabling the option to recreate the custom <code class="language-plaintext highlighter-rouge">ISO image</code> every time</li>
  <li>Enabling the option to implanting an MD5 checksum which can be checked during booting</li>
</ul>

<p>An example playbook could look something like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">hosts</span><span class="pi">:</span> <span class="s1">'</span><span class="s">localhost'</span>
  <span class="na">gather_facts</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">rhel_iso_kickstart'</span>
  <span class="na">vars</span><span class="pi">:</span>
    <span class="c1"># the checksum of a RHEL 8.8 ISO to download from the Red Hat Customer Portal</span>
    <span class="na">checksum</span><span class="pi">:</span> <span class="s1">'</span><span class="s">517abcc67ee3b7212f57e180f5d30be3e8269e7a99e127a3399b7935c7e00a09'</span>
    <span class="na">download_directory</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/home/steffen/workdir'</span>
    <span class="na">download_directory_owner</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">download_directory_group</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">download_directory_mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0755'</span>
    <span class="na">iso_owner</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">iso_group</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">iso_mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0600'</span>
    <span class="na">validate_kickstart</span><span class="pi">:</span> <span class="no">false</span>
    <span class="na">temporary_mount_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/mnt'</span>
    <span class="na">temporary_work_dir_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/home/steffen/workdir'</span>
    <span class="na">temporary_work_dir_path_owner</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">temporary_work_dir_path_group</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">temporary_work_dir_path_mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0755'</span>
    <span class="na">temporary_work_dir_source_files_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">src'</span>
    <span class="na">temporary_work_dir_source_files_path_owner</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">temporary_work_dir_source_files_path_group</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">temporary_work_dir_source_files_path_mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0755'</span>
    <span class="na">dest_dir_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/home/steffen/workdir'</span>
    <span class="na">custom_iso_owner</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">custom_iso_group</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">custom_iso_mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0755'</span>
    <span class="na">force_recreate_custom_iso</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">implant_md5</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">enable_fips</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">api_token</span><span class="pi">:</span> <span class="kt">!vault</span> <span class="pi">|</span>
          <span class="s">$ANSIBLE_VAULT;1.1;AES256</span>
</code></pre></div></div>

<h3 id="download-a-rhel-iso-image-implant-a-kickstart-create-users-add-custom-post-sections-implant-an-md5-checksum-and-enable-fips">Download a RHEL <code class="language-plaintext highlighter-rouge">ISO image</code>, implant a Kickstart, create users, add custom <code class="language-plaintext highlighter-rouge">%post</code> sections, implant an <code class="language-plaintext highlighter-rouge">MD5</code> checksum and enable <code class="language-plaintext highlighter-rouge">FIPS</code></h3>

<p>This use case leverages basically all the functionality the role offers. It will:</p>

<ul>
  <li>Download a RHEL <code class="language-plaintext highlighter-rouge">ISO image</code></li>
  <li>Implant a Kickstart into the <code class="language-plaintext highlighter-rouge">ISO image</code></li>
  <li>Add create user statements to the Kickstart</li>
  <li>Implant custom <code class="language-plaintext highlighter-rouge">%post</code> sections, but adding to the default ones</li>
  <li>Configure SSH keys for the users that are created</li>
  <li>Implant a MD5 checksum</li>
  <li>Enable <code class="language-plaintext highlighter-rouge">FIPS</code></li>
</ul>

<p>A thorough example of the possible usage can be found down below. Some of the variables are redundant, as they merely reflect the defaults already set, but I wanted to show
<em>what</em> can be changed.</p>

<p>Example playbook:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nn">---</span>
<span class="pi">-</span> <span class="na">hosts</span><span class="pi">:</span> <span class="s1">'</span><span class="s">localhost'</span>
  <span class="na">gather_facts</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">rhel_iso_kickstart'</span>
  <span class="na">vars</span><span class="pi">:</span>
    <span class="c1"># the checksum of a RHEL 8.8 ISO to download from the Red Hat Customer Portal</span>
    <span class="na">checksum</span><span class="pi">:</span> <span class="s1">'</span><span class="s">517abcc67ee3b7212f57e180f5d30be3e8269e7a99e127a3399b7935c7e00a09'</span>
    <span class="na">download_directory</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/home/steffen/workdir'</span>
    <span class="na">download_timeout</span><span class="pi">:</span> <span class="m">3600</span>
    <span class="na">kickstart_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">example.ks'</span>
    <span class="na">validate_kickstart</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">ksvalidator_package_name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">pykickstart'</span>
    <span class="na">temporary_mount_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/mnt'</span>
    <span class="na">temporary_work_dir_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/home/steffen/workdir'</span>
    <span class="na">temporary_work_dir_path_owner</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">temporary_work_dir_path_group</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">temporary_work_dir_path_mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0755'</span>
    <span class="na">temporary_work_dir_source_files_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">src'</span>
    <span class="na">temporary_work_dir_source_files_path_owner</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">temporary_work_dir_source_files_path_group</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">temporary_work_dir_source_files_path_mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0755'</span>
    <span class="na">dest_dir_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/home/steffen'</span>
    <span class="na">xorriso_package_name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">xorriso'</span>
    <span class="na">isolinux_bin_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">isolinux/isolinux.bin'</span>
    <span class="na">boot_cat_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">isolinux/boot.cat'</span>
    <span class="na">pxelinux_cfg_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">isolinux/isolinux.cfg'</span>
    <span class="na">grub_cfg_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">isolinux/grub.conf'</span>
    <span class="na">download_directory_owner</span><span class="pi">:</span> <span class="s1">'</span><span class="s">steffen'</span>
    <span class="na">download_directory_group</span><span class="pi">:</span> <span class="s1">'</span><span class="s">steffen'</span>
    <span class="na">download_directory_mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0755'</span>
    <span class="na">cleanup_iso</span><span class="pi">:</span> <span class="no">false</span>
    <span class="na">cleanup_work_dir</span><span class="pi">:</span> <span class="no">false</span>
    <span class="na">iso_owner</span><span class="pi">:</span> <span class="s1">'</span><span class="s">steffen'</span>
    <span class="na">iso_group</span><span class="pi">:</span> <span class="s1">'</span><span class="s">steffen'</span>
    <span class="na">iso_mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0600'</span>
    <span class="na">custom_iso_owner</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">custom_iso_group</span><span class="pi">:</span> <span class="s1">'</span><span class="s">root'</span>
    <span class="na">custom_iso_mode</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0755'</span>
    <span class="na">force_recreate_custom_iso</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">grub_menu_selection_timeout</span><span class="pi">:</span> <span class="m">3</span>
    <span class="na">implant_md5</span><span class="pi">:</span> <span class="no">false</span>
    <span class="na">implantisomd5_package_name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">isomd5sum'</span>
    <span class="na">quiet_assert</span><span class="pi">:</span> <span class="no">false</span>
    <span class="na">enable_fips</span><span class="pi">:</span> <span class="no">true</span>
    <span class="na">post_sections</span><span class="pi">:</span> <span class="pi">&gt;</span>
      <span class="s">{{</span>
         <span class="s">_def_post_sections +</span>
         <span class="s">[</span>
           <span class="s">{</span>
             <span class="s">'name': 'Custom %post section',</span>
             <span class="s">'template': 'custom_post.j2'</span>
           <span class="s">},</span>
           <span class="s">{</span>
             <span class="s">'name': 'Another %post section',</span>
             <span class="s">'template': 'another_post.j2'</span>
           <span class="s">}</span>
         <span class="s">]</span>
      <span class="s">}}</span>
    <span class="na">users</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">ansible-user'</span>
        <span class="na">gid</span><span class="pi">:</span> <span class="m">2000</span>
        <span class="na">uid</span><span class="pi">:</span> <span class="m">2000</span>
        <span class="na">gecos</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Ansible</span><span class="nv"> </span><span class="s">User'</span>
        <span class="na">create_user_group</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">groups</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s1">'</span><span class="s">wheel'</span>
        <span class="na">shell</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/bin/bash'</span>
        <span class="na">home</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/home/remote-ansible'</span>
        <span class="na">privileged</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">lock</span><span class="pi">:</span> <span class="no">false</span>
        <span class="na">password</span><span class="pi">:</span> <span class="kt">!vault</span> <span class="pi">|</span>
              <span class="s">$ANSIBLE_VAULT;1.1;AES256</span>
              <span class="s">[..]</span>
        <span class="na">authorized_keys</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="kt">!vault</span> <span class="pi">|</span>
              <span class="s">$ANSIBLE_VAULT;1.1;AES256</span>
              <span class="s">[..]</span>

          <span class="pi">-</span> <span class="kt">!vault</span> <span class="pi">|</span>
              <span class="s">$ANSIBLE_VAULT;1.1;AES256</span>
              <span class="s">[..]</span>
    <span class="na">kickstart_root_password</span><span class="pi">:</span> <span class="kt">!vault</span> <span class="pi">|</span>
          <span class="s">$ANSIBLE_VAULT;1.1;AES256</span>
          <span class="s">[..]</span>
    <span class="na">api_token</span><span class="pi">:</span> <span class="kt">!vault</span> <span class="pi">|</span>
          <span class="s">$ANSIBLE_VAULT;1.1;AES256</span>
          <span class="s">[..]</span>

</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>I hope this role spares you a little time in your day to day work. That’s already it for the time being - I hope you enjoyed it :sunglasses:</p>

<h2 id="change-log">Change log</h2>

<h3 id="2024-03-11">2024-03-11</h3>

<ul>
  <li>Adding change log</li>
  <li><code class="language-plaintext highlighter-rouge">markdownlint</code> fixes</li>
  <li>Spelling fixes</li>
</ul>]]></content><author><name>Steffen Scheib</name></author><summary type="html"><![CDATA[Preface]]></summary></entry><entry><title type="html">Manually installing Debian 12 (Bookworm) with fully encrypted LUKS (besides /boot) using debootstrap</title><link href="https://blog.scheib.me/2023/08/28/debootstrapping-debian-bookworm.html" rel="alternate" type="text/html" title="Manually installing Debian 12 (Bookworm) with fully encrypted LUKS (besides /boot) using debootstrap" /><published>2023-08-28T00:00:00+00:00</published><updated>2024-04-01T00:00:00+00:00</updated><id>https://blog.scheib.me/2023/08/28/debootstrapping-debian-bookworm</id><content type="html" xml:base="https://blog.scheib.me/2023/08/28/debootstrapping-debian-bookworm.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>In this post, we’ll cover the installation and configuration of a Debian 12 (Bookworm) system within a live environment.
Such a live system could be the <a href="https://docs.hetzner.com/robot/dedicated-server/troubleshooting/hetzner-rescue-system/">Hetzner rescue mode</a>, or any other live CD based
on Debian, such as <a href="https://www.system-rescue.org/">SystemRescue</a> [formerly known as <em>SystemRescueCd</em>]).
In this example we are going to use the Hetzner rescue mode.</p>

<p>In this post I’ll create three <a href="https://wiki.debian.org/SoftwareRAID">software RAIDs</a> based on <a href="https://packages.debian.org/de/sid/mdadm"><code class="language-plaintext highlighter-rouge">mdadm</code></a>. I’ll create a RAID 1 for
the dedicated <code class="language-plaintext highlighter-rouge">/boot</code> partition, another RAID 1 for the operating system (both the <code class="language-plaintext highlighter-rouge">/boot</code> partition and the OS get installed on NVMe drives) and a RAID 6 which will
consist of all the HDDs in my server.</p>

<p>You do <em>not</em> have to have the very same setup as I do, but please keep in mind, that you might need to adapt certain commands. To ease the process for people with a
different setup than mine, I’ll add an information block on each of those commands that are specific to my use case - similar to the one below:</p>

<p>:information_source: This is an information block :sunglasses:</p>

<p>In my blog post
<a href="https://blog.scheib.me/2023/05/01/debootstrapping-debian.html">Manually installing Debian 11 (Bullseye) with fully encrypted <code class="language-plaintext highlighter-rouge">LUKS</code> (besides /boot) using <code class="language-plaintext highlighter-rouge">debootstrap</code></a> I am
describing the partitioning process with no software RAID. This might be helpful for those folks that do not want to use a RAID.</p>

<p>With that being set, let’s jump right into it.</p>

<h2 id="prerequisites">Prerequisites</h2>

<p>The only real prerequisite is, that you have booted your server and are logged in to your live CD environment as root.</p>

<h2 id="preparing-the-disks-of-the-server-partitioning-the-drives">Preparing the disks of the server: Partitioning the drives</h2>

<p>The first step is to partition the drives we are going to use using <code class="language-plaintext highlighter-rouge">gdisk</code> (in this example), <code class="language-plaintext highlighter-rouge">fdisk</code> or anything similar.</p>

<p>:information_source: I am going to use the partition type <code class="language-plaintext highlighter-rouge">fd00</code> (Linux RAID) for the second and third partition. If you do not want to RAID your disks, simply
use <code class="language-plaintext highlighter-rouge">8300</code> (Linux Filesystem).</p>

<p>We are going to configure three partitions:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">BIOS boot partition</code> (<strong>32 MB</strong>, although 1 MB would be theoretically enough, type <code class="language-plaintext highlighter-rouge">EF02</code>).
This partition is necessary for <code class="language-plaintext highlighter-rouge">GPT</code> partitions in order to load the second stage of GRUB.</li>
  <li><code class="language-plaintext highlighter-rouge">/boot partition</code> (<strong>1024 MB - 4096MB</strong>, type <code class="language-plaintext highlighter-rouge">FD00</code>):
In this partition the boot files will be stored. In order to be able to boot a machine, this partition needs to be unencrypted.
If you are not planning on rebooting very frequently (to apply kernel updates), consider using 4096MB for the partition size;
Otherwise you may need to do manual cleanups in order to install new kernel versions. I have used 8192MB to be able to run the system <em>very</em> long until I need to reboot to
apply kernels. Your mileage may very, of course.</li>
  <li>The remaining space will be put in this partition (type <code class="language-plaintext highlighter-rouge">FD00</code> as well), which is later holding all our <strong>encrypted</strong> data</li>
</ol>

<p>:information_source: If you only have one disk or simply don’t want to create a RAID of your disks, you need to adjust the types accordingly (usually, type <code class="language-plaintext highlighter-rouge">ef02</code>).</p>

<!-- markdownlint-disable MD033 -->
<details>
<summary>Example output of <code>gdisk</code>:</summary>


<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">root@rescue ~ #</span><span class="w"> </span>gdisk /dev/nvme0n1
<span class="go">GPT fdisk (gdisk) version 1.0.9

Partition table scan:
  MBR: not present
  BSD: not present
  APM: not present
  GPT: not present

Creating new GPT entries in memory.

Command (? for help): n
Partition number (1-128, default 1):
First sector (34-1875384974, default = 2048) or {+-}size{KMGTP}:
Last sector (2048-1875384974, default = 1875384319) or {+-}size{KMGTP}: +32M
Current type is 8300 (Linux filesystem)
Hex code or GUID (L to show codes, Enter = 8300): EF02
Changed type of partition to 'BIOS boot partition'

Command (? for help): n
Partition number (2-128, default 2):
First sector (34-1875384974, default = 67584) or {+-}size{KMGTP}:
Last sector (67584-1875384974, default = 1875384319) or {+-}size{KMGTP}: +8192M
Current type is 8300 (Linux filesystem)
Hex code or GUID (L to show codes, Enter = 8300): fd00
Changed type of partition to 'Linux RAID'

Command (? for help): n
Partition number (3-128, default 3):
First sector (34-1875384974, default = 16844800) or {+-}size{KMGTP}:
Last sector (16844800-1875384974, default = 1875384319) or {+-}size{KMGTP}:
Current type is 8300 (Linux filesystem)
Hex code or GUID (L to show codes, Enter = 8300): fd00
Changed type of partition to 'Linux RAID'

Command (? for help): w

Final checks complete. About to write GPT data. THIS WILL OVERWRITE EXISTING
PARTITIONS!!

Do you want to proceed? (Y/N): y
</span><span class="gp">OK;</span><span class="w"> </span>writing new GUID partition table <span class="o">(</span>GPT<span class="o">)</span> to /dev/nvme0n1.
<span class="go">The operation has completed successfully.</span></code></pre></figure>


</details>
<p><br />
<!-- markdownlint-enable MD033 --></p>

<p>At the end we will have partitions, which should look similar to the following output (besides the last partition size, which depends - of course - on the overall disk size):</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>gdisk <span class="nt">-l</span> /dev/nvme0n1
<span class="go">GPT fdisk (gdisk) version 1.0.9
[..]
Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048           67583   32.0 MiB    EF02  BIOS boot partition
   2           67584        16844799   8.0 GiB     FD00  Linux RAID
   3        16844800      1875384319   886.2 GiB   FD00  Linux RAID
</span><span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<p>:information_source: Below part concerns RAIDs in particular. You need to adjust it to your use case.</p>

<p>As I said in my introduction, I’ll be utilizing a software RAID 1 for my operating system. We could either go ahead and rerun the same <code class="language-plaintext highlighter-rouge">gdisk</code> commands from above, or make
use of <code class="language-plaintext highlighter-rouge">sgdisk</code>, which is part of <code class="language-plaintext highlighter-rouge">gdisk</code>. <code class="language-plaintext highlighter-rouge">sgdisk</code> allows us to copy a partition table from one drive to another and also lets us randomize
the <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier"><code class="language-plaintext highlighter-rouge">GUIDs</code></a> of the partition table.</p>

<p>While for one additional disk this doesn’t make much of a difference in terms of work, it certainly is much easier for a whole bunch of disks.</p>

<p>Now, let’s continue with the procedure.</p>

<p>First, we need to copy the partition table to our additional disk using <code class="language-plaintext highlighter-rouge">sgdisk -R /dev/nvme1n1 /dev/nvme0n1</code>. <code class="language-plaintext highlighter-rouge">nvme0n1</code> is the disk we modified manually above,
and <code class="language-plaintext highlighter-rouge">nvme1n1</code> is the additional disk:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>sgdisk <span class="nt">-R</span> /dev/nvme1n1 /dev/nvme0n1
<span class="go">The operation has completed successfully.
</span></code></pre></div></div>

<p>This will leave us with the following two <strong>identical</strong> partition tables:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>gdisk <span class="nt">-l</span> /dev/nvme0n1
<span class="go">GPT fdisk (gdisk) version 1.0.9
[..]
Disk identifier (GUID): C26C13FA-CEF0-4FBC-AA0C-239E093CAAAA
[..]
Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048           67583   32.0 MiB    EF02  BIOS boot partition
   2           67584        16777216   8.0 GiB     FD00  Linux RAID
   3        16779264      1875384319   886.3 GiB   FD00  Linux RAID
</span><span class="gp">root@rescue ~ #</span><span class="w"> </span>gdisk <span class="nt">-l</span> /dev/nvme1n1
<span class="go">GPT fdisk (gdisk) version 1.0.9
[..]
Disk identifier (GUID): C26C13FA-CEF0-4FBC-AA0C-239E093CAAAA
[..]
Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048           67583   32.0 MiB    EF02  BIOS boot partition
   2           67584        16777216   8.0 GiB     FD00  Linux RAID
   3        16779264      1875384319   886.3 GiB   FD00  Linux RAID
</span></code></pre></div></div>

<p>I want you to pay close attention to the <code class="language-plaintext highlighter-rouge">Disk identifier (GUID)</code> column: They are <strong>the same</strong>.
What we now need to do, is to randomize the newly created partition table (in terms of its <code class="language-plaintext highlighter-rouge">GUID</code>) using <code class="language-plaintext highlighter-rouge">sgdisk -G /dev/nvme1n1</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>sgdisk <span class="nt">-G</span> /dev/nvme1n1
<span class="go">The operation has completed successfully.
</span><span class="gp">root@rescue ~ #</span><span class="w"> </span>gdisk <span class="nt">-l</span> /dev/nvme1n1
<span class="go">GPT fdisk (gdisk) version 1.0.9
[..]
Disk identifier (GUID): BFE9B394-88A2-4A76-A123-1D65749AFFFF
[..]

Number  Start (sector)    End (sector)  Size       Code  Name
   1            2048           67583   32.0 MiB    EF02  BIOS boot partition
   2           67584        16777216   8.0 GiB     FD00  Linux RAID
   3        16779264      1875384319   886.3 GiB   FD00  Linux RAID
</span><span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<p>As you can see, now the <code class="language-plaintext highlighter-rouge">GUID</code> is different, perfect :sunglasses:</p>

<h2 id="optional-creating-a-raid-1-using-mdadm">Optional: Creating a RAID 1 using <code class="language-plaintext highlighter-rouge">mdadm</code></h2>

<p>Let’s move on to creating the RAID 1s with those NVMe disks.</p>

<p>Creating a RAID 1 is super easy with <code class="language-plaintext highlighter-rouge">mdadm</code>. We need four things for that:</p>

<ul>
  <li>A RAID label (common would be <code class="language-plaintext highlighter-rouge">md0</code> for the first array, <code class="language-plaintext highlighter-rouge">md1</code> for the second, etc.)</li>
  <li>The RAID level (e.g. 1, 5, 6, 60, etc.)</li>
  <li>The number of RAID devices (in our case 2)</li>
  <li>The RAID devices, which are the partitions we created earlier</li>
</ul>

<p>Here is the deal: We need two RAID 1 arrays. One, which will hold our <code class="language-plaintext highlighter-rouge">/boot</code> partition (which is the second partition we created on the NVMe devices) and the second one
will be holding all our encrypted data (which is the third partition on the NVMe devices).</p>

<p>The command to run would look something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mdadm --create /dev/md/&lt;LABEL&gt; --level=&lt;RAID_LEVEL&gt; --raid-devices=&lt;RAID_DEVICES_NUMBER&gt; &lt;PATH_TO_PARTITION_OF_RAID_DEVICE_1&gt; &lt;PATH_TO_PARTITION_OF_RAID_DEVICE_2&gt; &lt;PATH_TO_PARTITION_OF_RAID_DEVICE_n&gt; [--metadata=N]
</code></pre></div></div>

<p>In my case, it looks like this for the first RAID (<code class="language-plaintext highlighter-rouge">/boot</code>):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mdadm --create /dev/md0 --level=1 --raid-devices=2 /dev/nvme0n1p2 /dev/nvme1n1p2 --metadata=0.90
</code></pre></div></div>

<p>:warning: The <code class="language-plaintext highlighter-rouge">--metadata=0.90</code> is necessary for an array to be <code class="language-plaintext highlighter-rouge">bootable</code> - at least to my knowledge.  I am not 100% certain that 0.90 is <em>still</em> required, but in
earlier days it was for sure. Feel free to try it out and let me know! :slightly_smiling_face:</p>

<p>Next, we’ll create the second RAID for our encrypted data:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">mdadm --create /dev/md1 --level=1 --raid-devices=2 /dev/nvme0n1p3 /dev/nvme1n1p3 --metadata=1.2
</span></code></pre></div></div>

<p>:information_source: This time we are passing <code class="language-plaintext highlighter-rouge">--metadata=1.2</code> as we do not need our array to be bootable. The older 0.9 metadata format has some limitations compared
to 1.2. You can read up on them on the <a href="https://linux.die.net/man/8/mdadm">manpage of <code class="language-plaintext highlighter-rouge">mdadm</code></a>.</p>

<p>Now we can check on the progress of the RAID re-synchronization via <code class="language-plaintext highlighter-rouge">/proc/mdstat</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span><span class="nb">cat</span> /proc/mdstat
<span class="go">Personalities : [raid1]
md1 : active raid1 nvme1n1p3[1] nvme0n1p3[0]
      929170432 blocks super 1.2 [2/2] [UU]
</span><span class="gp">      [==&gt;</span>..................]  resync <span class="o">=</span> 11.1% <span class="o">(</span>103223424/929170432<span class="o">)</span> <span class="nv">finish</span><span class="o">=</span>66.8min <span class="nv">speed</span><span class="o">=</span>205925K/sec
<span class="go">      bitmap: 7/7 pages [28KB], 65536KB chunk

md0 : active raid1 nvme1n1p2[1] nvme0n1p2[0]
      8354752 blocks [2/2] [UU]

</span><span class="gp">unused devices: &lt;none&gt;</span><span class="w">
</span><span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<p>You can greatly speed up the RAID re-synchronization using the following parameters:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sysctl -w dev.raid.speed_limit_min=&lt;NUMBER&gt;</code>, e.g. <code class="language-plaintext highlighter-rouge">sysctl -w dev.raid.speed_limit_min=500000</code></li>
  <li><code class="language-plaintext highlighter-rouge">sysctl -w dev.raid.speed_limit_max=&lt;NUMBER&gt;</code>, e.g. <code class="language-plaintext highlighter-rouge">sysctl -w dev.raid.speed_limit_max=500000</code></li>
</ul>

<p>:information_source: This will have a significant performance impact on your system!</p>

<p>With the above I could speed up my RAID re-synchronization a lot :sunglasses::</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span><span class="nb">cat</span> /proc/mdstat
<span class="go">Personalities : [raid1]
md1 : active raid1 nvme1n1p3[1] nvme0n1p3[0]
      929170432 blocks super 1.2 [2/2] [UU]
</span><span class="gp">      [=======&gt;</span>.............]  resync <span class="o">=</span> 36.0% <span class="o">(</span>334924032/929170432<span class="o">)</span> <span class="nv">finish</span><span class="o">=</span>6.6min <span class="nv">speed</span><span class="o">=</span>1498608K/sec
<span class="go">      bitmap: 5/7 pages [20KB], 65536KB chunk

md0 : active raid1 nvme1n1p2[1] nvme0n1p2[0]
      8354752 blocks [2/2] [UU]

</span><span class="gp">unused devices: &lt;none&gt;</span><span class="w">
</span><span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<h2 id="optional-partition-another-drive-to-store-your-application-data-to-keep-it-separate-from-the-system-disk">Optional: Partition another drive to store your (application) data to keep it separate from the system disk</h2>

<p>I have a server that has a few HDDs, 10 namely. I am going to format each of those drives with only a single partition of type <code class="language-plaintext highlighter-rouge">fd00</code>. I only did the setup on one
HDD (<code class="language-plaintext highlighter-rouge">/dev/sda</code>) manually and copied the partition table to the other HDDs as described in the section above.</p>

<p>With the help of a little BASH, I could apply the same partition table to each of the HDDs:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>d <span class="k">in</span> <span class="s2">"/dev/sd"</span><span class="k">*</span><span class="p">;</span> <span class="k">do</span>
  <span class="o">[[</span> <span class="o">!</span> <span class="s2">"</span><span class="k">${</span><span class="nv">d</span><span class="k">}</span><span class="s2">"</span> <span class="o">=</span>~ ^<span class="se">\/</span>dev<span class="se">\/</span>sda <span class="o">]]</span> <span class="o">||</span> <span class="o">{</span>
    <span class="k">continue</span><span class="p">;</span>
  <span class="o">}</span><span class="p">;</span>
  <span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">d</span><span class="k">}</span><span class="s2">"</span>
  sgdisk <span class="nt">-R</span> <span class="s2">"</span><span class="k">${</span><span class="nv">d</span><span class="k">}</span><span class="s2">"</span> /dev/sda <span class="o">&amp;&amp;</span> sgdisk <span class="nt">-G</span> <span class="s2">"</span><span class="k">${</span><span class="nv">d</span><span class="k">}</span><span class="s2">"</span>
<span class="k">done</span>
</code></pre></div></div>

<h2 id="formatting-partitions-and-setting-up-the-encrypted-lvm">Formatting partitions and setting up the encrypted <code class="language-plaintext highlighter-rouge">LVM</code></h2>

<p>The goal of this section is to end up with a partition layout using the <a href="https://en.wikipedia.org/wiki/Logical_volume_management">Logical Volume Manager</a> (<code class="language-plaintext highlighter-rouge">LVM</code>).
In order to achieve this we are going to create an encrypted <a href="https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup">Linux Unified Key Setup</a> (<code class="language-plaintext highlighter-rouge">LUKS</code>) partition on which we
will create our <code class="language-plaintext highlighter-rouge">LVM</code>.
The partition table should look ideally similar to the one in the table below. As I am currently setting up a server to use
with <a href="https://www.proxmox.com">Proxmox</a> the sizing might be different from your choice.</p>

<p>I inserted an additional column where I set an <strong>X</strong> whether the partition is recommended to create on any system or whether the partition is specific for the usage
with Proxmox.
In my case the disk, where my system is going to get installed on (<code class="language-plaintext highlighter-rouge">/dev/md2</code>) is roughly 890GB big. So it is easily possible at any time to extend the current
partition layout or even extend the size of the different point mounts - thanks to <code class="language-plaintext highlighter-rouge">LVM</code>!</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">mount point</th>
      <th style="text-align: center">filesystem type</th>
      <th style="text-align: center">size</th>
      <th style="text-align: center">recommended</th>
      <th style="text-align: center">volume group</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">XFS</code></td>
      <td style="text-align: center">16 GB</td>
      <td style="text-align: center">X</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">vg_system</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/home</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">XFS</code></td>
      <td style="text-align: center">4 GB</td>
      <td style="text-align: center">X</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">vg_system</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/tmp</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">XFS</code></td>
      <td style="text-align: center">4 GB</td>
      <td style="text-align: center">X</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">vg_system</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/var</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">XFS</code></td>
      <td style="text-align: center">32 GB</td>
      <td style="text-align: center">X</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">vg_system</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/var/tmp</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">XFS</code></td>
      <td style="text-align: center">4 GB</td>
      <td style="text-align: center">X</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">vg_system</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/var/log</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">XFS</code></td>
      <td style="text-align: center">8 GB</td>
      <td style="text-align: center">X</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">vg_system</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/var/log/audit</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">XFS</code></td>
      <td style="text-align: center">2 GB</td>
      <td style="text-align: center">-</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">vg_system</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">swap</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">swap</code></td>
      <td style="text-align: center">16 GB</td>
      <td style="text-align: center">X</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">vg_system</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/var/lib/vz</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">XFS</code></td>
      <td style="text-align: center">5 TB</td>
      <td style="text-align: center">-</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">vg_data</code></td>
    </tr>
  </tbody>
</table>

<h2 id="formatting-boot">Formatting /boot</h2>

<p>After creating the partitions on the system disk (<code class="language-plaintext highlighter-rouge">/dev/md0</code>) earlier, we are going to format the partition (which we will use as <code class="language-plaintext highlighter-rouge">/boot</code>) using <code class="language-plaintext highlighter-rouge">XFS</code> as filesystem. For
that we’ll use <code class="language-plaintext highlighter-rouge">mkfs.xfs /dev/md0</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>mkfs.xfs /dev/md0
<span class="go">meta-data=/dev/md0               isize=512    agcount=8, agsize=261088 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=0
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=2088688, imaxpct=25
         =                       sunit=32     swidth=32 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
Discarding blocks...Done.
</span></code></pre></div></div>

<h2 id="creating-a-luks-partition-to-hold-our-system-partitions">Creating a <code class="language-plaintext highlighter-rouge">LUKS</code> partition to hold our system partitions</h2>

<p>Next, we want to have all remaining partitions (e.g. <code class="language-plaintext highlighter-rouge">/</code>, <code class="language-plaintext highlighter-rouge">/home</code>, <code class="language-plaintext highlighter-rouge">/tmp</code>, etc.) within an encrypted <code class="language-plaintext highlighter-rouge">LUKS</code> partition. For that we have created the second RAID <code class="language-plaintext highlighter-rouge">md1</code>.</p>

<p>In order to encrypt the partition, following command is executed:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cryptsetup -s 512 -c aes-xts-plain64 luksFormat /dev/md1
</code></pre></div></div>

<p>:warning: First, you need to confirm, that <strong>all data on this partition will be lost</strong>.
After you confirmed it, you will be prompted to enter a password for the encryption (please use a <strong>complex</strong> and <strong>unique</strong> password!) and repeat the password.</p>

<p>:warning: Make sure to save the password in your password safe (or remember it :open_mouth: ), otherwise you will not be able to access the system ever again - all data
will be lost. <strong>There is no way to recover them</strong>.</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>cryptsetup <span class="nt">-s</span> 512 <span class="nt">-c</span> aes-xts-plain64 luksFormat /dev/md1
<span class="go">
WARNING!
========
This will overwrite data on /dev/md1 irrevocably.

Are you sure? (Type 'yes' in capital letters): YES
Enter passphrase for /dev/md1:
Verify passphrase:
</span><span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<p>Quickly verify, whether the encrypted <code class="language-plaintext highlighter-rouge">LUKS</code> partition is setup properly using the following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cryptsetup luksOpen /dev/md1 crypted_system
</code></pre></div></div>

<p>The system will ask you for the password to decrypt the <code class="language-plaintext highlighter-rouge">LUKS</code> partition. After you entered the correct password, you will be able to see a new
device: <code class="language-plaintext highlighter-rouge">/dev/mapper/crypted_system</code></p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>cryptsetup luksOpen /dev/md1 crypted_system
<span class="go">Enter passphrase for /dev/md1:
</span><span class="gp">root@rescue ~ #</span><span class="w"> </span><span class="nb">ls</span> <span class="nt">-la</span> /dev/mapper/
<span class="go">total 0
drwxr-xr-x  2 root root      80 Aug 28 21:23 .
drwxr-xr-x 15 root root    8.3K Aug 28 21:23 ..
crw-------  1 root root 10, 236 Aug 28 15:06 control
</span><span class="gp">lrwxrwxrwx  1 root root       7 Aug 28 21:23 crypted_system -&gt;</span><span class="w"> </span>../dm-0
<span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<h3 id="optional-creating-luks-partition-for-the-data-partition">Optional: Creating <code class="language-plaintext highlighter-rouge">LUKS</code> partition for the data partition</h3>

<p>Basically, the same steps as we used for the <code class="language-plaintext highlighter-rouge">LUKS</code> partition that holds our system partitions have to be applied for the data partitions.
The differences are only a few simple things:</p>

<ul>
  <li>The device is now <code class="language-plaintext highlighter-rouge">/dev/md2</code></li>
  <li>We will encrypt the device as a whole and not creating partitions before hand - simply because we don’t need to.</li>
  <li>With <code class="language-plaintext highlighter-rouge">cryptsetup luksOpen</code> we need to specify a different name for the device, which holds the decrypted data: <code class="language-plaintext highlighter-rouge">crypted_data</code></li>
  <li><strong>Ideally</strong> you want to use a different password as for the system <code class="language-plaintext highlighter-rouge">LUKS</code> partition. We will later replace the password with a key file on the encrypted root file
system in order to make the unlocking of the system during the boot easier</li>
</ul>

<h2 id="setting-up-lvm-creating-a-physical-volume-a-volume-group-and-several-logical-volumes-for-the-encrypted-luks-partition">Setting up <code class="language-plaintext highlighter-rouge">LVM</code>: Creating a physical volume, a volume group and several logical volumes for the encrypted <code class="language-plaintext highlighter-rouge">LUKS</code> partition</h2>

<p>In order to implement and use <a href="https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/8/html-single/configuring_and_managing_logical_volumes/index#lvm-architecture_overview-of-logical-volume-management"><code class="language-plaintext highlighter-rouge">LVM</code></a>
we need to follow the following approach:</p>

<ol>
  <li>Create a physical volume (<code class="language-plaintext highlighter-rouge">PV</code>) using <code class="language-plaintext highlighter-rouge">pvcreate</code> on top of the decrypted <code class="language-plaintext highlighter-rouge">LUKS</code> partition</li>
  <li>Create a volume group (<code class="language-plaintext highlighter-rouge">VG</code>) using <code class="language-plaintext highlighter-rouge">vgcreate</code> on top of the physical volume</li>
  <li>Create several logical volumes (<code class="language-plaintext highlighter-rouge">LV</code>) using <code class="language-plaintext highlighter-rouge">lvcreate</code> on top of the volume group</li>
</ol>

<h2 id="creating-a-physical-volume-on-top-of-the-luks-partition">Creating a physical volume on top of the <code class="language-plaintext highlighter-rouge">LUKS</code> partition</h2>

<p>The first step is to create a physical volume on top of the <code class="language-plaintext highlighter-rouge">LUKS</code> partition. This is very simple and does not need any further explanation.</p>

<p>Following command is used to create the physical volume:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pvcreate /dev/mapper/crypted_system
</code></pre></div></div>

<p>The output will look similar to the following:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>pvcreate /dev/mapper/crypted_system
<span class="go">  Physical volume "/dev/mapper/crypted_system" successfully created.
</span><span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<h2 id="creating-a-volume-group-on-top-of-the-physical-volume">Creating a volume group on top of the physical volume</h2>

<p>The second step is to create a volume group on top of the just created physical volume. In this case we are going to use <code class="language-plaintext highlighter-rouge">vg_system</code> as the name of the volume group.
Following command is used to create a volume group:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vgcreate vg_system /dev/mapper/crypted_system
</code></pre></div></div>

<p>The output will look similar to the following:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>vgcreate vg_system /dev/mapper/crypted_system
<span class="go">  Volume group "vg_system" successfully created
</span><span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<h2 id="creating-logical-volumes-on-top-of-the-volume-group">Creating logical volumes on top of the volume group</h2>

<p>The last step is to create logical volumes on top of the just created volume group. Following command is used to create a logical volume:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lvcreate -L &lt;size&gt; -n &lt;name&gt; &lt;volume_group_name&gt;
</code></pre></div></div>

<p>For example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lvcreate -L 16G -n root vg_system
</code></pre></div></div>

<p>In the above example a logical volume with the size of <strong>16 GB</strong> and the name <strong>root</strong> in the volume group <strong>vg_system</strong> is created.</p>

<p>This command can be used to create all logical volumes accordingly. Best practice - regarding the naming - is to use the name of the mount
point (e.g. <code class="language-plaintext highlighter-rouge">/</code> = <code class="language-plaintext highlighter-rouge">root</code>, <code class="language-plaintext highlighter-rouge">/tmp</code> = <code class="language-plaintext highlighter-rouge">tmp</code>, etc.).</p>

<p>If the mount point contains slashes, replace them via underscore (e.g. <code class="language-plaintext highlighter-rouge">/var/log</code> = <code class="language-plaintext highlighter-rouge">var_log</code>, <code class="language-plaintext highlighter-rouge">/var/tmp</code> = <code class="language-plaintext highlighter-rouge">var_tmp</code>, <code class="language-plaintext highlighter-rouge">/var/log/audit</code> = <code class="language-plaintext highlighter-rouge">var_log_audit</code>, etc.).
This is the best practice approach, which I have implemented on many servers/infrastructures.</p>

<p>The output will look similar to the following:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>lvcreate <span class="nt">-L</span> 16G <span class="nt">-n</span> root vg_system
<span class="go">  Logical volume "root" created.
</span><span class="gp">root@rescue ~ #</span><span class="w"> </span>lvcreate <span class="nt">-L</span> 4G <span class="nt">-n</span> home vg_system
<span class="go">  Logical volume "home" created.
</span><span class="gp">root@rescue ~ #</span><span class="w"> </span>lvcreate <span class="nt">-L</span> 4G <span class="nt">-n</span> tmp vg_system
<span class="go">  Logical volume "tmp" created.
</span><span class="gp">root@rescue ~ #</span><span class="w"> </span>lvcreate <span class="nt">-L</span> 32G <span class="nt">-n</span> var vg_system
<span class="go">  Logical volume "var" created.
</span><span class="gp">root@rescue ~ #</span><span class="w"> </span>lvcreate <span class="nt">-L</span> 4G <span class="nt">-n</span> var_tmp vg_system
<span class="go">  Logical volume "var_tmp" created.
</span><span class="gp">root@rescue ~ #</span><span class="w"> </span>lvcreate <span class="nt">-L</span> 8G <span class="nt">-n</span> var_log vg_system
<span class="go">  Logical volume "var_log" created.
</span><span class="gp">root@rescue ~ #</span><span class="w"> </span>lvcreate <span class="nt">-L</span> 2G <span class="nt">-n</span> var_log_audit vg_system
<span class="go">  Logical volume "var_log_audit" created.
</span><span class="gp">root@rescue ~ #</span><span class="w"> </span>lvcreate <span class="nt">-L</span> 16G <span class="nt">-n</span> swap vg_system
<span class="go">  Logical volume "swap" created.
</span><span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<p>And will leave us with following logical volumes:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>lvs
<span class="go">  LV            VG        Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
  home          vg_system -wi-a-----  4.00g
  root          vg_system -wi-a----- 16.00g
  swap          vg_system -wi-a----- 16.00g
  tmp           vg_system -wi-a-----  4.00g
  var           vg_system -wi-a----- 32.00g
  var_log       vg_system -wi-a-----  8.00g
  var_log_audit vg_system -wi-a-----  2.00g
  var_tmp       vg_system -wi-a-----  4.00g
</span><span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<p>.. and plenty of space left in the volume group:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>vgs
<span class="gp">  VG        #</span>PV <span class="c">#LV #SN Attr   VSize    VFree</span>
<span class="go">  vg_system   1   8   0 wz--n- &lt;886.11g &lt;800.11g
</span><span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<h3 id="optional-create-lvm-for-the-data-disk">Optional: Create <code class="language-plaintext highlighter-rouge">LVM</code> for the data disk</h3>

<p>As for the system partition, the same approach needs to be done for the data disk. As I briefly explained the exact approach and implementation above, here just the command
output:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>pvcreate /dev/mapper/crypted_data
<span class="go">  Physical volume "/dev/mapper/crypted_data" successfully created
</span><span class="gp">root@rescue ~ #</span><span class="w"> </span>vgcreate vg_data /dev/mapper/crypted_data
<span class="go">  Volume group "vg_data" successfully created
</span><span class="gp">root@rescue ~ #</span><span class="w"> </span>lvcreate <span class="nt">-L</span> 5T <span class="nt">-n</span> var_lib_vz vg_data
<span class="go">  Logical volume "var_lib_vz" created
</span><span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<h2 id="create-filesystems-on-logical-volumes">Create filesystems on logical volumes</h2>

<p>In order to use the logical volumes, we need to create file systems on them. To ease this process - and save me some manual work - I wrote a little BASH script.
The purpose of this script is to create <code class="language-plaintext highlighter-rouge">XFS</code> filesystems on all logical volumes on all volume groups specified and create a swap “filesystem” on the logical volume,
which is named <code class="language-plaintext highlighter-rouge">&lt;vg&gt;-swap</code>. Ff you have multiple swaps or a different naming, you can easily modify this script.
I added a semicolon after each command, so one can simply copy/paste the whole script into the terminal.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># define the filesystem to use here</span>
<span class="nb">declare</span> <span class="nt">-r</span> <span class="nv">filesystem_type</span><span class="o">=</span><span class="s2">"xfs"</span>
<span class="c"># define your volume groups here</span>
<span class="k">for </span>vg <span class="k">in </span>vg_system vg_data<span class="p">;</span> <span class="k">do</span>
  <span class="c"># iterate over all LVs</span>
  <span class="k">for </span>lv <span class="k">in</span> <span class="s2">"/dev/mapper/</span><span class="k">${</span><span class="nv">vg</span><span class="k">}</span><span class="s2">-"</span><span class="k">*</span><span class="p">;</span> <span class="k">do
    if</span> <span class="o">[[</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="k">${</span><span class="nv">lv</span><span class="k">}</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span> <span class="o">=</span>~ ^<span class="k">${</span><span class="nv">vg</span><span class="k">}</span><span class="nt">-swap</span><span class="nv">$ </span><span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
      <span class="c"># create a swap</span>
      mkswap <span class="s2">"</span><span class="k">${</span><span class="nv">lv</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span>
    <span class="k">else</span>
      <span class="c"># create filesystem</span>
      mkfs.<span class="s2">"</span><span class="k">${</span><span class="nv">filesystem_type</span><span class="k">}</span><span class="s2">"</span> <span class="nt">-f</span> <span class="s2">"</span><span class="k">${</span><span class="nv">lv</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span>
    <span class="k">fi</span><span class="p">;</span>
  <span class="k">done</span><span class="p">;</span>
<span class="k">done</span>
</code></pre></div></div>

<!-- markdownlint-disable MD022 MD023 MD025 MD033 -->
<details>
<summary>Following a sample output:</summary>


<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">root@rescue ~ #</span><span class="w"> </span><span class="c">#!/bin/bash</span>
<span class="gp">#</span><span class="w"> </span>define the filesystem to use here
<span class="go">declare -r filesystem_type="xfs"
</span><span class="gp">#</span><span class="w"> </span>define your volume <span class="nb">groups </span>here
<span class="gp">for vg in vg_system vg_data;</span><span class="w"> </span><span class="k">do</span>
<span class="gp">  #</span><span class="w"> </span>iterate over all LVs
<span class="gp">  for lv in "/dev/mapper/$</span><span class="o">{</span>vg<span class="o">}</span>-<span class="s2">"*; do
</span><span class="gp">    if [[ "$</span><span class="s2">(basename "</span><span class="k">${</span><span class="nv">lv</span><span class="k">}</span><span class="s2">")"</span> <span class="o">=</span>~ ^<span class="k">${</span><span class="nv">vg</span><span class="k">}</span><span class="nt">-swap</span><span class="nv">$ </span><span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
<span class="gp">      #</span><span class="w"> </span>create a swap
<span class="gp">      mkswap "$</span><span class="o">{</span>lv<span class="o">}</span><span class="s2">";
</span><span class="go">    else
</span><span class="gp">      #</span><span class="w"> </span>create filesystem
<span class="gp">      mkfs."$</span><span class="o">{</span>filesystem_type<span class="o">}</span><span class="s2">" -f "</span><span class="k">${</span><span class="nv">lv</span><span class="k">}</span><span class="s2">";
</span><span class="gp">    fi;</span><span class="w">
</span><span class="gp">  done;</span><span class="w">
</span><span class="go">done
meta-data=/dev/mapper/vg_system-home isize=512    agcount=8, agsize=131072 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=0
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=1048576, imaxpct=25
         =                       sunit=32     swidth=32 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
meta-data=/dev/mapper/vg_system-root isize=512    agcount=16, agsize=262144 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=0
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=4194304, imaxpct=25
         =                       sunit=32     swidth=32 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
Setting up swapspace version 1, size = 16 GiB (17179865088 bytes)
no label, UUID=edf2db0c-5d7f-4a84-9af3-4f842316fb68
meta-data=/dev/mapper/vg_system-tmp isize=512    agcount=8, agsize=131072 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=0
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=1048576, imaxpct=25
         =                       sunit=32     swidth=32 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
meta-data=/dev/mapper/vg_system-var isize=512    agcount=16, agsize=524288 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=0
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=8388608, imaxpct=25
         =                       sunit=32     swidth=32 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
meta-data=/dev/mapper/vg_system-var_log isize=512    agcount=8, agsize=262144 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=0
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=2097152, imaxpct=25
         =                       sunit=32     swidth=32 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
meta-data=/dev/mapper/vg_system-var_log_audit isize=512    agcount=8, agsize=65536 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=0
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=524288, imaxpct=25
         =                       sunit=32     swidth=32 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
meta-data=/dev/mapper/vg_system-var_tmp isize=512    agcount=8, agsize=131072 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=0
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=1048576, imaxpct=25
         =                       sunit=32     swidth=32 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=16384, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
meta-data=/dev/mapper/vg_data-var_lib_vz isize=512    agcount=33, agsize=41942912 blks
         =                       sectsz=4096  attr=2, projid32bit=1
         =                       crc=1        finobt=1, sparse=1, rmapbt=0
         =                       reflink=1    bigtime=1 inobtcount=1 nrext64=0
data     =                       bsize=4096   blocks=1342177280, imaxpct=5
         =                       sunit=128    swidth=1024 blks
naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
log      =internal log           bsize=4096   blocks=521728, version=2
         =                       sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
</span><span class="gp">root@rescue ~ #</span></code></pre></figure>


</details>
<!-- markdownlint-enable MD022 MD023 MD025 MD033 -->

<p>Note: If you have volume groups defined in the script, which are non-existent, you will retrieve some error messages, like the following (obviously <code class="language-plaintext highlighter-rouge">vg_data</code> did not exist):</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">Error accessing specified device /dev/mapper/vg_data-*: No such file or directory
Usage: mkfs.xfs
/* blocksize */         [-b size=num]
/* metadata */          [-m crc=0|1,finobt=0|1,uuid=xxx,rmapbt=0|1,reflink=0|1]
/* data subvol */       [-d agcount=n,agsize=n,file,name=xxx,size=num,
                            (sunit=value,swidth=value|su=num,sw=num|noalign),
                            sectsize=num
/* force overwrite */   [-f]
/* inode size */        [-i log=n|perblock=n|size=num,maxpct=n,attr=0|1|2,
                            projid32bit=0|1,sparse=0|1]
/* no discard */        [-K]
/* log subvol */        [-l agnum=n,internal,size=num,logdev=xxx,version=n
                            sunit=value|su=num,sectsize=num,lazy-count=0|1]
/* label */             [-L label (maximum 12 characters)]
/* naming */            [-n size=num,version=2|ci,ftype=0|1]
/* no-op info only */   [-N]
/* prototype file */    [-p fname]
/* quiet */             [-q]
/* realtime subvol */   [-r extsize=num,size=num,rtdev=xxx]
/* sectorsize */        [-s size=num]
/* version */           [-V]
                        devicename
</span><span class="gp">&lt;devicename&gt;</span><span class="w"> </span>is required unless <span class="nt">-d</span> <span class="nv">name</span><span class="o">=</span>xxx is given.
<span class="gp">&lt;num&gt;</span><span class="w"> </span>is xxx <span class="o">(</span>bytes<span class="o">)</span>, xxxs <span class="o">(</span>sectors<span class="o">)</span>, xxxb <span class="o">(</span>fs blocks<span class="o">)</span>, xxxk <span class="o">(</span>xxx KiB<span class="o">)</span>,
<span class="go">      xxxm (xxx MiB), xxxg (xxx GiB), xxxt (xxx TiB) or xxxp (xxx PiB).
</span><span class="gp">&lt;value&gt;</span><span class="w"> </span>is xxx <span class="o">(</span>512 byte blocks<span class="o">)</span><span class="nb">.</span>
<span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<h2 id="prepare-for-the-installation">Prepare for the installation</h2>

<p>After we created our filesystems, we need to prepare the system for the manual installation.</p>

<h3 id="mounting-the-partitions">Mounting the partitions</h3>

<p>In order to install our system within our live system, we need to mount the just created partitions under <code class="language-plaintext highlighter-rouge">/mnt</code>.
To easy this process again - and save me some manual work again - I created a script for this purpose.
To be able to use this script, we need to “close”, both the volume group <code class="language-plaintext highlighter-rouge">vg_system</code> and - if you created - the volume group <code class="language-plaintext highlighter-rouge">vg_data</code> and afterwards close the <code class="language-plaintext highlighter-rouge">LUKS</code> partition.
This can be done using the following commands:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># "close" the volume groups
lvchange -a n vg_system
lvchange -a n vg_data

# close the LUKS partitions
cryptsetup luksClose /dev/mapper/crypted_system
cryptsetup luksClose /dev/mapper/crypted_data
</code></pre></div></div>

<p>The output (or well, no output) will look similar to this (depending on - as already mentioned - whether you have chosen to create <code class="language-plaintext highlighter-rouge">vg_data</code> or not):</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>lvchange <span class="nt">-a</span> n vg_system
<span class="gp">root@rescue ~ #</span><span class="w"> </span>lvchange <span class="nt">-a</span> n vg_data
<span class="gp">root@rescue ~ #</span><span class="w"> </span>cryptsetup luksClose /dev/mapper/crypted_system
<span class="gp">root@rescue ~ #</span><span class="w"> </span>cryptsetup luksClose /dev/mapper/crypted_data
<span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<p>You can verify, whether we “closed” the volume group and the <code class="language-plaintext highlighter-rouge">LUKS</code> partition with the following commands:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span><span class="nb">ls</span> <span class="nt">-la</span> /dev/mapper/
<span class="go">total 0
drwxr-xr-x  2 root root      60 Aug 28 21:38 .
drwxr-xr-x 15 root root    8.2K Aug 28 21:38 ..
crw-------  1 root root 10, 236 Aug 28 15:06 control
</span><span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<p>To explain the general approach a bit, this is what the following script is doing:</p>

<ul>
  <li>Unlock both the system and data <code class="language-plaintext highlighter-rouge">LUKS</code> partition (if defined) - will ask for a password obviously :slightly_smiling_face:</li>
  <li>In order to install a system within a live system, we need to mount the root <code class="language-plaintext highlighter-rouge">LV</code> somewhere - in our case it’s <code class="language-plaintext highlighter-rouge">/mnt</code></li>
  <li>To be able to mount the <code class="language-plaintext highlighter-rouge">LVs</code> we need to create the necessary directories beforehand (e.g. <code class="language-plaintext highlighter-rouge">/mnt/var</code>, <code class="language-plaintext highlighter-rouge">/mnt/var/log</code>, <code class="language-plaintext highlighter-rouge">/mnt/home</code>, etc.)</li>
  <li>Finally the <code class="language-plaintext highlighter-rouge">LVs</code> get mounted to those created directories</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># name of the volume group for the system</span>
<span class="nb">declare</span> <span class="nt">-r</span> <span class="nv">__VG_SYSTEM</span><span class="o">=</span><span class="s2">"vg_system"</span>
<span class="c"># name of the volume group for the data partition - leave empty if you don't have it</span>
<span class="nb">declare</span> <span class="nt">-r</span> <span class="nv">__VG_DATA</span><span class="o">=</span><span class="s2">"vg_data"</span>
<span class="c"># mount point where the chroot environment will be mounted</span>
<span class="nb">declare</span> <span class="nt">-r</span> <span class="nv">__DESTINATION_PARENT</span><span class="o">=</span><span class="s2">"/mnt"</span>
<span class="c"># name of the logical volume, which contains the root ( / ) partition</span>
<span class="nb">declare</span> <span class="nt">-r</span> <span class="nv">__ROOT_LV_NAME</span><span class="o">=</span><span class="s2">"root"</span>
<span class="c"># device where the /boot partition is stored on</span>
<span class="nb">declare</span> <span class="nt">-r</span> <span class="nv">__BOOT_DEVICE</span><span class="o">=</span><span class="s2">"/dev/md0"</span>
<span class="c"># device where the system LUKS partition is stored on</span>
<span class="nb">declare</span> <span class="nt">-r</span> <span class="nv">__SYSTEM_CRYPT_DEVICE</span><span class="o">=</span><span class="s2">"/dev/md1"</span>
<span class="c"># name of the LUKS partition after unlocking it (/dev/mapper/&lt;NAME&gt;)</span>
<span class="nb">declare</span> <span class="nt">-r</span> <span class="nv">__SYSTEM_CRYPT_NAME</span><span class="o">=</span><span class="s2">"crypted_system"</span>
<span class="c"># device where the data LUKS partition is stored on - leave empty if you don't have it</span>
<span class="nb">declare</span> <span class="nt">-r</span> <span class="nv">__DATA_CRYPT_DEVICE</span><span class="o">=</span><span class="s2">"/dev/md2"</span>
<span class="c"># name of the LUKS partition after unlocking it (/dev/mapper/&lt;NAME&gt;) - leave empty if you don't have it</span>
<span class="nb">declare</span> <span class="nt">-r</span> <span class="nv">__DATA_CRYPT_NAME</span><span class="o">=</span><span class="s2">"crypted_data"</span>

<span class="c"># function to mount all partitions</span>
<span class="c"># if the script was called with a second parameter also all</span>
<span class="c"># necessary system partitions (/dev /dev/pts etc) are mounted as well</span>
<span class="k">function </span>mount_chroot <span class="o">()</span> <span class="o">{</span>
  <span class="nb">echo</span> <span class="s2">"Trying to decrypt system crypt device '</span><span class="k">${</span><span class="nv">__SYSTEM_CRYPT_DEVICE</span><span class="k">}</span><span class="s2">'"</span>
  cryptsetup luksOpen <span class="s2">"</span><span class="k">${</span><span class="nv">__SYSTEM_CRYPT_DEVICE</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__SYSTEM_CRYPT_NAME</span><span class="k">}</span><span class="s2">"</span> <span class="o">||</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"Decrypting '</span><span class="k">${</span><span class="nv">__SYSTEM_CRYPT_DEVICE</span><span class="k">}</span><span class="s2">' failed!"</span><span class="p">;</span>
    <span class="nb">exit </span>1<span class="p">;</span>
  <span class="o">}</span><span class="p">;</span>
  <span class="nb">echo</span> <span class="s2">"Successful!"</span>

  <span class="o">(</span> <span class="o">[[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__DATA_CRYPT_DEVICE</span><span class="k">}</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span>
    <span class="o">[[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__DATA_CRYPT_NAME</span><span class="k">}</span><span class="s2">"</span> <span class="o">]]</span>
  <span class="o">)</span> <span class="o">||</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"Trying to decrypt data crypt device '</span><span class="k">${</span><span class="nv">__DATA_CRYPT_DEVICE</span><span class="k">}</span><span class="s2">'"</span>
    cryptsetup luksOpen <span class="s2">"</span><span class="k">${</span><span class="nv">__DATA_CRYPT_DEVICE</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__DATA_CRYPT_NAME</span><span class="k">}</span><span class="s2">"</span> <span class="o">||</span> <span class="o">{</span>
      <span class="nb">echo</span> <span class="s2">"Decrypting '</span><span class="k">${</span><span class="nv">__DATA_CRYPT_DEVICE</span><span class="k">}</span><span class="s2">' failed!"</span><span class="p">;</span>
      <span class="nb">exit </span>1<span class="p">;</span>
    <span class="o">}</span><span class="p">;</span>
    <span class="nb">echo</span> <span class="s2">"Successful!"</span>
  <span class="o">}</span><span class="p">;</span>

  <span class="c"># sleep to prevent that the VGs cant be detected yet</span>
  <span class="nb">sleep </span>2
  <span class="c"># detect vgs and switch to them</span>
  vgchange <span class="nt">-aay</span> <span class="o">||</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"Searching and activating volume groups failed!"</span><span class="p">;</span>
    <span class="nb">exit </span>1<span class="p">;</span>
  <span class="o">}</span><span class="p">;</span>

  <span class="c"># check whether the given root lv exist</span>
  <span class="o">[[</span> <span class="nt">-e</span> <span class="s2">"/dev/mapper/</span><span class="k">${</span><span class="nv">__VG_SYSTEM</span><span class="k">}</span><span class="s2">-</span><span class="k">${</span><span class="nv">__ROOT_LV_NAME</span><span class="k">}</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">||</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"root LV '/dev/mapper/</span><span class="k">${</span><span class="nv">__VG_SYSTEM</span><span class="k">}</span><span class="s2">-</span><span class="k">${</span><span class="nv">__ROOT_LV_NAME</span><span class="k">}</span><span class="s2">' does not exist!"</span><span class="p">;</span>
    <span class="nb">exit </span>1<span class="p">;</span>
  <span class="o">}</span><span class="p">;</span>

  <span class="c"># mount the root lv and check whether it has been mounted successfully</span>
  mount <span class="s2">"/dev/mapper/</span><span class="k">${</span><span class="nv">__VG_SYSTEM</span><span class="k">}</span><span class="s2">-</span><span class="k">${</span><span class="nv">__ROOT_LV_NAME</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">"</span>
  mountpoint <span class="nt">-q</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">"</span> <span class="o">||</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"Destination root '</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">' is not mounted!"</span>
    <span class="nb">exit </span>1<span class="p">;</span>
  <span class="o">}</span><span class="p">;</span>

  <span class="o">(</span> <span class="o">[[</span> <span class="nt">-e</span> <span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span>/boot <span class="o">]]</span> <span class="o">&amp;&amp;</span>
    <span class="o">[[</span> <span class="nt">-d</span> <span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span>/boot <span class="o">]]</span>
  <span class="o">)</span> <span class="o">||</span> <span class="o">{</span>
  <span class="c"># create /boot within __DESTINATION_PARENT if it does not exist</span>
    <span class="nb">mkdir</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">/boot"</span>
  <span class="o">}</span><span class="p">;</span>
  <span class="c"># try mounting /boot</span>
  mount <span class="s2">"</span><span class="k">${</span><span class="nv">__BOOT_DEVICE</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">/boot"</span>

  <span class="c"># go through all system LVs and mount them, unless its the root or swap partition</span>
  <span class="k">for </span>lv <span class="k">in</span> <span class="s2">"/dev/mapper/</span><span class="k">${</span><span class="nv">__VG_SYSTEM</span><span class="k">}</span><span class="s2">-"</span><span class="k">*</span><span class="p">;</span> <span class="k">do
    </span><span class="nb">declare </span><span class="nv">part</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="k">${</span><span class="nv">lv</span><span class="k">}</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span> | <span class="nb">sed</span> <span class="nt">-e</span> <span class="s1">'s/vg_.*-//'</span> <span class="nt">-e</span> <span class="s1">'s/_/\//g'</span><span class="si">)</span><span class="s2">"</span>
    <span class="k">case</span> <span class="s2">"</span><span class="k">${</span><span class="nv">part</span><span class="k">}</span><span class="s2">"</span> <span class="k">in
      </span>root<span class="p">)</span>
        <span class="c"># we mounted it already</span>
        <span class="k">continue</span>
      <span class="p">;;</span>
      swap<span class="p">)</span>
        <span class="c"># set swap to the current LV</span>
        swapon <span class="s2">"</span><span class="k">${</span><span class="nv">lv</span><span class="k">}</span><span class="s2">"</span>
      <span class="p">;;</span>
      <span class="k">*</span><span class="p">)</span>
        <span class="c"># create the necessary folders for the current LV</span>
        <span class="c"># if they don't exist yet</span>
        <span class="o">(</span> <span class="o">[[</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">/</span><span class="k">${</span><span class="nv">part</span><span class="k">}</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span>
          <span class="o">[[</span> <span class="nt">-d</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">/</span><span class="k">${</span><span class="nv">part</span><span class="k">}</span><span class="s2">"</span> <span class="o">]]</span>
        <span class="o">)</span> <span class="o">||</span> <span class="o">{</span>
          <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">/</span><span class="k">${</span><span class="nv">part</span><span class="k">}</span><span class="s2">"</span>
        <span class="o">}</span><span class="p">;</span>
        <span class="c"># try mounting the LV</span>
        mount <span class="s2">"</span><span class="k">${</span><span class="nv">lv</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">/</span><span class="k">${</span><span class="nv">part</span><span class="k">}</span><span class="s2">"</span>
      <span class="p">;;</span>
    <span class="k">esac</span>
  <span class="k">done</span>

  <span class="o">[[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__VG_DATA</span><span class="k">}</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">||</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"Data partition defined :3"</span>
    <span class="c"># do the same as for the system LVs for the data LVs</span>
    <span class="k">for </span>lv <span class="k">in</span> <span class="s2">"/dev/mapper/</span><span class="k">${</span><span class="nv">__VG_DATA</span><span class="k">}</span><span class="s2">-"</span><span class="k">*</span><span class="p">;</span> <span class="k">do
      </span><span class="nb">declare </span><span class="nv">part</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="k">${</span><span class="nv">lv</span><span class="k">}</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span> | <span class="nb">sed</span> <span class="nt">-e</span> <span class="s1">'s/vg_.*-//'</span> <span class="nt">-e</span> <span class="s1">'s/_/\//g'</span><span class="si">)</span><span class="s2">"</span>
      <span class="o">(</span> <span class="o">[[</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">/</span><span class="k">${</span><span class="nv">part</span><span class="k">}</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span>
        <span class="o">[[</span> <span class="nt">-e</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">/</span><span class="k">${</span><span class="nv">part</span><span class="k">}</span><span class="s2">"</span> <span class="o">]]</span>
      <span class="o">)</span> <span class="o">||</span> <span class="o">{</span>
        <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">/</span><span class="k">${</span><span class="nv">part</span><span class="k">}</span><span class="s2">"</span>
      <span class="o">}</span><span class="p">;</span>
      mount <span class="s2">"</span><span class="k">${</span><span class="nv">lv</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">/</span><span class="k">${</span><span class="nv">part</span><span class="k">}</span><span class="s2">"</span>
    <span class="k">done</span>
  <span class="o">}</span><span class="p">;</span>


  <span class="o">[[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="k">${</span><span class="nv">2</span><span class="k">}</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">||</span> <span class="o">{</span>
    <span class="nb">exit </span>0<span class="p">;</span>
  <span class="o">}</span><span class="p">;</span>

  <span class="nb">echo</span> <span class="s2">"Mounting necessary system partitions to chroot"</span>
  mount <span class="nt">-o</span> <span class="nb">bind</span> /dev <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">/dev"</span>
  mount <span class="nt">-o</span> <span class="nb">bind</span> /run <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">/run"</span>
  mount <span class="nt">-t</span> devpts devpts <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">/dev/pts"</span>
  mount <span class="nt">-t</span> sysfs sys <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">/sys"</span>
  mount <span class="nt">-t</span> proc proc <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">/proc"</span>
  <span class="nb">exit </span>0<span class="p">;</span>
<span class="o">}</span> <span class="c">#; function mount_chroot ( )</span>

<span class="c"># function to unmount all partitions defined under __DESTINATION_PARENT</span>
<span class="c"># and "close" the VGs and finally close the LUKS partitions</span>
<span class="k">function </span>umount_chroot <span class="o">()</span> <span class="o">{</span>
  umount <span class="nt">-lf</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__DESTINATION_PARENT</span><span class="k">}</span><span class="s2">"</span>
  <span class="k">for </span>lv <span class="k">in</span> <span class="s2">"/dev/mapper/</span><span class="k">${</span><span class="nv">__VG_SYSTEM</span><span class="k">}</span><span class="s2">-"</span><span class="k">*</span><span class="p">;</span> <span class="k">do
    </span><span class="nb">declare </span><span class="nv">part</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="k">${</span><span class="nv">lv</span><span class="k">}</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span> | <span class="nb">sed</span> <span class="nt">-e</span> <span class="s1">'s/vg_.*-//'</span> <span class="nt">-e</span> <span class="s1">'s/_/\//g'</span><span class="si">)</span><span class="s2">"</span>
    <span class="k">case</span> <span class="s2">"</span><span class="k">${</span><span class="nv">part</span><span class="k">}</span><span class="s2">"</span> <span class="k">in
      </span>swap<span class="p">)</span>
        swapoff <span class="s2">"</span><span class="k">${</span><span class="nv">lv</span><span class="k">}</span><span class="s2">"</span>
      <span class="p">;;</span>
      <span class="k">*</span><span class="p">)</span>
        <span class="k">continue</span>
      <span class="p">;;</span>
    <span class="k">esac</span>
  <span class="k">done
  </span>lvchange <span class="nt">-a</span> n <span class="s2">"</span><span class="k">${</span><span class="nv">__VG_SYSTEM</span><span class="k">}</span><span class="s2">"</span>

  <span class="o">[[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">__VG_DATA</span><span class="k">}</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">||</span> <span class="o">{</span>
    lvchange <span class="nt">-a</span> n <span class="s2">"</span><span class="k">${</span><span class="nv">__VG_DATA</span><span class="k">}</span><span class="s2">"</span>
    cryptsetup luksClose <span class="s2">"/dev/mapper/</span><span class="k">${</span><span class="nv">__DATA_CRYPT_NAME</span><span class="k">}</span><span class="s2">"</span>
  <span class="o">}</span><span class="p">;</span>

  cryptsetup luksClose <span class="s2">"/dev/mapper/</span><span class="k">${</span><span class="nv">__SYSTEM_CRYPT_NAME</span><span class="k">}</span><span class="s2">"</span>
<span class="o">}</span> <span class="c">#; function umount_chroot ( )</span>

<span class="k">case</span> <span class="s2">"</span><span class="k">${</span><span class="nv">1</span><span class="k">}</span><span class="s2">"</span> <span class="k">in
  </span>mount<span class="p">)</span>
    <span class="nb">echo</span> <span class="s2">"Mounting chroot"</span>
    mount_chroot <span class="s2">"</span><span class="k">${</span><span class="p">@</span><span class="k">}</span><span class="s2">"</span>
  <span class="p">;;</span>
  umount<span class="p">)</span>
    <span class="nb">echo</span> <span class="s2">"Unmounting chroot"</span>
    umount_chroot <span class="s2">"</span><span class="k">${</span><span class="p">@</span><span class="k">}</span><span class="s2">"</span>
  <span class="p">;;</span>
  <span class="k">*</span><span class="p">)</span>
    <span class="nb">echo</span> <span class="s2">"Use either mount or umount as parameters. Additionally a second parameter with any value can be passed to mount system partitions as well (/dev /dev/pts etc)"</span>
  <span class="p">;;</span>
<span class="k">esac</span>
</code></pre></div></div>

<p>To be able to copy the script right into the command line, you can use the following approach:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat &lt;&lt;-'#EOF' &gt; mount.sh
#!/bin/bash
# name of the volume group for the system
declare -r __VG_SYSTEM="vg_system"
# name of the volume group for the data partition - leave empty if you don't have it
declare -r __VG_DATA="vg_data"
# mount point where the chroot environment will be mounted
declare -r __DESTINATION_PARENT="/mnt"
# name of the logical volume, which contains the root ( / ) partition
declare -r __ROOT_LV_NAME="root"
# device where the /boot partition is stored on
declare -r __BOOT_DEVICE="/dev/md0"
# device where the system LUKS partition is stored on
declare -r __SYSTEM_CRYPT_DEVICE="/dev/md1"
# name of the LUKS partition after unlocking it (/dev/mapper/&lt;NAME&gt;)
declare -r __SYSTEM_CRYPT_NAME="crypted_system"
# device where the data LUKS partition is stored on - leave empty if you don't have it
declare -r __DATA_CRYPT_DEVICE="/dev/md2"
# name of the LUKS partition after unlocking it (/dev/mapper/&lt;NAME&gt;) - leave empty if you don't have it
declare -r __DATA_CRYPT_NAME="crypted_data"

# function to mount all partitions
# if the script was called with a second parameter also all
# necessary system partitions (/dev /dev/pts etc) are mounted as well
function mount_chroot () {
  echo "Trying to decrypt system crypt device '${__SYSTEM_CRYPT_DEVICE}'"
  cryptsetup luksOpen "${__SYSTEM_CRYPT_DEVICE}" "${__SYSTEM_CRYPT_NAME}" || {
    echo "Decrypting '${__SYSTEM_CRYPT_DEVICE}' failed!";
    exit 1;
  };
  echo "Successful!"

  ( [[ -z "${__DATA_CRYPT_DEVICE}" ]] &amp;&amp;
    [[ -z "${__DATA_CRYPT_NAME}" ]]
  ) || {
    echo "Trying to decrypt data crypt device '${__DATA_CRYPT_DEVICE}'"
    cryptsetup luksOpen "${__DATA_CRYPT_DEVICE}" "${__DATA_CRYPT_NAME}" || {
      echo "Decrypting '${__DATA_CRYPT_DEVICE}' failed!";
      exit 1;
    };
    echo "Successful!"
  };

  # sleep to prevent that the VGs cant be detected yet
  sleep 2
  # detect vgs and switch to them
  vgchange -aay || {
    echo "Searching and activating volume groups failed!";
    exit 1;
  };

  # check whether the given root lv exist
  [[ -e "/dev/mapper/${__VG_SYSTEM}-${__ROOT_LV_NAME}" ]] || {
    echo "root LV '/dev/mapper/${__VG_SYSTEM}-${__ROOT_LV_NAME}' does not exist!";
    exit 1;
  };

  # mount the root lv and check whether it has been mounted successfully
  mount "/dev/mapper/${__VG_SYSTEM}-${__ROOT_LV_NAME}" "${__DESTINATION_PARENT}"
  mountpoint -q "${__DESTINATION_PARENT}" || {
    echo "Destination root '${__DESTINATION_PARENT}' is not mounted!"
    exit 1;
  };

  ( [[ -e ${__DESTINATION_PARENT}/boot ]] &amp;&amp;
    [[ -d ${__DESTINATION_PARENT}/boot ]]
  ) || {
  # create /boot within __DESTINATION_PARENT if it does not exist
    mkdir "${__DESTINATION_PARENT}/boot"
  };
  # try mounting /boot
  mount "${__BOOT_DEVICE}" "${__DESTINATION_PARENT}/boot"

  # go through all system LVs and mount them, unless its the root or swap partition
  for lv in "/dev/mapper/${__VG_SYSTEM}-"*; do
    declare part="$(echo "$(basename "${lv}")" | sed -e 's/vg_.*-//' -e 's/_/\//g')"
    case "${part}" in
      root)
        # we mounted it already
        continue
      ;;
      swap)
        # set swap to the current LV
        swapon "${lv}"
      ;;
      *)
        # create the necessary folders for the current LV
        # if they don't exist yet
        ( [[ -e "${__DESTINATION_PARENT}/${part}" ]] &amp;&amp;
          [[ -d "${__DESTINATION_PARENT}/${part}" ]]
        ) || {
          mkdir -p "${__DESTINATION_PARENT}/${part}"
        };
        # try mounting the LV
        mount "${lv}" "${__DESTINATION_PARENT}/${part}"
      ;;
    esac
  done

  [[ -z "${__VG_DATA}" ]] || {
    echo "Data partition defined :3"
    # do the same as for the system LVs for the data LVs
    for lv in "/dev/mapper/${__VG_DATA}-"*; do
      declare part="$(echo "$(basename "${lv}")" | sed -e 's/vg_.*-//' -e 's/_/\//g')"
      ( [[ -e "${__DESTINATION_PARENT}/${part}" ]] &amp;&amp;
        [[ -e "${__DESTINATION_PARENT}/${part}" ]]
      ) || {
        mkdir -p "${__DESTINATION_PARENT}/${part}"
      };
      mount "${lv}" "${__DESTINATION_PARENT}/${part}"
    done
  };


  [[ -n "${2}" ]] || {
    exit 0;
  };

  echo "Mounting necessary system partitions to chroot"
  mount -o bind /dev "${__DESTINATION_PARENT}/dev"
  mount -o bind /run "${__DESTINATION_PARENT}/run"
  mount -t devpts devpts "${__DESTINATION_PARENT}/dev/pts"
  mount -t sysfs sys "${__DESTINATION_PARENT}/sys"
  mount -t proc proc "${__DESTINATION_PARENT}/proc"
  exit 0;
} #; function mount_chroot ( )

# function to unmount all partitions defined under __DESTINATION_PARENT
# and "close" the VGs and finally close the LUKS partitions
function umount_chroot () {
  umount -lf "${__DESTINATION_PARENT}"
  for lv in "/dev/mapper/${__VG_SYSTEM}-"*; do
    declare part="$(echo "$(basename "${lv}")" | sed -e 's/vg_.*-//' -e 's/_/\//g')"
    case "${part}" in
      swap)
        swapoff "${lv}"
      ;;
      *)
        continue
      ;;
    esac
  done
  lvchange -a n "${__VG_SYSTEM}"

  [[ -z "${__VG_DATA}" ]] || {
    lvchange -a n "${__VG_DATA}"
    cryptsetup luksClose "/dev/mapper/${__DATA_CRYPT_NAME}"
  };

  cryptsetup luksClose "/dev/mapper/${__SYSTEM_CRYPT_NAME}"
} #; function umount_chroot ( )

case "${1}" in
  mount)
    echo "Mounting chroot"
    mount_chroot "${@}"
  ;;
  umount)
    echo "Unmounting chroot"
    umount_chroot "${@}"
  ;;
  *)
    echo "Use either mount or umount as parameters. Additionally a second parameter with any value can be passed to mount system partitions as well (/dev /dev/pts etc)"
  ;;
esac
#EOF
</code></pre></div></div>

<p>You should now have a file <code class="language-plaintext highlighter-rouge">mount.sh</code> in your current directory, with the contents of the script above (minus the first and last line).
Now, go ahead and adjust the necessary parts and execute it via either <code class="language-plaintext highlighter-rouge">bash mount.sh mount</code> or first setting executable permissions on it and then
executing it (done via <code class="language-plaintext highlighter-rouge">chmod +x mount.sh &amp;&amp; ./mount.sh mount</code>).</p>

<p>The output will look similar to the following (depending again, whether you have an additional data drive or not):</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>bash mount.sh mount
<span class="go">Mounting chroot
Trying to decrypt system crypt device '/dev/md1'
Enter passphrase for /dev/md1:
Successful!
Trying to decrypt data crypt device '/dev/md2'
Enter passphrase for /dev/md2:
Successful!
  1 logical volume(s) in volume group "vg_data" now active
  8 logical volume(s) in volume group "vg_system" now active
Data partition defined :3
</span></code></pre></div></div>

<p>Finally you should check whether the script has been successfully run and the partitions are mounted to your needs (the last lines are showing the mounted partitions
from the script):</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>mount
<span class="go">proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)
sys on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)
udev on /dev type devtmpfs (rw,relatime,size=65912560k,nr_inodes=16478140,mode=755)
devpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)
[2a01:4ff:ff00::b007:1]:/nfs on /root/.oldroot/nfs type nfs (ro,noatime,vers=3,rsize=8192,wsize=8192,namlen=255,acregmin=600,acregmax=600,acdirmin=600,acdirmax=600,hard,nocto,nolock,noresvport,proto=tcp6,timeo=600,retrans=2,sec=sys,mountaddr=2a01:4ff:ff00::b007:1,mountvers=3,mountproto=tcp6,local_lock=all,addr=2a01:4ff:ff00::b007:1)
overlay on / type overlay (rw,relatime,lowerdir=/nfsroot,upperdir=/ramfs/root,workdir=/ramfs/work)
securityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)
tmpfs on /dev/shm type tmpfs (rw,nosuid,nodev)
devpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)
tmpfs on /run type tmpfs (rw,nosuid,nodev,size=26368588k,nr_inodes=819200,mode=755)
tmpfs on /run/lock type tmpfs (rw,nosuid,nodev,noexec,relatime,size=5120k)
cgroup2 on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime,nsdelegate,memory_recursiveprot)
pstore on /sys/fs/pstore type pstore (rw,nosuid,nodev,noexec,relatime)
systemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=28,pgrp=1,timeout=0,minproto=5,maxproto=5,direct)
mqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)
hugetlbfs on /dev/hugepages type hugetlbfs (rw,relatime,pagesize=2M)
debugfs on /sys/kernel/debug type debugfs (rw,nosuid,nodev,noexec,relatime)
tracefs on /sys/kernel/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)
ramfs on /run/credentials/systemd-sysusers.service type ramfs (ro,nosuid,nodev,noexec,relatime,mode=700)
binfmt_misc on /proc/sys/fs/binfmt_misc type binfmt_misc (rw,nosuid,nodev,noexec,relatime)
fusectl on /sys/fs/fuse/connections type fusectl (rw,nosuid,nodev,noexec,relatime)
configfs on /sys/kernel/config type configfs (rw,nosuid,nodev,noexec,relatime)
ramfs on /run/credentials/systemd-tmpfiles-setup-dev.service type ramfs (ro,nosuid,nodev,noexec,relatime,mode=700)
ramfs on /run/credentials/systemd-sysctl.service type ramfs (ro,nosuid,nodev,noexec,relatime,mode=700)
ramfs on /run/credentials/systemd-tmpfiles-setup.service type ramfs (ro,nosuid,nodev,noexec,relatime,mode=700)
tracefs on /sys/kernel/debug/tracing type tracefs (rw,nosuid,nodev,noexec,relatime)
tmpfs on /run/user/0 type tmpfs (rw,nosuid,nodev,relatime,size=13184292k,nr_inodes=3296073,mode=700)
/dev/mapper/vg_system-root on /mnt type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,sunit=256,swidth=256,noquota)
/dev/md0 on /mnt/boot type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,sunit=256,swidth=256,noquota)
/dev/mapper/vg_system-home on /mnt/home type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,sunit=256,swidth=256,noquota)
/dev/mapper/vg_system-tmp on /mnt/tmp type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,sunit=256,swidth=256,noquota)
/dev/mapper/vg_system-var on /mnt/var type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,sunit=256,swidth=256,noquota)
/dev/mapper/vg_system-var_log on /mnt/var/log type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,sunit=256,swidth=256,noquota)
/dev/mapper/vg_system-var_log_audit on /mnt/var/log/audit type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,sunit=256,swidth=256,noquota)
/dev/mapper/vg_system-var_tmp on /mnt/var/tmp type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,sunit=256,swidth=256,noquota)
/dev/mapper/vg_data-var_lib_vz on /mnt/var/lib/vz type xfs (rw,relatime,attr2,inode64,logbufs=8,logbsize=32k,sunit=1024,swidth=8192,noquota)
</span><span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<p>As the last step, we need to set the proper permissions on the mounted <code class="language-plaintext highlighter-rouge">tmp</code> folder (<code class="language-plaintext highlighter-rouge">/mnt/tmp</code>):</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span><span class="nb">chmod </span>1777 /mnt/tmp
<span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<h3 id="starting-the-installation">Starting the installation</h3>

<p>Finally we can start the installation of Debian Bullseye within our live system.
For the installation we are going to use a program called <a href="https://wiki.debian.org/Debootstrap"><code class="language-plaintext highlighter-rouge">Debootstrap</code></a>. <code class="language-plaintext highlighter-rouge">Debootstrap</code> is basically used to install a Debian system
within a Debian system (our live environment). The latest version can always be found
<a href="http://ftp.debian.org/debian/pool/main/d/debootstrap/">package repository of debian.org</a> - we need the version, which is packaged using <code class="language-plaintext highlighter-rouge">.deb</code>.</p>

<h3 id="downloading-debootstrap-and-modify-it">Downloading <code class="language-plaintext highlighter-rouge">Debootstrap</code> and modify it</h3>

<p>First, we need to download the .deb using <code class="language-plaintext highlighter-rouge">wget</code> or <code class="language-plaintext highlighter-rouge">curl</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span><span class="nb">cd</span> /tmp/
<span class="gp">root@rescue /tmp #</span><span class="w"> </span>wget http://ftp.debian.org/debian/pool/main/d/debootstrap/debootstrap_1.0.124_all.deb
<span class="go">--2021-08-22 12:42:35--  http://ftp.debian.org/debian/pool/main/d/debootstrap/debootstrap_1.0.124_all.deb
Resolving ftp.debian.org (ftp.debian.org)... 151.101.14.132, 2a04:4e42:3::644
Connecting to ftp.debian.org (ftp.debian.org)|151.101.14.132|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 76416 (75K) [application/x-debian-package]
Saving to: ‘debootstrap_1.0.124_all.deb’

</span><span class="gp">debootstrap_1.0.124_all.deb                100%[=======================================================================================&gt;</span><span class="o">]</span>  74.62K  <span class="nt">--</span>.-KB/s    <span class="k">in </span>0.03s
<span class="go">
2021-08-22 12:42:35 (2.30 MB/s) - ‘debootstrap_1.0.124_all.deb’ saved [76416/76416]

</span><span class="gp">root@rescue /tmp #</span><span class="w">
</span></code></pre></div></div>

<p>After we downloaded it, we need to unpack it:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue /tmp #</span><span class="w"> </span>ar x debootstrap_1.0.131_all.deb
<span class="gp">root@rescue /tmp #</span><span class="w"> </span><span class="nb">tar </span>xfz control.tar.gz
<span class="gp">root@rescue /tmp #</span><span class="w"> </span><span class="nb">tar </span>xfz data.tar.gz
<span class="gp">root@rescue /tmp #</span><span class="w">
</span></code></pre></div></div>

<p>Next, we want to make sure, that the contents are not broken or modified in any way.</p>

<p>The following commands create a MD5 checksums from the local files and compare it to the MD5 checksums shipped with the <code class="language-plaintext highlighter-rouge">.deb</code> file.</p>

<p>If there is no output at all, the files do not differ - if there is output, the files differ. If the files differ, re-download it
(it shouldn’t happen at all - <strong>never!</strong>). Although it could be a bug from the Debian team, while creating the package (very, very unlikely!).
If the local MD5 checksums still differ from the shipped MD5 checksums, consider re-downloading an older version (doesn’t really matter) and file a bug report over at Debian.</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue /tmp #</span><span class="w"> </span><span class="nb">cat </span>md5sums | <span class="nb">cut</span> <span class="nt">-d</span> <span class="s2">" "</span> <span class="nt">-f</span> 3 | xargs <span class="nb">md5sum</span> <span class="nv">$1</span> <span class="o">&gt;</span> md5sums.local<span class="p">;</span> diff md5sums md5sums.local
<span class="gp">root@rescue /tmp #</span><span class="w">
</span></code></pre></div></div>

<p>Next, we want to search in the file <code class="language-plaintext highlighter-rouge">usr/sbin/debootstrap</code> for the line <code class="language-plaintext highlighter-rouge">DEBOOTSTRAP_DIR=/usr/share/debootstrap</code> and prefix <code class="language-plaintext highlighter-rouge">/tmp</code> in front of the path.
This is necessary in order to run the script from <code class="language-plaintext highlighter-rouge">/tmp</code> (where we are in the moment).</p>

<p>You can either do it by hand or run following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sed 's@\/usr\/share\/debootstrap@/tmp/usr/share/debootstrap@' -i usr/sbin/debootstrap
</code></pre></div></div>

<p>.. and check afterwards if the change has been done successfully using the following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grep [[:space:]]DEBOOTSTRAP_DIR= usr/sbin/debootstrap
</code></pre></div></div>

<p>The output should be similar to following:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue /tmp #</span><span class="w"> </span><span class="nb">sed</span> <span class="s1">'s@\/usr\/share\/debootstrap@/tmp/usr/share/debootstrap@'</span> <span class="nt">-i</span> usr/sbin/debootstrap
<span class="gp">root@rescue /tmp #</span><span class="w"> </span><span class="nb">grep</span> <span class="o">[[</span>:space:]]DEBOOTSTRAP_DIR<span class="o">=</span> usr/sbin/debootstrap
<span class="go">                DEBOOTSTRAP_DIR=/debootstrap
                DEBOOTSTRAP_DIR=/tmp/usr/share/debootstrap
</span><span class="gp">root@rescue /tmp #</span><span class="w">
</span></code></pre></div></div>

<h2 id="installation-of-the-system">Installation of the system</h2>

<p>Finally we can start the installation using <code class="language-plaintext highlighter-rouge">debootstrap</code> with the following command (replace the values you want to change):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>usr/sbin/debootstrap --arch amd64 bookworm /mnt/ http://ftp2.de.debian.org/debian | tee /mnt/install.log
</code></pre></div></div>

<p>The installation will take a couple of minutes/seconds (depending on the performance of your system) and the output will look similar to this (truncated):</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue /tmp #</span><span class="w"> </span>usr/sbin/debootstrap <span class="nt">--arch</span> amd64 bookworm /mnt/ http://ftp2.de.debian.org/debian | <span class="nb">tee</span> /mnt/install.log
<span class="go">[..]
I: Validating libstdc++6 12.2.0-14
I: Retrieving libsystemd-shared 252.12-1~deb12u1
I: Validating libsystemd-shared 252.12-1~deb12u1
I: Retrieving libsystemd0 252.12-1~deb12u1
I: Validating libsystemd0 252.12-1~deb12u1
I: Retrieving libtasn1-6 4.19.0-2
I: Validating libtasn1-6 4.19.0-2
[..]
I: Validating vim-tiny 2:9.0.1378-2
I: Retrieving whiptail 0.52.23-1+b1
I: Validating whiptail 0.52.23-1+b1
I: Retrieving zlib1g 1:1.2.13.dfsg-1
I: Validating zlib1g 1:1.2.13.dfsg-1
I: Chosen extractor for .deb packages: dpkg-deb
I: Extracting adduser...
I: Extracting apt...
I: Extracting base-files...
I: Extracting base-passwd...
I: Extracting bash...
[..]
I: Unpacking coreutils...
I: Unpacking dash...
I: Unpacking debconf...
I: Unpacking debian-archive-keyring...
I: Unpacking debianutils...
[..]
I: Configuring mawk...
I: Configuring libdebconfclient0:amd64...
I: Configuring base-files...
I: Configuring libbz2-1.0:amd64...
I: Configuring libdb5.3:amd64...
I: Configuring libblkid1:amd64...
I: Configuring libstdc++6:amd64...
I: Configuring libtinfo6:amd64...
[..]
I: Configuring vim-tiny...
I: Configuring fdisk...
I: Configuring libgssapi-krb5-2:amd64...
I: Configuring whiptail...
I: Configuring libtirpc3:amd64...
I: Configuring libnftables1:amd64...
I: Configuring nftables...
I: Configuring iproute2...
I: Configuring isc-dhcp-client...
I: Configuring ifupdown...
I: Configuring tasksel...
I: Configuring tasksel-data...
I: Configuring libc-bin...
I: Base system installed successfully.
</span><span class="gp">root@rescue /tmp #</span><span class="w">
</span></code></pre></div></div>

<p>After the installation has been successfully finished, we need to mount the necessary system partitions, in order to configure the system, using the following commands:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue /tmp #</span><span class="w"> </span>mount <span class="nt">-o</span> <span class="nb">bind</span> /dev/ /mnt/dev/
<span class="gp">root@rescue /tmp #</span><span class="w"> </span>mount <span class="nt">-t</span> devpts devpts /mnt/dev/pts
<span class="gp">root@rescue /tmp #</span><span class="w"> </span>mount <span class="nt">-t</span> proc proc /mnt/proc/
<span class="gp">root@rescue /tmp #</span><span class="w"> </span>mount <span class="nt">-t</span> sysfs sys /mnt/sys/
<span class="gp">root@rescue /tmp #</span><span class="w"> </span>mount <span class="nt">-o</span> <span class="nb">bind</span> /run /mnt/run
<span class="gp">root@rescue /tmp #</span><span class="w">
</span></code></pre></div></div>

<p>.. or “copy-paste-friendlier”:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount -o bind /dev/ /mnt/dev/; mount -t devpts devpts /mnt/dev/pts; mount -t proc proc /mnt/proc/; mount -t sysfs sys /mnt/sys/; mount -o bind /run /mnt/run
</code></pre></div></div>

<p>Finally we have the system installed and ready to configure - we still have a couple of things to do, in order to make the system work as we want it to.</p>

<h2 id="base-configuration">Base configuration</h2>

<p>First we want to <code class="language-plaintext highlighter-rouge">chroot</code> to the environment:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue /tmp #</span><span class="w"> </span><span class="nv">XTERM</span><span class="o">=</span>xterm-color <span class="nv">LANG</span><span class="o">=</span>C.UTF-8 <span class="nb">chroot</span> /mnt /bin/bash
<span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">pwd</span>
<span class="go">/
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>We need to set the proper permissions for <code class="language-plaintext highlighter-rouge">/tmp</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">chmod </span>1777 /tmp/
</code></pre></div></div>

<p>Next, we want to change the root password, as it is currently not set (use a <strong>complex</strong> and <strong>unique</strong> password!):</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span>passwd
<span class="go">Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Then we want to set both the <code class="language-plaintext highlighter-rouge">hostname</code> (<code class="language-plaintext highlighter-rouge">/etc/hostname</code>) and <code class="language-plaintext highlighter-rouge">mailname</code> (<code class="language-plaintext highlighter-rouge">/etc/mailname</code> - this will come in handy later, when we install <code class="language-plaintext highlighter-rouge">postfix</code>) and as well add
ourselves to <code class="language-plaintext highlighter-rouge">/etc/hosts</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">echo</span> <span class="s2">"pven.scheib.me"</span> <span class="o">&gt;</span> /etc/hostname
<span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">echo</span> <span class="s2">"pven.scheib.me"</span> <span class="o">&gt;</span> /etc/mailname
<span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">echo</span> <span class="s2">"</span><span class="si">$(</span>ip addr show eth0 | <span class="nb">grep </span>inet[[:space:]] | <span class="nb">awk</span> <span class="s1">'{print $2}'</span> | <span class="nb">sed</span> <span class="nt">-E</span> <span class="s1">'s@\/[[:digit:]]+$@@'</span><span class="si">)</span><span class="s2"> </span><span class="si">$(</span><span class="nb">cat</span> /etc/hostname<span class="si">)</span><span class="s2"> </span><span class="si">$(</span><span class="nb">cat</span> /etc/hostname | <span class="nb">sed</span> <span class="s1">'s@\.@ @g'</span> | <span class="nb">awk</span> <span class="s1">'{ print $1 }'</span><span class="si">)</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> /etc/hosts
<span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>As next step we want to configure our network adapter(s) within <code class="language-plaintext highlighter-rouge">/etc/network/interfaces</code> - mine looks like the following:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">cat</span> /etc/network/interfaces
<span class="gp">#</span><span class="w"> </span>interfaces<span class="o">(</span>5<span class="o">)</span> file used by ifup<span class="o">(</span>8<span class="o">)</span> and ifdown<span class="o">(</span>8<span class="o">)</span>
<span class="gp">#</span><span class="w"> </span>Include files from /etc/network/interfaces.d:
<span class="go">source-directory /etc/network/interfaces.d

auto            lo
iface           lo inet loopback

auto            eth0
iface           eth0 inet static
address         159.69.68.69
netmask         255.255.255.192
gateway         159.69.68.65
broadcast       159.69.68.127
pre-up          /sbin/ip addr flush dev eth0 || true
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>:information_source: Please note, I modified the IP addresses and they do not reflect an actual system. Please adjust the file accordingly.</p>

<p>The <code class="language-plaintext highlighter-rouge">pre-up</code> command <code class="language-plaintext highlighter-rouge">/sbin/ip addr flush dev eth0 || true</code> has to be used, as we have an IP address already <em>before</em> the final system is up and running. This is due
to the <code class="language-plaintext highlighter-rouge">Dropbear instance</code> that is running which allows as to unlock the <code class="language-plaintext highlighter-rouge">LUKS</code> partition(s) - more on that later.</p>

<p>Of course we want to set our nameservers correctly - in this case I am using the nameservers from
<a href="https://www.cloudflare.com/de-de/learning/dns/what-is-1.1.1.1/">Cloudflare</a> and <a href="https://developers.google.com/speed/public-dns">Google</a>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">cat</span> /etc/resolv.conf
<span class="go">nameserver 1.1.1.1
nameserver 1.0.0.1
nameserver 8.8.8.8
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>:information_source: I am not using <code class="language-plaintext highlighter-rouge">systemd-resolved</code>, therefore I can simply edit <code class="language-plaintext highlighter-rouge">/etc/resolv.conf</code></p>

<p>Also we want to set the sources for aptitude correctly (change it to your needs):</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">cat &gt;</span><span class="w"> </span>/etc/apt/sources.list &lt;&lt; <span class="s2">"#EOF"</span>
<span class="go">deb http://ftp.de.debian.org/debian/ bookworm main non-free non-free-firmware contrib
deb-src http://ftp.de.debian.org/debian/ bookworm main non-free non-free-firmware contrib
deb http://security.debian.org/ bookworm-security main non-free non-free-firmware contrib
deb-src http://security.debian.org/ bookworm-security main non-free non-free-firmware contrib
deb http://ftp.de.debian.org/debian/ bookworm-updates main non-free non-free-firmware contrib
deb-src http://ftp.de.debian.org/debian/ bookworm-updates main non-free non-free-firmware contrib
</span><span class="gp">#</span>EOF
</code></pre></div></div>

<p>.. which will result in the following file:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">cat</span> /etc/apt/sources.list
<span class="go">deb http://ftp.de.debian.org/debian/ bookworm main non-free non-free-firmware contrib
deb-src http://ftp.de.debian.org/debian/ bookworm main non-free non-free-firmware contrib
deb http://security.debian.org/ bookworm-security main non-free non-free-firmware contrib
deb-src http://security.debian.org/ bookworm-security main non-free non-free-firmware contrib
deb http://ftp.de.debian.org/debian/ bookworm-updates main non-free non-free-firmware contrib
deb-src http://ftp.de.debian.org/debian/ bookworm-updates main non-free non-free-firmware contrib
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>:information_source: Debian split with Bookworm its non-free repository. You can read more on that in the
<a href="https://www.debian.org/releases/bookworm/amd64/release-notes/ch-whats-new.en.html#archive-areas">release notes of Debian Bookworm</a>.</p>

<p>Let’s update the cache .. :slightly_smiling_face:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span>apt-get update
<span class="go">Fetched 22.9 MB in 3s (8565 kB/s)
[..]
Reading package lists... Done
Building dependency tree... Done
3 packages can be upgraded. Run 'apt list --upgradable' to see them.
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Finally we want to install and configure the <code class="language-plaintext highlighter-rouge">locales</code> (I use <code class="language-plaintext highlighter-rouge">en_US.UTF-8</code> as the system language), using the following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get install -y locales &amp;&amp; dpkg-reconfigure locales
</code></pre></div></div>

<!-- markdownlint-disable MD033 MD034 -->
<details>
<summary>Example output:</summary>


<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">root@rescue:/#</span><span class="w"> </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> locales <span class="o">&amp;&amp;</span> dpkg-reconfigure locales
<span class="go">Reading package lists... Done
Building dependency tree... Done
The following additional packages will be installed:
  libc-l10n
The following NEW packages will be installed:
  libc-l10n locales
0 upgraded, 2 newly installed, 0 to remove and 0 not upgraded.
Need to get 4577 kB of archives.
After this operation, 20.7 MB of additional disk space will be used.
Get:1 http://ftp.de.debian.org/debian bookworm/main amd64 libc-l10n all 2.36-9+deb12u1 [673 kB]
Get:2 http://ftp.de.debian.org/debian bookworm/main amd64 locales all 2.36-9+deb12u1 [3904 kB]
Fetched 4577 kB in 0s (18.3 MB/s)
Preconfiguring packages ...
Selecting previously unselected package libc-l10n.
(Reading database ... 8743 files and directories currently installed.)
Preparing to unpack .../libc-l10n_2.36-9+deb12u1_all.deb ...
Unpacking libc-l10n (2.36-9+deb12u1) ...
Selecting previously unselected package locales.
Preparing to unpack .../locales_2.36-9+deb12u1_all.deb ...
Unpacking locales (2.36-9+deb12u1) ...
Setting up libc-l10n (2.36-9+deb12u1) ...
Setting up locales (2.36-9+deb12u1) ...
Generating locales (this might take a while)...
Generation complete.
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
</span><span class="gp">root@rescue:/#</span></code></pre></figure>


</details>
<!-- markdownlint-enable MD033 MD034 -->

<p>Additionally we need to set a few more locale settings in <code class="language-plaintext highlighter-rouge">/etc/environment</code>, which are not set by default, but are causing warning messages when not set,
while installing packages using <code class="language-plaintext highlighter-rouge">aptitude</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">cat &gt;</span><span class="w"> </span>/etc/environment <span class="o">&lt;&lt;</span> <span class="sh">"</span><span class="no">EOF</span><span class="sh">"
</span><span class="go">export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
EOF
</span></code></pre></div></div>

<!-- markdownlint-disable MD033 -->
<details>
<summary>Example output:</summary>


<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">cat</span> <span class="o">&gt;</span> /etc/environment <span class="o">&lt;&lt;</span> <span class="sh">"</span><span class="no">EOF</span><span class="sh">"
</span><span class="gp">&gt;</span><span class="w"> </span><span class="sh">export LANGUAGE=en_US.UTF-8
</span><span class="gp">&gt;</span><span class="w"> </span><span class="sh">export LC_ALL=en_US.UTF-8
</span><span class="gp">&gt;</span><span class="w"> </span><span class="sh">export LANG=en_US.UTF-8
</span><span class="gp">&gt;</span><span class="w"> </span><span class="no">EOF
</span><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">cat</span> /etc/environment
<span class="go">export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
</span><span class="gp">root@rescue:/#</span></code></pre></figure>


</details>
<!-- markdownlint-enable MD033 -->

<p>Next, we want to set the correct timezone using <code class="language-plaintext highlighter-rouge">tzdata</code> and the following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dpkg-reconfigure tzdata
</code></pre></div></div>

<!-- markdownlint-disable MD033 -->
<details>
<summary>Example output:</summary>


<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">root@rescue:/#</span><span class="w"> </span>dpkg-reconfigure tzdata
<span class="go">
Current default time zone: 'Europe/Berlin'
Local time is now:      Mon Aug 28 22:54:27 CEST 2023.
Universal Time is now:  Mon Aug 28 20:54:27 UTC 2023.

</span><span class="gp">root@rescue:/#</span></code></pre></figure>


</details>
<!-- markdownlint-enable MD033 -->

<p>Last but not least, we want to install <code class="language-plaintext highlighter-rouge">cryptsetup</code> and the linux image itself for AMD64 architectures (<code class="language-plaintext highlighter-rouge">linux-image-amd64</code>; For i386 (32bit) systems you need to install
the package for i386). During the installation also the keyboard is configured - I set mine to German.</p>

<p>The following command will be used to install the needed packages:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get install -y linux-image-amd64 cryptsetup
</code></pre></div></div>

<!-- markdownlint-disable MD033 MD034 -->
<details>
<summary>Example output:</summary>


<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">root@rescue:/#</span><span class="w"> </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> linux-image-amd64 cryptsetup
<span class="go">Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
The following additional packages will be installed:
  apparmor busybox cryptsetup-bin firmware-linux-free initramfs-tools initramfs-tools-core klibc-utils libklibc linux-base linux-image-6.1.0-11-amd64 zstd
Suggested packages:
  apparmor-profiles-extra apparmor-utils cryptsetup-initramfs dosfstools keyutils bash-completion linux-doc-6.1 debian-kernel-handbook grub-pc | grub-efi-amd64 | extlinux
The following NEW packages will be installed:
  apparmor busybox cryptsetup cryptsetup-bin firmware-linux-free initramfs-tools initramfs-tools-core klibc-utils libklibc linux-base linux-image-6.1.0-11-amd64 linux-image-amd64
  zstd
0 upgraded, 13 newly installed, 0 to remove and 0 not upgraded.
Need to get 71.3 MB of archives.
After this operation, 418 MB of additional disk space will be used.
Get:1 http://security.debian.org bookworm-security/main amd64 linux-image-6.1.0-11-amd64 amd64 6.1.38-4 [68.5 MB]
Get:2 http://ftp.de.debian.org/debian bookworm/main amd64 apparmor amd64 3.0.8-3 [616 kB]
Get:3 http://security.debian.org bookworm-security/main amd64 linux-image-amd64 amd64 6.1.38-4 [1484 B]
Get:4 http://ftp.de.debian.org/debian bookworm/main amd64 busybox amd64 1:1.35.0-4+b3 [452 kB]
Get:5 http://ftp.de.debian.org/debian bookworm/main amd64 cryptsetup-bin amd64 2:2.6.1-4~deb12u1 [473 kB]
Get:6 http://ftp.de.debian.org/debian bookworm/main amd64 cryptsetup amd64 2:2.6.1-4~deb12u1 [213 kB]
Get:7 http://ftp.de.debian.org/debian bookworm/main amd64 firmware-linux-free all 20200122-1 [24.2 kB]
Get:8 http://ftp.de.debian.org/debian bookworm/main amd64 libklibc amd64 2.0.12-1 [44.2 kB]
Get:9 http://ftp.de.debian.org/debian bookworm/main amd64 klibc-utils amd64 2.0.12-1 [94.9 kB]
Get:10 http://ftp.de.debian.org/debian bookworm/main amd64 initramfs-tools-core all 0.142 [105 kB]
Get:11 http://ftp.de.debian.org/debian bookworm/main amd64 linux-base all 4.9 [31.8 kB]
Get:12 http://ftp.de.debian.org/debian bookworm/main amd64 initramfs-tools all 0.142 [72.9 kB]
Get:13 http://ftp.de.debian.org/debian bookworm/main amd64 zstd amd64 1.5.4+dfsg2-5 [701 kB]
Fetched 71.3 MB in 2s (37.1 MB/s)
Preconfiguring packages ...
Selecting previously unselected package apparmor.
(Reading database ... 9405 files and directories currently installed.)
Preparing to unpack .../00-apparmor_3.0.8-3_amd64.deb ...
Unpacking apparmor (3.0.8-3) ...
Selecting previously unselected package busybox.
Preparing to unpack .../01-busybox_1%3a1.35.0-4+b3_amd64.deb ...
Unpacking busybox (1:1.35.0-4+b3) ...
Selecting previously unselected package cryptsetup-bin.
Preparing to unpack .../02-cryptsetup-bin_2%3a2.6.1-4~deb12u1_amd64.deb ...
Unpacking cryptsetup-bin (2:2.6.1-4~deb12u1) ...
Selecting previously unselected package cryptsetup.
Preparing to unpack .../03-cryptsetup_2%3a2.6.1-4~deb12u1_amd64.deb ...
Unpacking cryptsetup (2:2.6.1-4~deb12u1) ...
Selecting previously unselected package firmware-linux-free.
Preparing to unpack .../04-firmware-linux-free_20200122-1_all.deb ...
Unpacking firmware-linux-free (20200122-1) ...
Selecting previously unselected package libklibc:amd64.
Preparing to unpack .../05-libklibc_2.0.12-1_amd64.deb ...
Unpacking libklibc:amd64 (2.0.12-1) ...
Selecting previously unselected package klibc-utils.
Preparing to unpack .../06-klibc-utils_2.0.12-1_amd64.deb ...
Unpacking klibc-utils (2.0.12-1) ...
Selecting previously unselected package initramfs-tools-core.
Preparing to unpack .../07-initramfs-tools-core_0.142_all.deb ...
Unpacking initramfs-tools-core (0.142) ...
Selecting previously unselected package linux-base.
Preparing to unpack .../08-linux-base_4.9_all.deb ...
Unpacking linux-base (4.9) ...
Selecting previously unselected package initramfs-tools.
Preparing to unpack .../09-initramfs-tools_0.142_all.deb ...
Unpacking initramfs-tools (0.142) ...
Selecting previously unselected package linux-image-6.1.0-11-amd64.
Preparing to unpack .../10-linux-image-6.1.0-11-amd64_6.1.38-4_amd64.deb ...
Unpacking linux-image-6.1.0-11-amd64 (6.1.38-4) ...
Selecting previously unselected package linux-image-amd64.
Preparing to unpack .../11-linux-image-amd64_6.1.38-4_amd64.deb ...
Unpacking linux-image-amd64 (6.1.38-4) ...
Selecting previously unselected package zstd.
Preparing to unpack .../12-zstd_1.5.4+dfsg2-5_amd64.deb ...
Unpacking zstd (1.5.4+dfsg2-5) ...
Setting up cryptsetup-bin (2:2.6.1-4~deb12u1) ...
Setting up linux-base (4.9) ...
Setting up cryptsetup (2:2.6.1-4~deb12u1) ...
Running in chroot, ignoring command 'daemon-reload'
Running in chroot, ignoring command 'daemon-reload'
Setting up firmware-linux-free (20200122-1) ...
Setting up apparmor (3.0.8-3) ...
Running in chroot, ignoring command 'daemon-reload'
Created symlink /etc/systemd/system/sysinit.target.wants/apparmor.service → /lib/systemd/system/apparmor.service.
Setting up busybox (1:1.35.0-4+b3) ...
Setting up libklibc:amd64 (2.0.12-1) ...
Setting up klibc-utils (2.0.12-1) ...
No diversion 'diversion of /usr/share/initramfs-tools/hooks/klibc to /usr/share/initramfs-tools/hooks/klibc^i-t by klibc-utils', none removed.
Setting up zstd (1.5.4+dfsg2-5) ...
Setting up initramfs-tools-core (0.142) ...
Setting up initramfs-tools (0.142) ...
update-initramfs: deferring update (trigger activated)
Setting up linux-image-6.1.0-11-amd64 (6.1.38-4) ...
I: /vmlinuz.old is now a symlink to boot/vmlinuz-6.1.0-11-amd64
I: /initrd.img.old is now a symlink to boot/initrd.img-6.1.0-11-amd64
I: /vmlinuz is now a symlink to boot/vmlinuz-6.1.0-11-amd64
I: /initrd.img is now a symlink to boot/initrd.img-6.1.0-11-amd64
/etc/kernel/postinst.d/initramfs-tools:
update-initramfs: Generating /boot/initrd.img-6.1.0-11-amd64
Setting up linux-image-amd64 (6.1.38-4) ...
Processing triggers for initramfs-tools (0.142) ...
update-initramfs: Generating /boot/initrd.img-6.1.0-11-amd64</span></code></pre></figure>


</details>
<!-- markdownlint-enable MD033 MD034 -->

<h2 id="configuring-etccrypttab-and-etcfstab">Configuring <code class="language-plaintext highlighter-rouge">/etc/crypttab</code> and <code class="language-plaintext highlighter-rouge">/etc/fstab</code></h2>

<p>Next up is the configuration of <a href="https://linux.die.net/man/5/crypttab"><code class="language-plaintext highlighter-rouge">/etc/crypttab</code></a> and <a href="https://wiki.debian.org/fstab"><code class="language-plaintext highlighter-rouge">/etc/fstab</code></a>.
First, we’ll be starting with <code class="language-plaintext highlighter-rouge">/etc/crypttab</code> - to do so, we first have to read out the <code class="language-plaintext highlighter-rouge">UUID</code> of our system <code class="language-plaintext highlighter-rouge">LUKS</code> partition by using (adapt to your crypt device if necessary):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cryptsetup luksDump /dev/md1 | grep UUID
</code></pre></div></div>

<p>The given <code class="language-plaintext highlighter-rouge">UUID</code> has to be added to the file <code class="language-plaintext highlighter-rouge">/etc/crypttab</code> in the following format:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;LUKS_device_name&gt; UUID=&lt;UUID&gt; none luks
</code></pre></div></div>

<p>Substitute <code class="language-plaintext highlighter-rouge">&lt;LUKS_device_name&gt;</code> with the name of your <code class="language-plaintext highlighter-rouge">LUKS</code> device (e.g. <code class="language-plaintext highlighter-rouge">crypted_system</code>) and <code class="language-plaintext highlighter-rouge">&lt;UUID&gt;</code> with the <code class="language-plaintext highlighter-rouge">UUID</code> you received by the command before.</p>

<p>You can either do it by hand or use the following one liner (you can adjust the name of the <code class="language-plaintext highlighter-rouge">LUKS</code> partition):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "crypted_system UUID="$(cryptsetup luksDump /dev/md1 | grep UUID | awk '/UUID/ { print $2 }')" none luks" &gt; /etc/crypttab
</code></pre></div></div>

<p>The next step is to configure <code class="language-plaintext highlighter-rouge">/etc/fstab</code>.
To do so, we first need to read out the <code class="language-plaintext highlighter-rouge">UUID</code> for both the <code class="language-plaintext highlighter-rouge">/boot</code> partition (which is stored on <code class="language-plaintext highlighter-rouge">/dev/md0</code>) and all partitions that <code class="language-plaintext highlighter-rouge">LVM</code> is managing for us.
Again depending whether you have multiple <code class="language-plaintext highlighter-rouge">VGs</code> (e.g. another drive holding data) or not. This can be easily achieved using <code class="language-plaintext highlighter-rouge">blkid</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span>blkid /dev/md0
<span class="go">/dev/md0: UUID="67619dac-48fd-4140-9040-d31c1d3bba0f" TYPE="xfs" PARTLABEL="Linux filesystem" PARTUUID="e435544d-b8df-4e6a-bf74-7f094c3007e1"
</span><span class="gp">root@rescue:/#</span><span class="w"> </span>blkid /dev/mapper/vg_system-<span class="k">*</span>
<span class="go">/dev/mapper/vg_system-home: UUID="e560e1fc-897e-4738-832c-09c2663048ba" TYPE="xfs"
/dev/mapper/vg_system-root: UUID="c1934670-c520-4d57-b87c-69a376fa51e4" TYPE="xfs"
/dev/mapper/vg_system-swap: UUID="a2f49117-66f0-489b-9092-6548c272766d" TYPE="swap"
/dev/mapper/vg_system-tmp: UUID="d9f8f8a5-3a5f-4199-817c-a5c454281aeb" TYPE="xfs"
/dev/mapper/vg_system-var: UUID="1408bbe7-88a7-4181-85bc-edcc7b2ef054" TYPE="xfs"
/dev/mapper/vg_system-var_log: UUID="6f354868-dd1e-48d6-8ef7-c0dac5324ac5" TYPE="xfs"
/dev/mapper/vg_system-var_log_audit: UUID="3a5bf013-75e0-4981-a2fb-1666e0e3c293" TYPE="xfs"
/dev/mapper/vg_system-var_tmp: UUID="a2432df7-dd9d-4bc1-9a04-2f118463bf31" TYPE="xfs"
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Please note, the <code class="language-plaintext highlighter-rouge">UUIDs</code> above have been randomized and thus do not reflect an actual system. Your <code class="language-plaintext highlighter-rouge">UUIDs</code> will, of course, vary.</p>

<p>With the above information we can build our <code class="language-plaintext highlighter-rouge">/etc/fstab</code> in the following format:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;file system UUID&gt; &lt;mount point on the system&gt; &lt;type&gt; &lt;mount options&gt; &lt;dump&gt; &lt;pass&gt;
</code></pre></div></div>

<p>In the following table I summarized the flags (mount options) for each mount point. These are documented at e.g. <a href="https://linux.die.net/man/8/mount">linux.die.net</a>.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">mount point</th>
      <th style="text-align: left">flags</th>
      <th style="text-align: left">comment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">defaults</code></td>
      <td style="text-align: left">-</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/boot</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">defaults</code></td>
      <td style="text-align: left">-</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/tmp</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">rw,nosuid,nodev,noexec</code></td>
      <td style="text-align: left">For security reasons, you should consider adding <code class="language-plaintext highlighter-rouge">nosuid,nodev,noexec</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/var</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">rw</code></td>
      <td style="text-align: left">-</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/var/log</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">rw,nosuid,nodev,noexec</code></td>
      <td style="text-align: left">For security reasons, you should consider adding <code class="language-plaintext highlighter-rouge">nosuid,nodev,noexec</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/var/log/audit</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">rw,nosuid,nodev,noexec</code></td>
      <td style="text-align: left">For security reasons, you should consider adding <code class="language-plaintext highlighter-rouge">nosuid,nodev,noexec</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/var/tmp</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">rw,nosuid,nodev</code></td>
      <td style="text-align: left">For security reasons, you should consider adding <code class="language-plaintext highlighter-rouge">nosuid,nodev</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">/home</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">rw,nosuid,nodev</code></td>
      <td style="text-align: left">For security reasons, you should consider adding <code class="language-plaintext highlighter-rouge">nosuid,nodev</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">swap</code></td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">sw</code></td>
      <td style="text-align: left">-</td>
    </tr>
  </tbody>
</table>

<p>Please note, the hardening mount options are taken from the <a href="https://www.cisecurity.org/benchmark/debian_linux"><code class="language-plaintext highlighter-rouge">CIS</code> Benchmark for Debian Bullseye</a>.</p>

<p>The end result will look something like this:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">cat</span> /etc/fstab
<span class="gp">#</span><span class="w"> </span>file system                                   mount point     <span class="nb">type    </span>options                 dump    pass
<span class="go">UUID=c1934670-c520-4d57-b87c-69a376fa51e4       /               xfs     defaults                0       1
UUID=67619dac-48fd-4140-9040-d31c1d3bba0f       /boot           xfs     defaults                0       1
UUID=d9f8f8a5-3a5f-4199-817c-a5c454281aeb       /tmp            xfs     rw,nosuid,nodev         0       2
UUID=1408bbe7-88a7-4181-85bc-edcc7b2ef054       /var            xfs     rw                      0       2
UUID=6f354868-dd1e-48d6-8ef7-c0dac5324ac5       /var/log        xfs     rw,nosuid,nodev,noexec  0       2
UUID=3a5bf013-75e0-4981-a2fb-1666e0e3c293       /var/log/audit  xfs     rw,nosuid,nodev,noexec  0       2
UUID=a2432df7-dd9d-4bc1-9a04-2f118463bf31       /var/tmp        xfs     rw,nosuid,nodev         0       2
UUID=e560e1fc-897e-4738-832c-09c2663048ba       /home           xfs     rw,nosuid,nodev         0       2
UUID=a2f49117-66f0-489b-9092-6548c272766d       none            swap    sw                      0       0
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<h3 id="optional-configuring-automatical-unlock-of-the-data-partition">Optional: Configuring automatical unlock of the data partition</h3>

<p>In order to unlock the data <code class="language-plaintext highlighter-rouge">LUKS</code> partition after the system <code class="language-plaintext highlighter-rouge">LUKS</code> has been unlocked, we can make use of a
so-called <a href="https://wiki.archlinux.org/title/dm-crypt/Device_encryption#Keyfiles"><code class="language-plaintext highlighter-rouge">keyfile</code></a>.</p>

<p>What we can to do is:</p>

<ul>
  <li>Create a <code class="language-plaintext highlighter-rouge">keyfile</code></li>
  <li>Restrict the permissions of the <code class="language-plaintext highlighter-rouge">keyfile</code>, so only the user root has access to it</li>
  <li>Add the <code class="language-plaintext highlighter-rouge">keyfile</code> to the data <code class="language-plaintext highlighter-rouge">LUKS</code> partition</li>
  <li>Add an additional entry in <code class="language-plaintext highlighter-rouge">/etc/crypttab</code>, so the data <code class="language-plaintext highlighter-rouge">LUKS</code> partition gets automatically unlocked, when the system <code class="language-plaintext highlighter-rouge">LUKS</code> partition gets unlocked</li>
</ul>

<p>First, we need to create a <code class="language-plaintext highlighter-rouge">keyfile</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">dd </span><span class="k">if</span><span class="o">=</span>/dev/urandom <span class="nv">of</span><span class="o">=</span>/root/keyfile <span class="nv">bs</span><span class="o">=</span>1024 <span class="nv">count</span><span class="o">=</span>4
<span class="go">4+0 records in
4+0 records out
4096 bytes (4.1 kB, 4.0 KiB) copied, 0.000149027 s, 27.5 MB/s
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Next, we set the appropriate permissions on this file:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">chmod </span>0400 /root/keyfile
<span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Now, we add the <code class="language-plaintext highlighter-rouge">keyfile</code> to the data <code class="language-plaintext highlighter-rouge">LUKS</code> partition.
For this process you need to enter the password, which you used to create the <code class="language-plaintext highlighter-rouge">LUKS</code> (data) partition:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span>cryptsetup luksAddKey /dev/md2 /root/keyfile
<span class="go">Enter any existing passphrase:
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>We can verify, that adding of the <code class="language-plaintext highlighter-rouge">keyfile</code> worked properly using <code class="language-plaintext highlighter-rouge">cryptsetup luksDump</code> - here we can see, that two key slots are taken:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span>cryptsetup luksDump /dev/md2
<span class="go">LUKS header information for /dev/md2

Version:        1
Cipher name:    aes
Cipher mode:    xts-plain64
Hash spec:      sha1
Payload offset: 4096
MK bits:        512
MK digest:      3d 0b c6 a2 5c d1 37 98 87 70 ee 22 48 48 ff 90 36 2a 5d 46
MK salt:        e9 cb 0d bc 5f 1f 1d 77 ff 6b 2f 75 c4 3d 52 4b
                85 e2 ec 95 47 5c 20 8c dd ad 97 60 08 5c c4 a3
MK iterations:  158375
UUID:           4132d4a6-929e-4ab0-8bdd-ee43065b4b03

Key Slot 0: ENABLED
        Iterations:             633663
        Salt:                   a1 55 d6 82 9e 9b b1 26 55 48 88 01 83 50 fa 8b
                                d2 7d cc 16 bd 25 75 b9 af 5f 70 ef ee a1 fa 4b
        Key material offset:    8
        AF stripes:             4000
Key Slot 1: ENABLED
        Iterations:             1414363
        Salt:                   a5 9f f6 6e bc f7 4d 8d 5b 3b a7 03 65 f1 90 34
                                59 07 51 31 58 de ee be a8 58 49 1f 4b 6f 51 a2
        Key material offset:    512
        AF stripes:             4000
Key Slot 2: DISABLED
Key Slot 3: DISABLED
Key Slot 4: DISABLED
Key Slot 5: DISABLED
Key Slot 6: DISABLED
Key Slot 7: DISABLED
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Finally we add the device <code class="language-plaintext highlighter-rouge">/dev/md2</code> with its <code class="language-plaintext highlighter-rouge">UUID</code> (taken from <code class="language-plaintext highlighter-rouge">cryptsetup luksDump</code>) to <code class="language-plaintext highlighter-rouge">/etc/crypttab</code> with a reference to the <code class="language-plaintext highlighter-rouge">keyfile</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">echo</span> <span class="s1">'crypted_data UUID=4132d4a6-929e-4ab0-8bdd-ee43065b4b03 /root/keyfile luks'</span> <span class="o">&gt;&gt;</span> /etc/crypttab
<span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">cat</span> /etc/crypttab
<span class="go">crypted_system UUID=e6864adb-dd67-42a1-867c-6a241b4119b5 none luks
crypted_data UUID=4132d4a6-929e-4ab0-8bdd-ee43065b4b03 /root/keyfile luks
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<h2 id="installing-additional-software">Installing additional software</h2>

<p>Within this section, we are going to install additional packages. Not all packages I am going to install are needed by the operating system to function properly.
First, install the <strong>required packages</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get install -y makedev lvm2 ssh dropbear busybox initramfs-tools bash-completion kbd console-setup pciutils psmisc grub-pc git plymouth sudo man xfsprogs ntp python3 dropbear-initramfs
</code></pre></div></div>

<p><strong>Optionally</strong>, install more packages, such as:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get -y install vim iftop iotop htop screen postfix mailutils fail2ban mdadm
</code></pre></div></div>

<p>:warning: It can happen that the disks are detected in a different order during boot than during installation time. To avoid issues while booting, please select
all <strong>physical devices</strong> during GRUB installation, when the installer asks you where to install GRUB to.</p>

<p>:warning: Physical devices are for instance <code class="language-plaintext highlighter-rouge">/dev/sda</code>, <code class="language-plaintext highlighter-rouge">/dev/sdb</code>; <strong>NOT</strong> the partitions of those devices (such as <code class="language-plaintext highlighter-rouge">/dev/sda1</code>, etc.).</p>

<h2 id="post-installation-tasks">Post-installation tasks</h2>

<p>Generally the system is fully installed and can be rebooted.
<strong>However</strong>, the remote unlock via SSH is not configured yet and as well some optional post-installation setup tasks are not done (yet).
This includes adding an additional user, configuring vim, installing fail2ban as a precaution and “hardening” the system a bit.</p>

<h3 id="configuring-vim">Configuring vim</h3>

<p>With later versions of vim it is (by default) not possible anymore to copy/paste from vim using your mouse. In order to be able to copy/paste from vim, one needs to
create a <code class="language-plaintext highlighter-rouge">.vimrc</code> in every users home directory with the following content:</p>

<div class="language-vim highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">set</span> <span class="nb">clipboard</span><span class="p">=</span>unnamed
</code></pre></div></div>

<p>It is a pain if you have to do this (and even remembering to do so) every time you add a new user. This is why we make use of <code class="language-plaintext highlighter-rouge">/etc/skel</code> and simply add a file in
there called <code class="language-plaintext highlighter-rouge">.vimrc</code> with the line from above.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo 'set clipboard=unnamed' &gt; /etc/skel/.vimrc
</code></pre></div></div>

<p>By now every new user will have this file in its home directory automatically. As the user root is already created, we need to copy this file to its home directory:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">cp</span> /etc/skel/.vimrc /root/
<span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">ls</span> <span class="nt">-la</span> /root/
<span class="go">total 20
drwx------  2 root root   62 Aug 26 19:08 .
drwxr-xr-x 21 root root 4096 Aug 26 16:59 ..
-rw-r--r--  1 root root  570 Jan 31  2010 .bashrc
-rw-r--r--  1 root root  148 Aug 17  2015 .profile
-rw-r--r--  1 root root   22 Aug 26 19:08 .vimrc
-r--------  1 root root 4096 Aug 26 18:30 keyfile
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<h3 id="adding-an-additional-user">Adding an additional user</h3>

<p>Adding an additional user is pretty easy and does not need much explanation.</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span>adduser steffen <span class="nt">--disabled-password</span> <span class="nt">--gecos</span> <span class="s2">"steffen"</span>
<span class="go">Adding user `steffen' ...
Adding new group `steffen' (1000) ...
Adding new user `steffen' (1000) with group `steffen' ...
Creating home directory `/home/steffen' ...
Copying files from `/etc/skel' ...
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Adding the user to <code class="language-plaintext highlighter-rouge">sudoers</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span>usermod <span class="nt">-aG</span> <span class="nb">sudo </span>steffen
<span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">groups </span>steffen
<span class="go">steffen : steffen sudo
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Add (an) SSH public key(s) to the users <code class="language-plaintext highlighter-rouge">authorized_keys</code> file:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">mkdir</span> /home/steffen/.ssh
<span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">cat</span> <span class="o">&gt;</span>  /home/steffen/.ssh/authorized_keys <span class="o">&lt;&lt;</span> <span class="sh">"</span><span class="no">EOF</span><span class="sh">"
</span><span class="go">ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINmwi1h1337Q/hIomn3VWjw5Ky2vd2ujnYyaTLuil5sh Key1
ecdsa-sha2-nistp521 AAAAE2VjZHNhLXNoYTItbmlzdHA313373bmlzdHA1MjEAAACFBADjklC2kev78lChCQobczoF0Zl1lcL9SWiVcfj/KoloxC2/Nz7gN1UQdqJHKJamwWyFdIUy6JucRK730LV4QQhVNwCY2fyf9gGaOP56FvzzeEq9n2pR3WNyD74Bn8u1abt+vALHDEVO6dejZKunJmzsBzXIe79kAH34NwM+gCd4vQbjoQ== Key2
ecdsa-sha2-nistp521 AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBAF11m0mRdIjcwwrfz04t4O+YqngFbP0gP313373+vUADyOYkdhiimbJYN9ge1nVy3nMkMGMf5HNzD9AbO1ACjRyFkta0b2pNyu3kdKu6EQlJWgl25PzJQLjxhllinS+xf4rT5lcdOu3aSKDrG6lV5xXh/Cw/i84VR5NWFftHfRA== Key3
EOF
</span><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">chown</span> <span class="nt">-R</span> steffen:steffen /home/steffen/
<span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">chmod </span>600 /home/steffen/.ssh/authorized_keys
<span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Of course, the SSH keys above have been modified :slightly_smiling_face:</p>

<p>Set the default editor to vim:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span>update-alternatives <span class="nt">--set</span> editor /usr/bin/vim.basic
<span class="go">update-alternatives: using /usr/bin/vim.basic to provide /usr/bin/editor (editor) in manual mode
</span></code></pre></div></div>

<p>Adding an Ansible user to be able to automate the system later on:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span>adduser remote-ansible <span class="nt">--disabled-password</span> <span class="nt">--gecos</span> <span class="s2">"Ansible Remote User"</span>
<span class="go">Adding user `remote-ansible' ...
Adding new group `remote-ansible' (1001) ...
Adding new user `remote-ansible' (1001) with group `remote-ansible' ...
Creating home directory `/home/remote-ansible' ...
Copying files from `/etc/skel' ...
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Adding the Ansible user to <code class="language-plaintext highlighter-rouge">sudoers</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span>usermod <span class="nt">-aG</span> <span class="nb">sudo </span>remote-ansible
<span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">groups </span>remote-ansible
<span class="go">remote-ansible : remote-ansible sudo
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Add a public key to the Ansible user’s <code class="language-plaintext highlighter-rouge">authorized_keys</code> file:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">mkdir</span> /home/remote-ansible/.ssh
<span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">cat</span> <span class="o">&gt;</span>  /home/remote-ansible/.ssh/authorized_keys <span class="o">&lt;&lt;</span> <span class="sh">"</span><span class="no">EOF</span><span class="sh">"
</span><span class="go">ecdsa-sha2-nistp521 AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1Mj313373/ok5i5CSwUuK8y8Zn2URC/ex1cQBfVBANQlfhAe7P4eFK43IdSsnp3uEigsLOr9Uju9QvuniTNuIudkfonmeL91znWyP0KyCciOxZO2O7Mtf6V9GLaA== root@ansible.servers.local
EOF
</span><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">chown</span> <span class="nt">-R</span> remote-ansible:remote-ansible /home/remote-ansible/
<span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">chmod </span>600 /home/remote-ansible/.ssh/authorized_keys
<span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>In order to allow <code class="language-plaintext highlighter-rouge">sudo</code> commands without entering a password the <code class="language-plaintext highlighter-rouge">sudoers</code> file needs to be adjusted - specifically the <code class="language-plaintext highlighter-rouge">%sudo rule</code> (use <code class="language-plaintext highlighter-rouge">visudo</code>):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Allow members of group sudo to execute any command
%sudo   ALL=(ALL) NOPASSWD: ALL
</code></pre></div></div>

<h3 id="hardening-the-system">“Hardening” the system</h3>

<p>The system should be hardened - at least a bit. In the next few lines I’ll show you how to do a <strong>minimal</strong> hardening.
First, we want to harden the <code class="language-plaintext highlighter-rouge">SSHd</code>.
My configuration file (<code class="language-plaintext highlighter-rouge">/etc/ssh/sshd.conf</code>) looks like follows:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">cat</span> /etc/ssh/sshd_config
<span class="go">[..]
Port 32764
[..]
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

</span><span class="gp">#</span><span class="w"> </span>Ciphers and keying
<span class="go">RekeyLimit 64M

</span><span class="gp">#</span><span class="w"> </span>Logging
<span class="go">SyslogFacility AUTH
LogLevel INFO

</span><span class="gp">#</span><span class="w"> </span>Authentication:
<span class="go">
LoginGraceTime 1m
PermitRootLogin no
StrictModes yes
MaxAuthTries 3
MaxSessions 5

PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys

</span><span class="gp">#</span><span class="w"> </span>To disable tunneled clear text passwords, change to no here!
<span class="go">PasswordAuthentication no
PermitEmptyPasswords no

</span><span class="gp">#</span><span class="w"> </span>Change to <span class="nb">yes </span>to <span class="nb">enable </span>challenge-response passwords <span class="o">(</span>beware issues with
<span class="gp">#</span><span class="w"> </span>some PAM modules and threads<span class="o">)</span>
<span class="go">ChallengeResponseAuthentication no

</span><span class="gp">#</span><span class="w"> </span>Set this to <span class="s1">'yes'</span> to <span class="nb">enable </span>PAM authentication, account processing,
<span class="gp">#</span><span class="w"> </span>and session processing. If this is enabled, PAM authentication will
<span class="gp">#</span><span class="w"> </span>be allowed through the ChallengeResponseAuthentication and
<span class="gp">#</span><span class="w"> </span>PasswordAuthentication.  Depending on your PAM configuration,
<span class="gp">#</span><span class="w"> </span>PAM authentication via ChallengeResponseAuthentication may bypass
<span class="gp">#</span><span class="w"> </span>the setting of <span class="s2">"PermitRootLogin without-password"</span><span class="nb">.</span>
<span class="gp">#</span><span class="w"> </span>If you just want the PAM account and session checks to run without
<span class="gp">#</span><span class="w"> </span>PAM authentication, <span class="k">then </span><span class="nb">enable </span>this but <span class="nb">set </span>PasswordAuthentication
<span class="gp">#</span><span class="w"> </span>and ChallengeResponseAuthentication to <span class="s1">'no'</span><span class="nb">.</span>
<span class="go">UsePAM yes

AllowAgentForwarding no
AllowTcpForwarding no
GatewayPorts no
X11Forwarding no
</span><span class="gp">#</span>X11DisplayOffset 10
<span class="gp">#</span>X11UseLocalhost <span class="nb">yes</span>
<span class="go">PermitTTY yes
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
UseLogin no
UsePrivilegeSeparation sandbox
PermitUserEnvironment no
Compression delayed
ClientAliveInterval 0
ClientAliveCountMax 3
UseDNS no
PidFile /var/run/sshd.pid
MaxStartups 10:30:100
PermitTunnel no
ChrootDirectory none
VersionAddendum none
Banner /etc/issue.net

</span><span class="gp">#</span><span class="w"> </span>override default of no subsystems
<span class="go">Subsystem       sftp    /usr/lib/openssh/sftp-server
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Installing <code class="language-plaintext highlighter-rouge">Fail2Ban</code> is best-practice with systems facing the internet directly:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> fail2ban
<span class="go">Reading package lists... Done
Building dependency tree
Reading state information... Done
The following additional packages will be installed:
  python3-pyinotify python3-systemd whois
Suggested packages:
  monit python-pyinotify-doc
The following NEW packages will be installed:
  fail2ban python3-pyinotify python3-systemd whois
0 upgraded, 4 newly installed, 0 to remove and 0 not upgraded.
Need to get 424 kB of archives.
After this operation, 1,967 kB of additional disk space will be used.
Get:1 http://ftp.de.debian.org/debian bullseye/main amd64 fail2ban all 0.9.6-2 [288 kB]
Get:2 http://ftp.de.debian.org/debian bullseye/main amd64 python3-pyinotify all 0.9.6-1 [26.9 kB]
Get:3 http://ftp.de.debian.org/debian bullseye/main amd64 python3-systemd amd64 233-1 [33.3 kB]
Get:4 http://ftp.de.debian.org/debian bullseye/main amd64 whois amd64 5.2.17~deb9u1 [76.8 kB]
Fetched 424 kB in 0s (3,477 kB/s)
Selecting previously unselected package fail2ban.
(Reading database ... 38168 files and directories currently installed.)
Preparing to unpack .../fail2ban_0.9.6-2_all.deb ...
Unpacking fail2ban (0.9.6-2) ...
Selecting previously unselected package python3-pyinotify.
Preparing to unpack .../python3-pyinotify_0.9.6-1_all.deb ...
Unpacking python3-pyinotify (0.9.6-1) ...
Selecting previously unselected package python3-systemd.
Preparing to unpack .../python3-systemd_233-1_amd64.deb ...
Unpacking python3-systemd (233-1) ...
Selecting previously unselected package whois.
Preparing to unpack .../whois_5.2.17~deb9u1_amd64.deb ...
Unpacking whois (5.2.17~deb9u1) ...
Setting up fail2ban (0.9.6-2) ...
Created symlink /etc/systemd/system/multi-user.target.wants/fail2ban.service â†’ /lib/systemd/system/fail2ban.service.
Setting up whois (5.2.17~deb9u1) ...
Setting up python3-systemd (233-1) ...
Processing triggers for systemd (232-25+deb9u4) ...
Processing triggers for man-db (2.7.6.1-2) ...
Setting up python3-pyinotify (0.9.6-1) ...
</span></code></pre></div></div>

<p>In my case I only enabled the <code class="language-plaintext highlighter-rouge">sshd jail</code>.
For that simply create the file <code class="language-plaintext highlighter-rouge">/etc/fail2ban/jail.local</code> with the following content:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">cat</span> /etc/fail2ban/jail.local
<span class="go">[sshd]

port    = 32764
logpath = %(sshd_log)s
backend = %(sshd_backend)s
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Please adjust the <code class="language-plaintext highlighter-rouge">port</code> directive according to your setup.</p>

<h2 id="preparing-the-remote-unlock-via-ssh-of-the-luks-partition">Preparing the remote unlock via SSH of the <code class="language-plaintext highlighter-rouge">LUKS</code> partition</h2>

<p>In order to unlock the system’s <code class="language-plaintext highlighter-rouge">LUKS</code> partition(s) via SSH using <code class="language-plaintext highlighter-rouge">Dropbear</code>, we need to do a few things. To be able to remotely unlock via SSH, we need to properly
configure both <code class="language-plaintext highlighter-rouge">Dropbear</code> and GRUB for that.</p>

<h3 id="configure-dropbear">Configure <code class="language-plaintext highlighter-rouge">Dropbear</code></h3>

<p>First, we copy the public SSH key, we just added to the created user, to the <code class="language-plaintext highlighter-rouge">authorized_keys</code> file for <code class="language-plaintext highlighter-rouge">Dropbear</code>.</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">cp</span> /home/steffen/.ssh/authorized_keys /etc/dropbear/initramfs/authorized_keys
<span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Next we configure <code class="language-plaintext highlighter-rouge">Dropbear</code>. We will be using the following settings, which can be read about at <a href="https://linux.die.net/man/8/dropbear">linux.die.net</a>:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">option</th>
      <th>explanation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">-p 605</td>
      <td><code class="language-plaintext highlighter-rouge">Dropbear</code> will listen on port 605</td>
    </tr>
    <tr>
      <td style="text-align: left">-s</td>
      <td>Disable password logins</td>
    </tr>
    <tr>
      <td style="text-align: left">-j</td>
      <td>Disable local port forwarding</td>
    </tr>
    <tr>
      <td style="text-align: left">-k</td>
      <td>Disable remote port forwarding</td>
    </tr>
    <tr>
      <td style="text-align: left">-I 60</td>
      <td>Disconnect the session if no traffic is transmitted for 60 seconds</td>
    </tr>
  </tbody>
</table>

<p>You can set those settings easily using the below command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sed 's/#DROPBEAR_OPTIONS=""/DROPBEAR_OPTIONS="-p 605 -s -j -k -I 60"/' -i /etc/dropbear/initramfs/dropbear.conf
</code></pre></div></div>

<p>Verify, whether the settings where set correctly:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grep DROPBEAR_OPTIONS /etc/dropbear/initramfs/dropbear.conf
</code></pre></div></div>

<!-- markdownlint-disable MD033 -->
<details>
<summary>Example output:</summary>


<figure class="highlight"><pre><code class="language-terminal" data-lang="terminal"><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">sed</span> <span class="s1">'s/#DROPBEAR_OPTIONS=""/DROPBEAR_OPTIONS="-p 605 -s -j -k -I 60"/'</span> <span class="nt">-i</span> /etc/dropbear/initramfs/dropbear.conf
<span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">grep </span>DROPBEAR_OPTIONS /etc/dropbear/initramfs/dropbear.conf
<span class="go">DROPBEAR_OPTIONS="-p 605 -s -j -k -I 60"
</span><span class="gp">root@rescue:/#</span></code></pre></figure>


</details>
<!-- markdownlint-enable MD033 -->

<h3 id="configure-grub">Configure GRUB</h3>

<p>Configuring GRUB for remote unlocking is as easy as configuring <code class="language-plaintext highlighter-rouge">Dropbear</code>.</p>

<p>However, we need to use the “old style-naming” of the ethernet devices (e.g. <code class="language-plaintext highlighter-rouge">eth0</code>), so we have to use both <code class="language-plaintext highlighter-rouge">net.ifnames=0</code> and <code class="language-plaintext highlighter-rouge">biosdevname=0</code> in the
<code class="language-plaintext highlighter-rouge">GRUB_CMDLINE_LINUX_DEFAULT</code>, which can be found in <code class="language-plaintext highlighter-rouge">/etc/default/grub</code>. Additionally we need to enter the IP address, the gateway, the network mask and the ethernet
device to use for the remote connection.</p>

<p>Following is the format of the IP parameter (a detailed explanation can be looked up at <a href="https://www.kernel.org/doc/Documentation/filesystems/nfs/nfsroot.txt">kernel.org</a>):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ip=&lt;ip&gt;::&lt;gateway&gt;:&lt;netmask&gt;::&lt;ethernet device&gt;:none
</code></pre></div></div>

<p>Substitute <code class="language-plaintext highlighter-rouge">&lt;ip&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;gateway&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;netmask&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;ethernet device&gt;</code> with your values.</p>

<p>Following an example configuration:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GRUB_CMDLINE_LINUX_DEFAULT="net.ifnames=0 biosdevname=0 ip=159.69.68.69::159.69.68.65:255.255.255.192::eth0:none"
</code></pre></div></div>

<h3 id="adding-drivers-to-initramfs">Adding drivers to <code class="language-plaintext highlighter-rouge">initramfs</code></h3>

<p>To be able to unlock the system <code class="language-plaintext highlighter-rouge">LUKS</code> partition via SSH, an IP address on any ethernet device (in our case <code class="language-plaintext highlighter-rouge">eth0</code>) is required, obviously. For that reason, it
is necessary to provide the correct drivers to the <code class="language-plaintext highlighter-rouge">initramfs image</code>.</p>

<p>You can find out which driver your ethernet device uses with the following command:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">grep </span>DRIVER /sys/class/net/eth0/device/uevent
<span class="go">DRIVER=igb
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Now we need to tell <code class="language-plaintext highlighter-rouge">initramfs-tools</code> to include the above driver in our <code class="language-plaintext highlighter-rouge">initramfs image</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">echo</span> <span class="s2">"igb"</span> <span class="o">&gt;&gt;</span> /etc/initramfs-tools/modules
<span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">cat</span> /etc/initramfs-tools/modules
<span class="gp">#</span><span class="w"> </span>List of modules that you want to include <span class="k">in </span>your initramfs.
<span class="gp">#</span><span class="w"> </span>They will be loaded at boot <span class="nb">time </span><span class="k">in </span>the order below.
<span class="gp">#</span><span class="w">
</span><span class="gp">#</span><span class="w"> </span>Syntax:  module_name <span class="o">[</span>args ...]
<span class="gp">#</span><span class="w">
</span><span class="gp">#</span><span class="w"> </span>You must run update-initramfs<span class="o">(</span>8<span class="o">)</span> to effect this change.
<span class="gp">#</span><span class="w">
</span><span class="gp">#</span><span class="w"> </span>Examples:
<span class="gp">#</span><span class="w">
</span><span class="gp">#</span><span class="w"> </span>raid1
<span class="gp">#</span><span class="w"> </span>sd_mod
<span class="go">igb
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<h3 id="optional-updating-the-mdadm-configuration">Optional: Updating the <code class="language-plaintext highlighter-rouge">mdadm</code> configuration</h3>

<p>This section only concerns users with software RAIDs.</p>

<p>I guess you recall that we created the <code class="language-plaintext highlighter-rouge">mdadm</code> software RAIDs <em>outside</em> of the <code class="language-plaintext highlighter-rouge">chroot</code>. Since we mounted <code class="language-plaintext highlighter-rouge">/proc</code> (and other system relevant partitions,
such as <code class="language-plaintext highlighter-rouge">dev</code>) <code class="language-plaintext highlighter-rouge">mdadm</code> is <em>currently</em> aware which arrays have been created with which personalities. To ensure that the configuration remains intact after
rebooting, it cannot hurt to update the <code class="language-plaintext highlighter-rouge">/etc/mdadm/mdadm.conf</code> with the proper configuration.</p>

<p>First, lets ensure that the RAIDs are being detected perfectly fine by <code class="language-plaintext highlighter-rouge">mdadm</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span>mdadm <span class="nt">--detail</span> <span class="nt">--scan</span>
<span class="go">ARRAY /dev/md0 metadata=0.90 UUID=c8745d1f:ed8dd7dc:776c2c25:004bd7b2
ARRAY /dev/md/1 metadata=1.2 name=rescue:1 UUID=a0e88eb6:4fae8ddc:a2214f58:4324028a
ARRAY /dev/md/2 metadata=1.2 name=rescue:2 UUID=99552fd2:254ca90d:7b9e04ad:942333ee
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Looks good to me, let’s populate <code class="language-plaintext highlighter-rouge">/etc/mdadm/mdadm.conf</code> with that content:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/#</span><span class="w"> </span>mdadm <span class="nt">--detail</span> <span class="nt">--scan</span> <span class="o">&gt;</span> /etc/mdadm/mdam.conf
<span class="go">ARRAY /dev/md0 metadata=0.90 UUID=c8745d1f:ed8dd7dc:776c2c25:004bd7b2
ARRAY /dev/md/1 metadata=1.2 name=rescue:1 UUID=a0e88eb6:4fae8ddc:a2214f58:4324028a
ARRAY /dev/md/2 metadata=1.2 name=rescue:2 UUID=99552fd2:254ca90d:7b9e04ad:942333ee
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Yea, right, it’s as easy as that :sunglasses:</p>

<h3 id="installing-grub-generating-new-initramfs-and-updating-grub">Installing GRUB, generating new <code class="language-plaintext highlighter-rouge">initramfs</code> and updating GRUB</h3>

<p>Finally we are able to install GRUB, generate a new <code class="language-plaintext highlighter-rouge">initramfs image</code> and update GRUB the GRUB configuration file.</p>

<p>Since (at least) Debian 11 (Buster) it is necessary to manually install GRUB onto the devices that should “store” the boot loader, as it is not automatically triggered anymore.</p>

<p>This can be easily done with: <code class="language-plaintext highlighter-rouge">grub-install &lt;device&gt;</code>. <code class="language-plaintext highlighter-rouge">&lt;device&gt;</code> has to be replaced with the device/s that have the BIOS boot partition created. In my case
that’s <code class="language-plaintext highlighter-rouge">/dev/nvme0n1</code> and <code class="language-plaintext highlighter-rouge">/dev/nvme1n1</code>.</p>

<p>:warning: It is important to specify the <em>device</em> itself, not a partition!</p>

<p>Updating both <code class="language-plaintext highlighter-rouge">initramfs</code> and GRUB is necessary as we changed the configuration and/or added new drivers to the <code class="language-plaintext highlighter-rouge">initramfs image</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue:/boot#</span><span class="w"> </span>update-initramfs <span class="nt">-u</span> <span class="nt">-k</span> all
<span class="go">update-initramfs: Generating /boot/initrd.img-4.19.0-10-amd64
</span><span class="gp">root@rescue:/boot#</span><span class="w"> </span>update-grub
<span class="go">Generating grub configuration file ...
Found linux image: /boot/vmlinuz-4.19.0-10-amd64
Found initrd image: /boot/initrd.img-4.19.0-10-amd64
done
</span><span class="gp">root@rescue:/boot#</span><span class="w">
</span></code></pre></div></div>

<p>Now simply logout of the <code class="language-plaintext highlighter-rouge">chroot</code> and reboot the system.
You should be able to reach the system on the port you have configured in the <code class="language-plaintext highlighter-rouge">Dropbear</code> section, via SSH. Since <code class="language-plaintext highlighter-rouge">Dropbear</code> is not aware of any other users
than root, you need to use the user <code class="language-plaintext highlighter-rouge">root</code> to login.
If you followed my configuration, it’s port 605 via SSH. There you’ll have to run <code class="language-plaintext highlighter-rouge">cryptroot-unlock</code> and enter the password for the system <code class="language-plaintext highlighter-rouge">LUKS</code> partition.</p>

<p>Congratulations, you managed to manually install a Debian Bullseye :sunglasses:</p>

<h2 id="troubleshooting-the-installation">Troubleshooting the installation</h2>

<p>If something goes wrong during the installation and the system does not come up as expected, you can troubleshoot the installation pretty easily using a
live CD (like the Hetzner rescue system).</p>

<p>First login to the live system as root.
In order to re-mount the system as done during the installation, you can use the script from the section <a href="#Mounting the partitions">Mounting the partitions</a> or do it manually.
In this case I will do it manually, just to show the general approach behind this procedure.
First, we need to unlock the system’s <code class="language-plaintext highlighter-rouge">LUKS</code> partition and - if you have it - the data <code class="language-plaintext highlighter-rouge">LUKS</code> partition:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>cryptsetup luksOpen /dev/sda3 crypted_system
<span class="go">Enter passphrase for /dev/sda3:
</span><span class="gp">root@rescue ~ #</span><span class="w"> </span>cryptsetup luksOpen /dev/sdb crypted_data
<span class="go">Enter passphrase for /dev/sdb:
</span><span class="gp">root@rescue ~ #</span><span class="w"> </span><span class="nb">ls</span> <span class="nt">-la</span> /dev/mapper/
<span class="go">total 0
drwxr-xr-x  2 root root     100 Aug 27 16:29 .
drwxr-xr-x 16 root root    6.4K Aug 27 16:29 ..
crw-------  1 root root 10, 236 Aug 27 16:28 control
</span><span class="gp">lrwxrwxrwx  1 root root       7 Aug 27 16:29 crypted_data -&gt;</span><span class="w"> </span>../dm-1
<span class="gp">lrwxrwxrwx  1 root root       7 Aug 27 16:29 crypted_system -&gt;</span><span class="w"> </span>../dm-0
<span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<p>Next, we need to make the system aware of our volume groups. This can easily be done using <code class="language-plaintext highlighter-rouge">vgchange -aay</code>, which will automatically detect all volume groups and active them:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>vgchange <span class="nt">-aay</span>
<span class="go">  1 logical volume(s) in volume group "vg_data" now active
  7 logical volume(s) in volume group "vg_system" now active
</span><span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<p>Now, we can mount all volumes again to <code class="language-plaintext highlighter-rouge">/mnt</code>:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span><span class="nb">ls</span> <span class="nt">-la</span> /dev/mapper/<span class="k">*</span>
<span class="go">crw------- 1 root root 10, 236 Aug 27 16:28 /dev/mapper/control
</span><span class="gp">lrwxrwxrwx 1 root root       7 Aug 27 16:29 /dev/mapper/crypted_data -&gt;</span><span class="w"> </span>../dm-1
<span class="gp">lrwxrwxrwx 1 root root       7 Aug 27 16:29 /dev/mapper/crypted_system -&gt;</span><span class="w"> </span>../dm-0
<span class="gp">lrwxrwxrwx 1 root root       7 Aug 27 16:33 /dev/mapper/vg_data-var_lib_vz -&gt;</span><span class="w"> </span>../dm-2
<span class="gp">lrwxrwxrwx 1 root root       7 Aug 27 16:33 /dev/mapper/vg_system-home -&gt;</span><span class="w"> </span>../dm-4
<span class="gp">lrwxrwxrwx 1 root root       7 Aug 27 16:33 /dev/mapper/vg_system-root -&gt;</span><span class="w"> </span>../dm-3
<span class="gp">lrwxrwxrwx 1 root root       7 Aug 27 16:33 /dev/mapper/vg_system-swap -&gt;</span><span class="w"> </span>../dm-8
<span class="gp">lrwxrwxrwx 1 root root       7 Aug 27 16:33 /dev/mapper/vg_system-tmp -&gt;</span><span class="w"> </span>../dm-5
<span class="gp">lrwxrwxrwx 1 root root       7 Aug 27 16:33 /dev/mapper/vg_system-var -&gt;</span><span class="w"> </span>../dm-9
<span class="gp">lrwxrwxrwx 1 root root       7 Aug 27 16:33 /dev/mapper/vg_system-var_log -&gt;</span><span class="w"> </span>../dm-7
<span class="gp">lrwxrwxrwx 1 root root       7 Aug 27 16:33 /dev/mapper/vg_system-var_tmp -&gt;</span><span class="w"> </span>../dm-6
<span class="gp">root@rescue ~ #</span><span class="w"> </span>mount /dev/mapper/vg_system-root /mnt/
<span class="gp">root@rescue ~ #</span><span class="w"> </span>mount /dev/mapper/vg_system-home /mnt/home/
<span class="gp">root@rescue ~ #</span><span class="w"> </span>mount /dev/mapper/vg_system-tmp /mnt/tmp
<span class="gp">root@rescue ~ #</span><span class="w"> </span>mount /dev/mapper/vg_system-var /mnt/var/
<span class="gp">root@rescue ~ #</span><span class="w"> </span>mount /dev/mapper/vg_system-var_log /mnt/var/log/
<span class="gp">root@rescue ~ #</span><span class="w"> </span>mount /dev/mapper/vg_system-var_tmp /mnt/var/tmp/
<span class="gp">root@rescue ~ #</span><span class="w"> </span>mount /dev/mapper/vg_data-var_lib_vz /mnt/var/lib/vz/
<span class="gp">root@rescue ~ #</span><span class="w"> </span>mount
<span class="go">proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)
sys on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)
udev on /dev type devtmpfs (rw,relatime,size=132021144k,nr_inodes=33005286,mode=755)
devpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)
213.133.99.101:/nfs on /root/.oldroot/nfs type nfs (ro,noatime,vers=3,rsize=8192,wsize=8192,namlen=255,acregmin=600,acregmax=600,acdirmin=600,acdirmax=600,hard,nocto,nolock,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=213.133.99.101,mountvers=3,mountproto=tcp,local_lock=all,addr=213.133.99.101)
overlay on / type overlay (rw,relatime,lowerdir=/nfsroot,upperdir=/ramfs/root,workdir=/ramfs/work)
securityfs on /sys/kernel/security type securityfs (rw,nosuid,nodev,noexec,relatime)
tmpfs on /dev/shm type tmpfs (rw,nosuid,nodev)
devpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000)
tmpfs on /run type tmpfs (rw,nosuid,nodev,mode=755)
tmpfs on /run/lock type tmpfs (rw,nosuid,nodev,noexec,relatime,size=5120k)
tmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,mode=755)
cgroup on /sys/fs/cgroup/systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,release_agent=/lib/systemd/systemd-cgroups-agent,name=systemd)
cgroup on /sys/fs/cgroup/cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)
cgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpu,cpuacct)
cgroup on /sys/fs/cgroup/blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)
cgroup on /sys/fs/cgroup/memory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)
cgroup on /sys/fs/cgroup/devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)
cgroup on /sys/fs/cgroup/freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)
cgroup on /sys/fs/cgroup/perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)
cgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)
systemd-1 on /proc/sys/fs/binfmt_misc type autofs (rw,relatime,fd=21,pgrp=1,timeout=300,minproto=5,maxproto=5,direct)
mqueue on /dev/mqueue type mqueue (rw,relatime)
hugetlbfs on /dev/hugepages type hugetlbfs (rw,relatime)
fusectl on /sys/fs/fuse/connections type fusectl (rw,relatime)
/dev/mapper/vg_system-root on /mnt type xfs (rw,relatime,attr2,inode64,noquota)
/dev/mapper/vg_system-home on /mnt/home type xfs (rw,relatime,attr2,inode64,noquota)
/dev/mapper/vg_system-tmp on /mnt/tmp type xfs (rw,relatime,attr2,inode64,noquota)
/dev/mapper/vg_system-var on /mnt/var type xfs (rw,relatime,attr2,inode64,noquota)
/dev/mapper/vg_system-var_log on /mnt/var/log type xfs (rw,relatime,attr2,inode64,noquota)
/dev/mapper/vg_system-var_tmp on /mnt/var/tmp type xfs (rw,relatime,attr2,inode64,noquota)
/dev/mapper/vg_data-var_lib_vz on /mnt/var/lib/vz type xfs (rw,relatime,attr2,inode64,noquota)
</span><span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<p>Before we can <code class="language-plaintext highlighter-rouge">chroot</code> into the environment, we need to mount the necessary system partitions:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>mount <span class="nt">-o</span> <span class="nb">bind</span> /dev/ /mnt/dev/
<span class="gp">root@rescue ~ #</span><span class="w"> </span>mount <span class="nt">-t</span> devpts devpts /mnt/dev/pts/
<span class="gp">root@rescue ~ #</span><span class="w"> </span>mount <span class="nt">-t</span> proc proc /mnt/proc/
<span class="gp">root@rescue ~ #</span><span class="w"> </span>mount <span class="nt">-t</span> sysfs sys /mnt/sys/
<span class="gp">root@rescue ~ #</span><span class="w"> </span><span class="nv">XTERM</span><span class="o">=</span>xterm-color <span class="nv">LANG</span><span class="o">=</span>C.UTF-8 <span class="nb">chroot</span> /mnt /bin/bash
<span class="gp">root@rescue:/#</span><span class="w"> </span><span class="nb">pwd</span>
<span class="go">/
</span><span class="gp">root@rescue:/#</span><span class="w">
</span></code></pre></div></div>

<p>Now you can change, whatever you need to, <code class="language-plaintext highlighter-rouge">umount</code> everything and reboot the system.</p>

<p>Don’t forget to close everything properly:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">root@rescue ~ #</span><span class="w"> </span>lvchange <span class="nt">-a</span> n vg_system
<span class="gp">root@rescue ~ #</span><span class="w"> </span>lvchange <span class="nt">-a</span> n vg_data
<span class="gp">root@rescue ~ #</span><span class="w"> </span>cryptsetup luksClose crypted_system
<span class="gp">root@rescue ~ #</span><span class="w"> </span>cryptsetup luksClose crypted_data
<span class="gp">root@rescue ~ #</span><span class="w">
</span></code></pre></div></div>

<h2 id="change-log">Change log</h2>

<h3 id="2025-01-23">2025-01-23</h3>

<ul>
  <li>Replacing dead individual <code class="language-plaintext highlighter-rouge">access.redhat.com</code> links with an overview of <code class="language-plaintext highlighter-rouge">LVM</code> (also from <code class="language-plaintext highlighter-rouge">access.redhat.com</code>)</li>
</ul>

<h3 id="2024-04-01">2024-04-01</h3>

<ul>
  <li>Replacing dead <code class="language-plaintext highlighter-rouge">tldp.org</code> links with <code class="language-plaintext highlighter-rouge">access.redhat.com</code> links, which describe the <code class="language-plaintext highlighter-rouge">LVM</code> way better</li>
  <li>Spelling fix</li>
</ul>

<h3 id="2024-03-11">2024-03-11</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">markdownlint</code> fixes</li>
  <li>Spelling fixes</li>
</ul>

<h3 id="2024-03-10">2024-03-10</h3>

<ul>
  <li>Unifying code blocks for better readability</li>
  <li>Fixing header levels</li>
</ul>

<h3 id="2024-02-02">2024-02-02</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">markdownlint</code> fixes</li>
</ul>]]></content><author><name>Steffen Scheib</name></author><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Automating Red Hat Satellite 6 - End to End</title><link href="https://blog.scheib.me/2023/07/09/automating-satellite.html" rel="alternate" type="text/html" title="Automating Red Hat Satellite 6 - End to End" /><published>2023-07-09T00:00:00+00:00</published><updated>2024-03-17T00:00:00+00:00</updated><id>https://blog.scheib.me/2023/07/09/automating-satellite</id><content type="html" xml:base="https://blog.scheib.me/2023/07/09/automating-satellite.html"><![CDATA[<!-- markdownlint-disable MD033 -->

<style>
table th:first-of-type {
    width: 7%;
}
table th:nth-of-type(2) {
    width: 94%;
}
</style>

<!-- markdownlint-enable MD033 -->

<h2 id="preface">Preface</h2>

<p>This blog post does not follow the style of my previous blog posts. It is more or less a step by step manual on how to use
<a href="https://github.com/sscheib/ansible_satellite">my repository on GitHub</a> to automate Red Hat Satellite using Ansible.</p>

<p>Further, a good understanding of Satellite and, more importantly, a good understanding of the concepts around Ansible is <strong>required</strong>.
Especially <a href="https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_variables.html#understanding-variable-precedence">variable precedence</a> should be well known.
Don’t get me wrong, it is still a step by step guide, but nevertheless, if you want to adjust this step by step guide to <em>your</em> infrastructure (which is likely that you’d
want to do that :grin:), you <strong>need</strong> to understand the concepts around Ansible.</p>

<p>All variables we define are either <a href="https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html#organizing-host-and-group-variables">host or group variables</a>.
This has the benefit that your inventory is not cluttered with variables, and additionally, this allows you to create different variables for each of your Satellite instances
(if you have multiple). I use group variables only for variables that are required by all my Satellite instances.</p>

<p>Please note, only a fraction of the available variables are used for each role. Please make sure to check out each section’s documentation of the respective role for a
complete list of available variables. Further, relevant documentation is also linked in each section that complements the respective steps that are done in Ansible if
you’d like to know more about the general (manual) procedure.</p>

<p>In below sections I make heavy use of <a href="https://docs.github.com/en/get-started/writing-on-github/editing-and-sharing-content-with-gists/creating-gists#about-gists">GitHub <code class="language-plaintext highlighter-rouge">gists</code></a>
to show <strong>my personal configuration</strong> of the respective roles. You <strong>need to modify every gist so that it works for your environment</strong>. For this purpose, I
documented (almost) every variable in the <code class="language-plaintext highlighter-rouge">gists</code> to ensure the usage is clear. Should something be not clear, please refer to the role documentation (that is linked in every
section), which provides additional context as well as possibly other variables to use that make sense to use in your environment.</p>

<p>I tested all of this with Satellite 6.12, 6.13 and 6.14. It <em>should</em> work the same for other Satellite versions, but I cannot guarantee it.</p>

<p>:information_source: Just as a general information: Variables that are prefixed with <code class="language-plaintext highlighter-rouge">satellite_</code> are ‘official’ role variables of the roles we are going to use. Variables
prefixed with <code class="language-plaintext highlighter-rouge">sat_</code> are custom variables (which usually get merged into a <code class="language-plaintext highlighter-rouge">satellite_</code> variable eventually).</p>

<p>:information_source: I am going to use <code class="language-plaintext highlighter-rouge">ansible-playbook</code> in this blog post and will thus install all required collections and roles as the current user. Of course, you can
also make use of <code class="language-plaintext highlighter-rouge">ansible-navigator</code> with an Execution Environment that contains the collections and roles which are defined in <code class="language-plaintext highlighter-rouge">collections/requirements.yml</code>. This blog
post won’t cover the procedure of how to do that, however.</p>

<p>:information_source: You need to be a Red Hat subscriber in order to follow this blog post. If you are not, you can use a
<a href="https://developers.redhat.com/articles/faqs-no-cost-red-hat-enterprise-linux">no-cost Red Hat Developer Subscription</a>, which includes the Ansible Automation Platform
subscription (required for the certified collections) and the Satellite Infrastructure subscription. Of course, you could also use the upstream projects
(e.g. <code class="language-plaintext highlighter-rouge">Foreman</code>/<code class="language-plaintext highlighter-rouge">Katello</code>) and upstream collections (e.g. <code class="language-plaintext highlighter-rouge">theforeman.foreman</code>) to follow along, but for that you need to adjust <em>every</em> playbook
(and not ‘just’ the GitHub <code class="language-plaintext highlighter-rouge">gists</code>) and it might not work at all, as I haven’t tested it.</p>

<h2 id="prerequisites">Prerequisites</h2>

<ol>
  <li>
    <p>You need a host that will run Ansible and carry out the automation.</p>

    <p>:information_source: This has been tested on:</p>

    <ul>
      <li>RHEL 8.7 and Ansible Core 2.14.6</li>
      <li>RHEL 8.8 and Ansible Core 2.15.4</li>
      <li>RHEL 8.9 and Ansible Core 2.15.4</li>
      <li>RHEL 9.2 and Ansible Core 2.14.2</li>
      <li>RHEL 9.3 and Ansible Core 2.14.2</li>
    </ul>

    <p>:warning: RHEL 7 is not going to work for this purpose, as only Ansible Engine 2.9 can (officially) be installed on it (which is too old for most - if not all -
 collections we are going to use).</p>
  </li>
  <li>
    <p>Login to the host you’ll be using to carry out the automation via SSH. Install <code class="language-plaintext highlighter-rouge">git</code>, check out my repository and change to the directory that has been created with
the <code class="language-plaintext highlighter-rouge">git clone</code> command:</p>

    <p><!-- markdownlint-disable MD014 --></p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span><span class="nb">sudo </span>dnf <span class="nb">install</span> <span class="nt">-y</span> git
 <span class="nv">$ </span>git clone https://github.com/sscheib/ansible_satellite.git
 <span class="nv">$ </span><span class="nb">cd </span>ansible_satellite
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
  <li>
    <p>Configure Ansible that it’ll be able to download
<a href="https://access.redhat.com/support/articles/ansible-automation-platform-certified-content">Red Hat’s Ansible Certified Content Collections</a> that are needed for the playbooks
to work from either your local Automation Hub or from <a href="https://console.redhat.com/ansible/automation-hub">Red Hat’s Automation Hub</a>. If you don’t know how to do either of
those things, please use<a href="https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/2.4/html-single/getting_started_with_automation_hub/index#proc-create-api-token">Red Hat’s documentation</a>
that explains how to connect to <a href="https://console.redhat.com/ansible/automation-hub">Red Hat’s Automation Hub</a>.
Place your Ansible configuration file either in the directory you checked out (<code class="language-plaintext highlighter-rouge">ansible_satellite</code>) as <code class="language-plaintext highlighter-rouge">ansible.cfg</code> or in your home directory with a prefixed dot: <code class="language-plaintext highlighter-rouge">~/.ansible.cfg</code>.</p>

    <p>Your Ansible configuration file will look similar to the example below:</p>

    <div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nn">[galaxy]</span>
 <span class="py">server_list</span> <span class="p">=</span> <span class="s">automation-hub,galaxy</span>

 <span class="nn">[galaxy_server.automation-hub]</span>
 <span class="py">url</span><span class="p">=</span><span class="s">https://console.redhat.com/api/automation-hub/content/REDACTED-synclist/</span>
 <span class="py">auth_url</span><span class="p">=</span><span class="s">https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token</span>
 <span class="py">token</span><span class="p">=</span><span class="s">REPLACE_WITH_YOUR_TOKEN</span>

 <span class="nn">[galaxy_server.galaxy]</span>
 <span class="py">url</span><span class="p">=</span><span class="s">https://galaxy.ansible.com</span>
</code></pre></div>    </div>
  </li>
  <li>Install the required collections:
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-galaxy collection <span class="nb">install</span> <span class="nt">-r</span> collections/requirements.yml
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
  <li>Install the required roles:
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-galaxy role <span class="nb">install</span> <span class="nt">-r</span> collections/requirements.yml
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
  <li>Create a Manifest for Satellite - we are going to import it at a <a href="#importing-a-manifest">later point</a>. If you don’t know how to do it, please
follow <a href="https://www.redhat.com/en/blog/how-create-and-use-red-hat-satellite-manifest">Red Hat’s blog</a> that explains very well how to create a Manifest.</li>
  <li>Put the <code class="language-plaintext highlighter-rouge">Manifest UUID</code> in <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/00a_secrets.yml</code>. As mentioned before, we are going to need it at a <a href="#importing-a-manifest">later point</a>.</li>
  <li>
    <p>Optional (but <strong>highly encouraged!</strong>): You can create a <a href="https://docs.ansible.com/ansible/latest/user_guide/vault.html#providing-vault-passwords">Vault password file</a> file to
pass it to <code class="language-plaintext highlighter-rouge">ansible-playbook</code> via <code class="language-plaintext highlighter-rouge">--vault-pass-file</code>. I named mine <code class="language-plaintext highlighter-rouge">.vault.pass</code> and added it to my <a href="https://git-scm.com/docs/gitignore"><code class="language-plaintext highlighter-rouge">.gitignore</code> file</a> to ensure it
is not accidentally pushed to the repository. As you are going to need the Vault for <em>every</em> playbook of my repository, it is handy to have a Vault password file - unless
you chose to not encrypt your secrets (<strong>highly discouraged!</strong>).</p>

    <p>:information_source: If you are not familiar with Ansible Vault, please
 <a href="https://docs.ansible.com/ansible/latest/vault_guide/vault_encrypting_content.html#encrypting-content-with-ansible-vault">read up on it</a> and don’t store your secrets in
 plain text in your variables files. It is really super easy to get started with Ansible Vault, I promise :slightly_smiling_face:!</p>
  </li>
</ol>

<h2 id="install-satellite-server">Install Satellite server</h2>

<p>The very first step is to install the RHEL 8 host that will be our Satellite eventually.</p>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation">Documentation</h3>
<!-- markdownlint-enable MD024 -->

<ul>
  <li><a href="https://github.com/sscheib/ansible-role-rhel_iso_kickstart">Role <code class="language-plaintext highlighter-rouge">rhel_iso_kickstart</code></a></li>
  <li><a href="https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/8/html/automatically_installing_rhel/kickstart-script-file-format-reference_rhel-installer">Kickstart commands and options reference for RHEL 8</a></li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks">Roles, variables files and playbooks</h3>
<!-- markdownlint-enable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">rhel_iso_kickstart</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/00_kickstart.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">00_create_kickstart.yml</code></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-disable MD024 -->
<h3 id="procedure">Procedure</h3>
<!-- markdownlint-enable MD024 -->

<ol>
  <li>Adjust the included Kickstart (<code class="language-plaintext highlighter-rouge">files/satellite.ks</code>) to your liking.</li>
  <li>
    <p>Adjust the variables for the role <a href="https://github.com/sscheib/ansible-role-rhel_iso_kickstart"><code class="language-plaintext highlighter-rouge">rhel_iso_kickstart</code></a></p>

    <p>:information_source: In my case, I am going to run the role <a href="https://github.com/sscheib/ansible-role-rhel_iso_kickstart"><code class="language-plaintext highlighter-rouge">rhel_iso_kickstart</code></a> on <code class="language-plaintext highlighter-rouge">localhost</code>
 (as I want to have the ISO downloaded and built on my machine), so the <code class="language-plaintext highlighter-rouge">host_vars</code> have to be placed in the directory <code class="language-plaintext highlighter-rouge">host_vars/localhost/</code>. I have chosen to place
 them in the file <code class="language-plaintext highlighter-rouge">00_kickstart.yml</code> inside that directory.</p>

    <p>:information_source: Make sure to read the <a href="https://github.com/sscheib/ansible-role-rhel_iso_kickstart"><code class="language-plaintext highlighter-rouge">README.md</code> of my role <code class="language-plaintext highlighter-rouge">rhel_iso_kickstart</code></a> to fully understand
 all variables.</p>
  </li>
  <li>Run the playbook that will download the specified RHEL ISO and build a custom RHEL ISO containing the specified Kickstart file:
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook 00_create_kickstart.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-disable MD024 --></p>
  </li>
  <li>Copy the resulting ISO file to your hypervisor and mount it to your virtual machine that should become the Satellite.</li>
  <li>Start the virtual machine and wait for the installation to finish.</li>
  <li>
    <p>Once the installation finished, shutdown the virtual machine and unmount the ISO.</p>

    <p>:information_source: If you used the provided Kickstart, the virtual machine will shut down after the Kickstart finished.</p>
  </li>
</ol>

<h2 id="prepare-satellite-for-ansible-access">Prepare Satellite for Ansible access</h2>

<p>Now that we have successfully installed our RHEL 8 system, we need to ensure that Ansible can access the system and <strong>elevate its privileges</strong>.</p>

<!-- markdownlint-disable MD024 -->
<h3 id="procedure-1">Procedure</h3>
<!-- markdownlint-enable MD024 -->

<ol>
  <li>
    <p>Login via SSH to the new virtual machine using <code class="language-plaintext highlighter-rouge">root</code> as username and the root password you defined in <code class="language-plaintext highlighter-rouge">00_kickstart.yml</code></p>

    <p>:information_source: This step assumes that you have not already created a local user (other than <code class="language-plaintext highlighter-rouge">root</code>, of course) on the Satellite server. If you already created a
 local user as part of the Kickstart (or other means), please ensure that the user has privileged access; You can skip step <strong>2</strong> and <strong>3</strong>.</p>
  </li>
  <li>Create a new user for Ansible, e.g. <code class="language-plaintext highlighter-rouge">ansible-provisioning</code>.</li>
  <li>Either set a password for <code class="language-plaintext highlighter-rouge">ansible-provisioning</code> or deploy your SSH key to the created user.</li>
  <li>Ensure you add the user to the group <code class="language-plaintext highlighter-rouge">%wheel</code> so that you can elevate the privileges of the user.</li>
  <li>
    <p>Add the virtual machine host to the inventory file. Below you’ll find an example:</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span><span class="nb">cat </span>inventory
 satellite.office.int.scheib.me <span class="nv">ansible_user</span><span class="o">=</span>ansible-provisioning <span class="nv">ansible_port</span><span class="o">=</span>22
</code></pre></div>    </div>
  </li>
  <li>
    <p>Ensure that your access to the virtual machine is working properly:</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible <span class="nt">--become</span> <span class="nt">-m</span> ping <span class="nt">-i</span> inventory all
 satellite.office.int.scheib.me | SUCCESS <span class="o">=&gt;</span> <span class="o">{</span>
     <span class="s2">"ansible_facts"</span>: <span class="o">{</span>
         <span class="s2">"discovered_interpreter_python"</span>: <span class="s2">"/usr/libexec/platform-python"</span>
     <span class="o">}</span>,
     <span class="s2">"changed"</span>: <span class="nb">false</span>,
     <span class="s2">"ping"</span>: <span class="s2">"pong"</span>
 <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="registering-the-system-to-the-red-hat-customer-portal-and-installing-red-hat-satellite">Registering the system to the Red Hat Customer Portal and installing Red Hat Satellite</h2>

<p>Now it’s time to register our RHEL system to the Red Hat Customer Portal. Please ensure that the host ends up with a Satellite Infrastructure subscription (or equivalent)
as, otherwise, the Red Hat Satellite repositories cannot be found.</p>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation-1">Documentation</h3>
<!-- markdownlint-enable MD024 -->

<ul>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/rhel_system_roles/docs/README_rhc/">Role <code class="language-plaintext highlighter-rouge">redhat.rhel_system_roles.rhc</code></a></li>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite_operations/content/role/installer/">Role <code class="language-plaintext highlighter-rouge">redhat.satellite_operations.installer</code></a></li>
  <li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/assembly_registering-the-system-and-managing-subscriptions_configuring-basic-system-settings">Registering a RHEL 8 system and managing subscriptions</a></li>
  <li><a href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.14/html/installing_satellite_server_in_a_connected_network_environment/installing_server_connected_satellite">Red Hat Satellite 6.14 Installation documentation</a></li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks-1">Roles, variables files and playbooks</h3>
<!-- markdownlint-enable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation:1" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">redhat.rhel_system_roles.rhc</code></td>
    </tr>
    <tr>
      <td style="text-align: left">2</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">redhat.satellite_operations.installer</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/00b_register_satellite.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">2</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/01a_satellite_installer_certificates.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/01b_satellite_firewall_rules.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/01c_satellite_installer_configuration.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">01_register_satellite.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">2</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">02_satellite_installer.yml</code></td>
    </tr>
  </tbody>
</table>

<p>:information_source: The variable file where we put our secrets in (<code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/00a_secrets.yml</code>) is used in almost all roles and playbooks, and thus it isn’t
added to the table above as it would need to be included in all further tables.</p>

<!-- markdownlint-disable MD024 -->
<h3 id="procedure-2">Procedure</h3>
<!-- markdownlint-enable MD024 -->

<ol>
  <li>
    <p>Define your secrets in <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/00a_secrets.yml</code>, please see below for an example.</p>

    <p>:information_source: Not all variables are needed right away, but it makes sense to define all of them at once. Please read the comments in the GitHub gist below.</p>

    <script src="https://gist.github.com/4fbc66d25da509522e16791e497a27a2.js"> </script>
  </li>
  <li>
    <p>Define the variables for the <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/automating_system_administration_by_using_rhel_system_roles/using-the-rhc-system-role-to-register-the-system_automating-system-administration-by-using-rhel-system-roles">RHEL system role <code class="language-plaintext highlighter-rouge">redhat.rhel_system_roles.rhc</code></a>,
please find below an example of my variables file (<code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/00b_register_satellite.yml</code>):
 <script src="https://gist.github.com/14d99b2931ce8e1bed1f6e9ac717326e.js"> </script></p>

    <p>:information_source: If you want to install a different Satellite version than 6.14, you need to adjust the variable <code class="language-plaintext highlighter-rouge">rhc_repositories</code> to enable the proper
 repositories for the desired Satellite version.</p>
  </li>
  <li>Run the playbook that registers your Satellite system to the Red Hat Content Delivery Network (<code class="language-plaintext highlighter-rouge">RHCDN</code>):
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 01_register_satellite.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
  <li>Next, we’ll define the variables for the
<a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite_operations/content/role/installer/">Satellite Installer role <code class="language-plaintext highlighter-rouge">redhat.satellite_operations.installer</code></a>.
I have split the variables in three files:
    <ol>
      <li>
        <p><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/01a_satellite_installer_certificates.yml</code>: Contains variables with regards to certificates
 <script src="https://gist.github.com/7bbba923af596280573aa987180837fd.js"> </script></p>

        <p>:warning: When generating certificates for your Satellite, remember to set the correct <code class="language-plaintext highlighter-rouge">keyUsage</code> and <code class="language-plaintext highlighter-rouge">extendedKeyUsage</code><sup id="fnref:key_usage" role="doc-noteref"><a href="#fn:key_usage" class="footnote" rel="footnote">2</a></sup>.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/01b_satellite_firewall_rules.yml</code>: Contains the ports to open on the Satellite
 <script src="https://gist.github.com/0b029863ee4e9953ab88978608bae777.js"> </script></p>

        <p>:warning: Above firewall rules are specific to <em>my</em> use case. You need to adapt these based on the Satellite documentation and your used features (such as <code class="language-plaintext highlighter-rouge">TFTP</code>,
 <code class="language-plaintext highlighter-rouge">DHCP</code>, <code class="language-plaintext highlighter-rouge">DNS</code>, etc.).</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/01c_satellite_installer_configuration.yml</code>: Contains all other variables for the role <code class="language-plaintext highlighter-rouge">redhat.satellite_operations.installer</code>
 <script src="https://gist.github.com/c99c3008a954a4ddb81451bad99b599f.js"> </script></p>

        <p>:warning: If you are not planning to use certificates, please remove the certificate installer options from above example (<code class="language-plaintext highlighter-rouge">--certs-server-cert</code>,
 <code class="language-plaintext highlighter-rouge">--certs-server-key</code>, <code class="language-plaintext highlighter-rouge">--certs-server-ca-cert</code>). Don’t worry, the Satellite installer will create self-signed certificates. The certificate options
 are meant for implementing custom SSL certificates that have been signed by your internal certificate authority.</p>
      </li>
    </ol>
  </li>
  <li>
    <p>Run the playbook to upgrade your system to the latest version (required) and install Satellite:</p>

    <p>:warning: This will reboot your Satellite to ensure the latest kernel is applied (as per the Satellite documentation).
 <!-- markdownlint-disable MD014 --></p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 02_satellite_installer.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
  <li>Verify that you can login to your Satellite instance once the playbook finished</li>
  <li>Shutdown the virtual machine and take a snapshot so you can roll back to this point when you encounter any issues later on</li>
</ol>

<h2 id="define-general-variables">Define general variables</h2>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation-2">Documentation</h3>
<!-- markdownlint-enable MD024 -->

<ul>
  <li>
    <p><a href="https://github.com/theforeman/foreman-ansible-modules/blob/develop/README.md#common-role-variables">Satellite Collection Common Role Variables</a></p>

    <p>:information_source: The upstream common role variables are <em>not</em> used downstream in the Satellite collection. All <code class="language-plaintext highlighter-rouge">foreman_</code> variables can be substituted with
<code class="language-plaintext highlighter-rouge">satellite_</code>, e.g. <code class="language-plaintext highlighter-rouge">foreman_url</code> -&gt; <code class="language-plaintext highlighter-rouge">satellite_url</code></p>
  </li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks-2">Roles, variables files and playbooks</h3>
<!-- markdownlint-enable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation:2" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left">Used in almost all roles</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/02_general.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left">Used in almost all playbooks</td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-disable MD024 -->
<h3 id="procedure-3">Procedure</h3>
<!-- markdownlint-enable MD024 -->

<ol>
  <li>
    <p>With this, we define variables that are reused multiple times. To avoid duplication, it is good to define them once. Please see below an example of my definition:
 <script src="https://gist.github.com/1bb3a400efe20cb7a07a7b64730ad1d2.js"> </script></p>

    <p>:warning: If you know that your Linux host is slow in synchronizing the Repositories or publishing and promoting (Composite) Content Views (due to e.g. slow storage),
 consider significantly raising the value of <code class="language-plaintext highlighter-rouge">sat_repository_sync_retries</code>, <code class="language-plaintext highlighter-rouge">sat_content_view_publish_retries</code> and <code class="language-plaintext highlighter-rouge">sat_composite_content_view_publish_retries</code>, as
 otherwise the respective tasks (and thus the playbook) will fail. The status is checked every <code class="language-plaintext highlighter-rouge">3</code> seconds, so the time is (roughly) calculated as <code class="language-plaintext highlighter-rouge">3 * number_of_retries</code>.
 In this case it would be <code class="language-plaintext highlighter-rouge">3 * 3600 = 10800 seconds = 180 minutes = 3 hours</code>.</p>
  </li>
</ol>

<h2 id="optional-configure-satellites-cloud-connector"><em>Optional</em>: Configure Satellite’s Cloud Connector</h2>

<p>:information_source: This step is entirely optional, as it merely configures Satellite’s Cloud Connector.</p>

<p>:warning: Please make sure that you really <strong>want</strong> to have the Cloud Connector enabled. The Cloud Connector allows Red Hat Insights to <strong>run remediation on your Satellite</strong>
from the <a href="https://console.redhat.com">Red Hat Hybrid Cloud Console</a>.</p>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation-3">Documentation</h3>
<!-- markdownlint-enable MD024 -->

<ul>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite_operations/content/role/cloud_connector/">Role <code class="language-plaintext highlighter-rouge">redhat.satellite_operations.cloud_connector</code></a></li>
  <li><a href="https://access.redhat.com/documentation/en-us/red_hat_insights/2023/html-single/red_hat_insights_remediations_guide/index">Red Hat Insights Remediations Guide</a></li>
  <li><a href="https://access.redhat.com/documentation/en-us/red_hat_insights/2023/html-single/red_hat_insights_remediations_guide/index#configuring-satellite-cloud-connector_host-communication-with-insights">Enabling Cloud Connector on hosts managed by Satellite</a></li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks-3">Roles, variables files and playbooks</h3>
<!-- markdownlint-enable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation:3" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">redhat.satellite_operations.cloud_connector</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/03_cloud_connector.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">03_satellite_cloud_connector.yml</code></td>
    </tr>
  </tbody>
</table>

<ol>
  <li>Define the variables for the role <code class="language-plaintext highlighter-rouge">redhat.satellite_operations.cloud_connector</code>. Please see an example below:
 <script src="https://gist.github.com/64a79193346520cb437930b4497c7f7d.js"> </script></li>
  <li>Run the playbook to configure Satellite’s Cloud Connector:
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 03_satellite_cloud_connector.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
</ol>

<h2 id="importing-a-manifest">Importing a Manifest</h2>

<p>Next up, we are going to import a Manifest into our Satellite. I have configured the role <code class="language-plaintext highlighter-rouge">redhat.satellite.manifest</code> to first download a Manifest from the Red Hat Customer
Portal and then upload it to my Satellite. If you are doing the same, please ensure that you set the correct <code class="language-plaintext highlighter-rouge">Manifest UUID</code> in <code class="language-plaintext highlighter-rouge">satellite_manifest_uuid</code>, as well as the
<code class="language-plaintext highlighter-rouge">satellite_rhsm_username</code> and <code class="language-plaintext highlighter-rouge">satellite_rhsm_password</code>. (as described in
<a href="#registering-the-system-to-the-red-hat-customer-portal-and-installing-red-hat-satellite">Registering the system to the Red Hat Customer Portal and installing Red Hat Satellite</a>).</p>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation-4">Documentation</h3>
<!-- markdownlint-enable MD024 -->

<ul>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite/content/role/manifest/">Role <code class="language-plaintext highlighter-rouge">redhat.satellite.manifest</code></a></li>
  <li><a href="https://www.redhat.com/en/blog/how-create-and-use-red-hat-satellite-manifest">How to create and use a Red Hat Satellite manifest</a></li>
  <li><a href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.14/html/managing_content/managing_red_hat_subscriptions_content-management#Importing_a_Red_Hat_Subscription_Manifest_into_Server_content-management">Importing a Red Hat Subscription Manifest into Satellite Server</a></li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks-4">Roles, variables files and playbooks</h3>
<!-- markdownlint-enable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation:4" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">redhat.satellite.manifest</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/04_manifest.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">04_satellite_manifest.yml</code></td>
    </tr>
  </tbody>
</table>

<ol>
  <li>Adjust the variables for this step in <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/04_manifest.yml</code>, please see below for an example:
 <script src="https://gist.github.com/5e8b980306c43281971f6f8976c9a351.js"> </script></li>
  <li>Run the playbook to download the manifest and import it to your Satellite:
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 04_satellite_manifest.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
</ol>

<h2 id="creating-content-credentials-for-custom-products">Creating Content Credentials for custom Products</h2>

<p>Before creating custom Products and repositories, we need to create the custom Content Credentials. This is required, as we are going to use those Content Credentials to
ensure that the content we retrieve is retrieved without any modification (through a malicious actor for instance). This is only required for 3rd-party repositories, as
Red Hat repositories are validated by default.</p>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation-5">Documentation</h3>
<!-- markdownlint-enable MD024 -->

<ul>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite/content/role/content_credentials/">Role <code class="language-plaintext highlighter-rouge">redhat.satellite.content_credentials</code></a></li>
  <li><a href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.14/html/managing_content/importing_content_content-management#Importing_Custom_SSL_Certificates_content-management">Importing Custom SSL Certificates</a></li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks-5">Roles, variables files and playbooks</h3>
<!-- markdownlint-enable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation:5" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">redhat.satellite.content_credentials</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/05_content_credentials.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">05_satellite_content_credentials.yml</code></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-disable MD024 -->
<h3 id="procedure-4">Procedure</h3>
<!-- markdownlint-enable MD024 -->

<ol>
  <li>
    <p>Define the required Content Credentials for any custom Product in <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/05_content_credentials.yml</code>. Please see an example of my Content Credentials below:
 <script src="https://gist.github.com/b573c065923442511509c519938b6f89.js"> </script></p>
  </li>
  <li>
    <p>Run the playbook to create the Content Credentials:
 <!-- markdownlint-disable MD014 --></p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 05_satellite_content_credentials.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
</ol>

<h2 id="enabling-red-hat-repositories-creating-custom-products-and-repositories-and-synchronize-the-repositories">Enabling Red Hat Repositories, creating custom Products and Repositories and synchronize the Repositories</h2>

<p>Now that we have created the Content Credentials for our custom Products, we can start creating the custom Products and their containing Repositories. Further, we are going
to enable the official Red Hat Repositories that we require. Conveniently, this can all be done by one role, so we are doing it in one go.</p>

<p>Since we do a couple of things with one role, I decided to split up my variables into Custom Products (<code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/06a_products.yml</code>) and Red Hat
Products (<code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/06a_products.yml</code>). Lastly, we combine the two definitions into one variable which is stored as <code class="language-plaintext highlighter-rouge">satellite_repositories</code>: That is the
variable the role <code class="language-plaintext highlighter-rouge">redhat.satellite.repositories</code> requires.</p>

<p>:information_source: Unfortunately, this step requires an already installed Satellite. I am not aware of any other method of finding out the Product and Repository names.
If you know another way, kindly let me know in the comments below.</p>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation-6">Documentation</h3>
<!-- markdownlint-enable MD024 -->

<ul>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite/content/role/repositories/">Role <code class="language-plaintext highlighter-rouge">redhat.satellite.repositories</code></a></li>
  <li><a href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.14/html/managing_content/introduction_to_content_management_content-management">Introduction to Content Management</a></li>
  <li><a href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.14/html/managing_content/importing_content_content-management#Download_Policies_Overview_content-management">Download Policies Overview</a></li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks-6">Roles, variables files and playbooks</h3>
<!-- markdownlint-enable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation:6" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">redhat.satellite.repositories</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/06a_products.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/06b_custom_products.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/06c_combined_products.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">06_satellite_products_and_repositories.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">07_satellite_sync_repositories.yml</code></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-disable MD024 -->
<h3 id="procedure-5">Procedure</h3>
<!-- markdownlint-enable MD024 -->

<ol>
  <li>
    <p>Finding out Red Hat Repository and Product names</p>

    <p>This step requires an already installed Satellite (to my knowledge), because you need to find out two things:</p>
    <ul>
      <li>The Product name a Repository is tied to</li>
      <li>The Repository name itself</li>
    </ul>

    <p>The Repository and Product names can be found out via the following procedure:</p>
    <ol>
      <li><code class="language-plaintext highlighter-rouge">Satellite WebUI</code> -&gt; <code class="language-plaintext highlighter-rouge">Content</code> -&gt; <code class="language-plaintext highlighter-rouge">Red Hat Repositories</code></li>
      <li>Click on <code class="language-plaintext highlighter-rouge">Filter by Product</code> and select a Product, e.g. <code class="language-plaintext highlighter-rouge">Red Hat Enterprise Linux for x86_64</code> (this is the <strong>Product Name</strong> to use)</li>
      <li>Select the appropriate “Type” (right hand side to the <code class="language-plaintext highlighter-rouge">Filter by Product</code> drop-down), e.g. <code class="language-plaintext highlighter-rouge">RPM</code> for <code class="language-plaintext highlighter-rouge">RPM</code> repositories, <code class="language-plaintext highlighter-rouge">Kickstart</code> for Kickstart repositories</li>
      <li>Either scroll through the <code class="language-plaintext highlighter-rouge">Available Repositories</code> or narrow the list further down using the search bar at the top</li>
      <li>The search lists contains the <strong>Repository Name</strong> to use</li>
      <li>Each Repository has a arrow an the left hand side. When clicking on it, it reveals two things:
        <ul>
          <li>The architecture (e.g. <code class="language-plaintext highlighter-rouge">x86_64</code>)</li>
          <li>The release (which is optional and thus not available for every repository), (e.g. <code class="language-plaintext highlighter-rouge">8</code>, <code class="language-plaintext highlighter-rouge">8.7</code>, etc.)</li>
        </ul>
      </li>
    </ol>
  </li>
  <li>
    <p>Define the Red Hat Repositories and Products in <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/06a_products.yml</code>
 <script src="https://gist.github.com/1ab1bbd6cc74c1f1fb47ea16c5e054ef.js"> </script></p>

    <p>:warning: The Kickstart Repositories are set to the <code class="language-plaintext highlighter-rouge">download_policy</code> <code class="language-plaintext highlighter-rouge">immediate</code> as having them set to <code class="language-plaintext highlighter-rouge">on_demand</code> is known to cause issues during provisioning.</p>

    <p>:warning: I recommend setting the <code class="language-plaintext highlighter-rouge">download_policy</code> to <code class="language-plaintext highlighter-rouge">immediate</code> on custom upstream repositories, as usually the upstream repositories do <strong>not</strong> keep <strong>all
 versions</strong> of an <code class="language-plaintext highlighter-rouge">RPM</code>, which will cause issues if a client tries to install an older version. Red Hat keeps all <code class="language-plaintext highlighter-rouge">RPMs</code> in their respective repositories, that’s why it is
 not required to set them on <code class="language-plaintext highlighter-rouge">immediate</code>.</p>
  </li>
  <li>Define the custom Products and their containing Repositories in <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/06b_custom_products.yml</code>
 <script src="https://gist.github.com/f483a67504e10ef76189ea5a921dcecc.js"> </script></li>
  <li>The two definition will be merged in <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/06c_combined_products.yml</code>
 <script src="https://gist.github.com/ea886810cd22867a096eb2d3f96a48c5.js"> </script></li>
  <li>Run the playbook to enable and/or create the custom Products and Repositories
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 06_satellite_products_and_repositories.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
  <li>
    <p>Run the playbook to synchronize the Repositories (both custom and Red Hat)</p>

    <p>:information_source: This might take a while.</p>

    <p>:warning: If you’d like to follow along with the blog post, you <em>have</em> to run this step, as otherwise the Content Views <em>will</em> be <em>empty</em>!
 <!-- markdownlint-disable MD014 --></p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 07_satellite_sync_repositories.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
</ol>

<h2 id="create-sync-plans">Create Sync Plans</h2>

<p>To ensure our content is kept up to date, we are going to create Sync Plans in the next step.</p>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation-7">Documentation</h3>
<!-- markdownlint-enable MD024 -->

<ul>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite/content/role/sync_plans/">Role <code class="language-plaintext highlighter-rouge">redhat.satellite.sync_plans</code></a></li>
  <li><a href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.14/html/managing_content/importing_content_content-management#Creating_a_Sync_Plan_content-management">Creating a Sync Plan</a></li>
  <li><a href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.14/html/managing_content/importing_content_content-management#Assigning_a_Sync_Plan_to_a_Product_content-management">Assigning a Sync Plan to a Product</a></li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks-7">Roles, variables files and playbooks</h3>
<!-- markdownlint-enable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation:7" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">redhat.satellite.sync_plans</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/07_sync_plans.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">08_satellite_sync_plans.yml</code></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-disable MD024 -->
<h3 id="procedure-6">Procedure</h3>
<!-- markdownlint-enable MD024 -->

<ol>
  <li>
    <p>Define the Sync Plans in <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/07_sync_plans.yml</code>
 <script src="https://gist.github.com/00a3ab9f03266ba08e80cc756d43ecc0.js"> </script></p>

    <p>:information_source: I am reusing the definition of the Products we have done earlier to map all products to one Sync Plan.</p>
  </li>
  <li>
    <p>Run the playbook to create the Sync Plans:
 <!-- markdownlint-disable MD014 --></p>
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 08_satellite_sync_plans.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
</ol>

<h2 id="create-lifecycle-environments">Create Lifecycle Environments</h2>

<p>When it comes to Lifecycle Environments I have a <em>very</em> simple use case. I have two Lifecycle Environments and that’s it. Your use case might be much more complex, but
the example below should get you up to speed quickly.</p>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation-8">Documentation</h3>
<!-- markdownlint-enable MD024 -->

<ul>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite/content/role/lifecycle_environments/">Role <code class="language-plaintext highlighter-rouge">redhat.satellite.lifecycle_environments</code></a></li>
  <li><a href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.14/html/managing_content/managing_application_lifecycles_content-management">Managing Application Life Cycles</a></li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks-8">Roles, variables files and playbooks</h3>
<!-- markdownlint-enable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation:8" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">redhat.satellite.lifecycle_environments</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/08_lifecycle_environments.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">09_satellite_lifecycle_environments.yml</code></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-disable MD024 -->
<h3 id="procedure-7">Procedure</h3>
<!-- markdownlint-enable MD024 -->

<ol>
  <li>Define the Lifecycle Environment in <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/08_lifecycle_environments.yml</code>. Please see below for an example:
 <script src="https://gist.github.com/3dfd83aa5d7231d602b715316ce1f419.js"> </script></li>
  <li>Run the playbook to create the Lifecycle Environments:
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 09_satellite_lifecycle_environments.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
</ol>

<h2 id="create-domains">Create Domains</h2>

<p>This one is super easy for my use case as well. I have exactly <strong>one</strong> Domain I am using internally for my lab environment: <code class="language-plaintext highlighter-rouge">office.int.scheib.me</code>. Since this is
conveniently also the value of the initial Domain I have specified, I am just reusing it. Your use case might be much more complex; This example can easily be extended.</p>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation-9">Documentation</h3>
<!-- markdownlint-enable MD024 -->

<ul>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite/content/role/domains/">Role <code class="language-plaintext highlighter-rouge">redhat.satellite.domains</code></a></li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks-9">Roles, variables files and playbooks</h3>
<!-- markdownlint-enable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation:9" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">redhat.satellite.domains</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/09_domains.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">10_satellite_domains.yml</code></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-disable MD024 -->
<h3 id="procedure-8">Procedure</h3>
<!-- markdownlint-enable MD024 -->

<ol>
  <li>Define the Domains in <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/09_domains.yml</code>
 <script src="https://gist.github.com/6f33448c5ef7750f10c79d88cd301ed7.js"> </script></li>
  <li>Run the playbook to create the Domains:
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 10_satellite_domains.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
</ol>

<h2 id="create-subnets">Create Subnets</h2>

<p>When it comes to Subnets it’s the same as for the Domains: I have a super easy use case. One Subnet. That’s it :grin:</p>

<p>Again, your use case might be much, much more complex, but the example below should get you up to speed quickly.</p>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation-10">Documentation</h3>
<!-- markdownlint-enable MD024 -->

<ul>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite/content/role/subnets/">Role <code class="language-plaintext highlighter-rouge">redhat.satellite.subnets</code></a></li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks-10">Roles, variables files and playbooks</h3>
<!-- markdownlint-enable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation:10" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">redhat.satellite.subnets</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/10_subnets.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">11_satellite_subnets.yml</code></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-disable MD024 -->
<h3 id="procedure-9">Procedure</h3>
<!-- markdownlint-enable MD024 -->

<ol>
  <li>Define the Subnets in <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/10_subnets.yml</code>
 <script src="https://gist.github.com/85c7a7082456159c05b6e8850f5a54a9.js"> </script></li>
  <li>Run the playbook to create the Subnets:
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 11_satellite_subnets.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
</ol>

<h2 id="define-the-composite-content-views-and-publish-and-promote-them">Define the (Composite) Content Views and publish and promote them</h2>

<p>We are now going to automate one of the more complex things: Content Views and Composite Content Views. Since Composite Content Views will contain <code class="language-plaintext highlighter-rouge">components</code>
(which are Content View Versions), they are dependent on the Content Views being present at the time we are going to create the Composite Content Views. So, the order
really matters!</p>

<p>As the order matters, I am splitting again the Content Views in the <code class="language-plaintext highlighter-rouge">host_vars</code> in to several files:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/11a_content_views_custom_products.yml</code>: Contains Content Views with Custom Products we have created earlier</li>
  <li><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/11b_content_views.yml</code>: Contains Content Views which use official Red Hat Products</li>
  <li><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/11c_composite_content_views.yml</code>: Contains Composite Content Views (which depend on the creation of the earlier defined Content Views)</li>
  <li><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/11d_combined_content_views.yml</code>: Lastly, I merge the definitions of the aforementioned (Composite) Content Views into one variable, which is
used by the role <code class="language-plaintext highlighter-rouge">redhat.satellite.content_views</code>: <code class="language-plaintext highlighter-rouge">satellite_content_views</code></li>
</ol>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation-11">Documentation</h3>
<!-- markdownlint-enable MD024 -->

<ul>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite/content/role/content_views/">Role <code class="language-plaintext highlighter-rouge">redhat.satellite.content_views</code></a></li>
  <li><a href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.14/html/managing_content/managing_content_views_content-management">Managing Content Views</a></li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks-11">Roles, variables files and playbooks</h3>
<!-- markdownlint-enable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation:11" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">redhat.satellite.content_views</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/11a_content_views_custom_products.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/11b_content_views.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/11c_composite_content_views.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/11d_combined_content_views.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">12_satellite_content_views.yml</code></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-disable MD024 -->
<h3 id="procedure-10">Procedure</h3>
<!-- markdownlint-enable MD024 -->

<ol>
  <li>Define the Content Views with custom Products in <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/11a_content_views_custom_products.yml</code>
 <script src="https://gist.github.com/12fd843551041ed98632060d72b9dd60.js"> </script></li>
  <li>Define the Content Views with Red Hat Products in <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/11b_content_views.yml</code>
 <script src="https://gist.github.com/50c5c2fee3238b47e2cee256ad488078.js"> </script></li>
  <li>Define the Composite Content Views in <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/11c_composite_content_views.yml</code>
 <script src="https://gist.github.com/577f57b8b67b5accc6436ce21b69b62c.js"> </script></li>
  <li>The definitions of 1. to 3. will be merged in <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/11d_combined_content_views.yml</code>
 <script src="https://gist.github.com/8df9e83c3c21836afc83af093e34a3db.js"> </script></li>
  <li>Run the playbook to create the (Composite) Content Views:
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 12_satellite_content_views.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
  <li>Run the playbook to publish and promote the (Composite) Content Views
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 13_satellite_content_view_publish.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
</ol>

<h2 id="apply-satellite-settings-and-enable-template-synchronization">Apply Satellite settings and enable Template Synchronization</h2>

<p>We need to apply some settings in Satellite, as the Operating System definitions depend on Provision Templates that have to be imported prior to defining the Operating Systems.
The Host Groups and the Activation Keys (which we still need to create) rely on the definitions of the Operating System, thus we need to start with importing the Templates.</p>

<p>I make use of <a href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.14/html/managing_hosts/synchronizing_templates_repositories_managing-hosts">Satellite’s <code class="language-plaintext highlighter-rouge">TemplateSync</code> Plug-in</a>
which allows us to import Templates from a Source Code Management (<code class="language-plaintext highlighter-rouge">SCM</code>) tool (such as GitHub or Git Lab). <code class="language-plaintext highlighter-rouge">TemplateSync</code> will also assign the Templates to the correct Operating
System, Organization and Location, if the
<a href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.14/html/managing_hosts/synchronizing_templates_repositories_managing-hosts#Importing_Templates_managing-hosts">required metadata</a>
is present in the Template’s header.</p>

<p>Again, I have split my variables into several files to not have one very large confusing file. I named the files like the tabs in the
<code class="language-plaintext highlighter-rouge">Satellite Web UI</code> -&gt; <code class="language-plaintext highlighter-rouge">Administer</code> -&gt; <code class="language-plaintext highlighter-rouge">Settings</code>.</p>

<p>This chapter essentially covers two steps:</p>

<ol>
  <li>Set specific settings in the Satellite, especially the Template Sync settings. But since we are on it, I’ll define <em>all</em> settings right away to spare me some time.</li>
  <li>
    <p>Run the Template Sync to import the Templates of my <a href="https://github.com/sscheib/satellite_templates">Kickstart Repository on GitHub</a>. The playbook will
perform <a href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.14/html/managing_hosts/synchronizing_templates_repositories_managing-hosts#Enabling_the_TemplateSync_plugin_managing-hosts">the steps that are required to synchronize Templates</a>
from git. Please review them prior to running the playbook (<code class="language-plaintext highlighter-rouge">15_satellite_template_sync.yml</code>).</p>

    <p>:warning: You obviously <em>have</em> to either fork <a href="https://github.com/sscheib/satellite_templates">my Satellite template repository</a> or create your own GitHub repository
 with your Templates to be able to create a GitHub Token (which will be done in this chapter).</p>

    <p>:information_source: Unfortunately, there is no role to configure and run the Template Sync. This will be done by a custom playbook I have written and importing the
 Templates using the Satellite API. It is a playbook, as I didn’t see the need to create a role for such a basic task.</p>
  </li>
</ol>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation-12">Documentation</h3>
<!-- markdownlint-enable MD024 -->

<ul>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite/content/role/settings/">Role <code class="language-plaintext highlighter-rouge">redhat.satellite.settings</code></a></li>
  <li><a href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.14/html/managing_hosts/synchronizing_templates_repositories_managing-hosts">Synchronizing Template Repositories</a></li>
  <li><a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#fine-grained-personal-access-tokens">GitHub: Managing your personal access tokens</a></li>
  <li><a href="https://blog.scheib.me/2023/07/01/highly-customized-kickstart.html">Kickstarting Red Hat Enterprise Linux (RHEL) systems using a highly customized Kickstart with Red Hat Satellite 6</a></li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks-12">Roles, variables files and playbooks</h3>
<!-- markdownlint-enable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation:12" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<p>:information_source: <code class="language-plaintext highlighter-rouge">12a_settings_template_sync.yml</code> is added twice, as both playbooks make use of it.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">redhat.satellite.settings</code></td>
    </tr>
    <tr>
      <td style="text-align: left">2</td>
      <td style="text-align: left">N/A</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">12a_settings_template_sync.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">12b_settings_provisioning.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">12c_settings_remote_execution.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">12d_settings_rh_cloud.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">12e_settings_general.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">12f_settings_notifications.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">12g_merge_settings.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">2</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">12a_settings_template_sync.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">group_vars/all/github.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">14_satellite_settings.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">2</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">15_satellite_template_sync.yml</code></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-disable MD024 -->
<h3 id="procedure-11">Procedure</h3>
<!-- markdownlint-enable MD024 -->

<ol>
  <li>Define the Satellite settings in our variables files:
    <ol>
      <li><strong>Tab Template Sync</strong>: Variables file: <code class="language-plaintext highlighter-rouge">12a_settings_template_sync.yml</code>:
 <script src="https://gist.github.com/bf5474d6cd2b41fcf237a515bc92a829.js"> </script></li>
      <li><strong>Tab Provisioning</strong>: Variables file: <code class="language-plaintext highlighter-rouge">12b_settings_provisioning.yml</code>:
 <script src="https://gist.github.com/cb31468e436df3b8ce344d7c5376baf3.js"> </script></li>
      <li><strong>Tab Remote Execution:</strong> Variables file: <code class="language-plaintext highlighter-rouge">12c_settings_remote_execution.yml</code>:
 <script src="https://gist.github.com/fe1d73bc8c895a7517370f403f4346d1.js"> </script></li>
      <li><strong>Tab RH Cloud:</strong> Variables file: <code class="language-plaintext highlighter-rouge">12d_settings_rh_cloud.yml</code>:
 <script src="https://gist.github.com/4b56a2e775b67c6d442ffc719b4b96d1.js"> </script></li>
      <li><strong>Tab General</strong>: Variables file: <code class="language-plaintext highlighter-rouge">12e_settings_general.yml</code>
 <script src="https://gist.github.com/0b57b779e5a944a77fee3ab0ebaa02a7.js"> </script></li>
      <li><strong>Tab Notifications</strong>: Variables file: <code class="language-plaintext highlighter-rouge">12f_settings_notifications.yml</code>
 <script src="https://gist.github.com/7842c40f0833abb64465061daeafa332.js"> </script></li>
      <li>All settings are merged into one variable (<code class="language-plaintext highlighter-rouge">satellite_settings</code>) which is the variable that is used by the role <code class="language-plaintext highlighter-rouge">redhat.satellite.settings</code> in the file <code class="language-plaintext highlighter-rouge">12g_merge_settings.yml</code>:
 <script src="https://gist.github.com/c9fd9deb61e6d39749ec9ef02073bf26.js"> </script></li>
    </ol>
  </li>
  <li>Run the playbook to apply the settings:
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 14_satellite_settings.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
  <li>
    <p>Create a
<a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#fine-grained-personal-access-tokens">(Fine Grained) Personal Access Token</a>
in GitHub with the following permissions (at least):</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">Administration: Read and Write</code> (to deploy the SSH key from the Foreman user that performs the Template Synchronization)</li>
      <li><code class="language-plaintext highlighter-rouge">Contents: Read-only</code></li>
      <li><code class="language-plaintext highlighter-rouge">Metadata: Read-only</code></li>
    </ul>

    <p>:warning: Of course, you can deploy the SSH key manually and modify the playbook that configures the Template Sync (<code class="language-plaintext highlighter-rouge">15_satellite_template_sync.yml</code>) to not deploy the
 SSH key to GitHub if you are uncomfortable with creating a GitHub Access Token that has the <em>Administration</em> option set</p>
  </li>
  <li>Define the GitHub settings for the Template Sync in <code class="language-plaintext highlighter-rouge">group_vars/all/github.yml</code>
 <script src="https://gist.github.com/21475840ab5b6a90b263a87d9ee6bf70.js"> </script></li>
  <li>Run the playbook to configure the Template Sync and synchronize the Templates:
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 15_satellite_template_sync.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
</ol>

<h2 id="create-operating-systems">Create Operating Systems</h2>

<p>Since the Templates are now imported, we can start creating the Operating Systems and assign the imported Templates to them.</p>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation-13">Documentation</h3>
<!-- markdownlint-disable MD024 -->

<ul>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite/content/role/operatingsystems/">Role <code class="language-plaintext highlighter-rouge">redhat.satellite.operatingsystems</code></a></li>
  <li><a href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.14/html/provisioning_hosts/configuring_provisioning_resources_provisioning#creating-operating-systems_provisioning">Creating Operating Systems</a></li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks-13">Roles, variables files and playbooks</h3>
<!-- markdownlint-disable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation:13" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">redhat.satellite.operatingsystems</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/13_operating_systems.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">16_satellite_operating_systems.yml</code></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-disable MD024 -->
<h3 id="procedure-12">Procedure</h3>
<!-- markdownlint-disable MD024 -->

<ol>
  <li>Define the Operating Systems in <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/13_operating_systems.yml</code>:
 <script src="https://gist.github.com/031b18a1b51d901f088e88d8f779dc26.js"> </script></li>
  <li>Run the playbook to create and configure the Operating Systems:
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 16_satellite_operating_systems.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
</ol>

<h2 id="create-activation-keys">Create Activation Keys</h2>

<p>Creating Activation Keys is now possible, as we can refer to the Operating Systems that we created in the prior chapter.</p>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation-14">Documentation</h3>
<!-- markdownlint-enable MD024 -->

<ul>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite/content/role/activation_keys/">Role <code class="language-plaintext highlighter-rouge">redhat.satellite.activation_keys</code></a></li>
  <li><a href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.14/html/managing_content/managing_activation_keys_content-management">Managing Activation Keys</a></li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks-14">Roles, variables files and playbooks</h3>
<!-- markdownlint-enable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation:14" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">redhat.satellite.activation_keys</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/14_activation_keys.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">17_satellite_activation_keys.yml</code></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-disable MD024 -->
<h3 id="procedure-13">Procedure</h3>
<!-- markdownlint-enable MD024 -->

<ol>
  <li>Define the Activation Keys in <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/14_activation_keys.yml</code>
 <script src="https://gist.github.com/585614ff9d774fb064ce6b586f48efc8.js"> </script></li>
  <li>Run the playbook to create the Activation Keys:
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 17_satellite_activation_keys.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
</ol>

<h2 id="create-host-groups">Create Host Groups</h2>

<p>Almost done! :sunglasses:</p>

<p>As our second to last step, we are going to create the Host Groups. Since I have
applied <a href="https://blog.scheib.me/2023/05/30/redhat-satellite-concept.html#host-groups-hg">my Satellite 6 concept for Host Groups</a>, I have split the Host Groups into
multiple files.</p>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation-15">Documentation</h3>
<!-- markdownlint-enable MD024 -->

<ul>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite/content/role/hostgroups/">Role <code class="language-plaintext highlighter-rouge">redhat.satellite.hostgroups</code></a></li>
  <li><a href="https://access.redhat.com/documentation/en-us/red_hat_satellite/6.14/html/managing_hosts/administering_hosts_managing-hosts#Creating_a_Host_Group_managing-hosts">Creating a Host Group</a></li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks-15">Roles, variables files and playbooks</h3>
<!-- markdownlint-enable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation:15" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">redhat.satellite.hostgroups</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/15a_host_groups_base.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/15b_host_groups_services.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/15c_host_groups_lifecycle_environments.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/15d_host_groups_merged.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">18_satellite_host_groups.yml</code></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-disable MD024 -->
<h3 id="procedure-14">Procedure</h3>
<!-- markdownlint-enable MD024 -->

<ol>
  <li>Define the Host Groups
    <ol>
      <li><strong>Base</strong> and <strong>Operating System level Host Groups</strong>: <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/15a_host_groups_base.yml</code>
 <script src="https://gist.github.com/c0ca37c45ec9ca780b2f7eff17fef984.js"> </script></li>
      <li><strong>Service level Host Groups</strong>: <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/15b_host_groups_services.yml</code>
 <script src="https://gist.github.com/d06b236f5f5ff5dc15abbe54d6174ec1.js"> </script></li>
      <li><strong>Lifecycle Environment level Host Groups</strong>: <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/15c_host_groups_lifecycle_environments.yml</code>
 <script src="https://gist.github.com/46776747718e35681b94681f68bfdfe9.js"> </script></li>
      <li>Finally, merge all Host Groups into the required variable <code class="language-plaintext highlighter-rouge">satellite_hostgroups</code> for the role <code class="language-plaintext highlighter-rouge">redhat.satellite.hostgroups</code>; That is done in the
file <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/15d_host_groups_merged.yml</code>
 <script src="https://gist.github.com/9dd2cd08399d49dad14a3637de88f935.js"> </script></li>
    </ol>
  </li>
  <li>Run the playbook to create the Host Groups:
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 18_satellite_host_groups.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
</ol>

<h2 id="create-global-parameters">Create Global Parameters</h2>

<p>Now on the the Global Parameters. I will define some Global Parameters that are specific to my use case, which
<a href="https://github.com/sscheib/satellite_templates">my Provisioning Templates</a> make use of as well as override some default Parameters. My parameters are denoted with a
prefixed <code class="language-plaintext highlighter-rouge">p-</code>. All Parameters which do not have that prefix are Parameters that are present by default.</p>

<p>Once again, I split up my variables into separate files to not have a big clunky file that is unmaintainable. :grin:</p>

<p>:information_source: Unfortunately, there is no role available that creates Global Parameters, but there is a module available which we can use:
<code class="language-plaintext highlighter-rouge">redhat.satellite.global_parameter</code>.</p>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation-16">Documentation</h3>
<!-- markdownlint-enable MD024 -->

<ul>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite/content/module/global_parameter/">Module <code class="language-plaintext highlighter-rouge">redhat.satellite.global_parameter</code></a></li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks-16">Roles, variables files and playbooks</h3>
<!-- markdownlint-enable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation:16" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left">N/A</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/16a_global_parameters_ansible_provisioning.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/16b_global_parameters_remote_execution.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/16c_global_parameters_general.yml</code></td>
    </tr>
    <tr>
      <td style="text-align: left">^^</td>
      <td style="text-align: left">^^ <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/16d_merge_global_parameters.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">19_satellite_global_parameters.yml</code></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-disable MD024 -->
<h3 id="procedure-15">Procedure</h3>
<!-- markdownlint-enable MD024 -->

<ol>
  <li>Define the Global Parameters
    <ol>
      <li>Global Parameters for Ansible post provisioning: <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/16a_global_parameters_ansible_provisioning.yml</code>
 <script src="https://gist.github.com/ccacbc6d834959ab0a18898af41c3546.js"> </script></li>
      <li>Global Parameters for Remote Execution: <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/16b_global_parameters_remote_execution.yml</code>
 <script src="https://gist.github.com/9a54f56b9a66f99473d49fe61d16e322.js"> </script></li>
      <li>General Global Parameters: <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/16c_global_parameters_general.yml</code>
 <script src="https://gist.github.com/581f59a607c385a52e7750f93261a379.js"> </script></li>
      <li>Merge all Global Parameters: <code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/16d_merge_global_parameters.yml</code>
 <script src="https://gist.github.com/594c9981cfde05e3db15e24bd3cb28fc.js"> </script></li>
    </ol>
  </li>
  <li>Run the playbook to create the Global Parameters:
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 19_satellite_global_parameters.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-disable MD014 --></p>
  </li>
</ol>

<h2 id="optional-enable-and-import-openscap-content"><em>Optional:</em> Enable and import OpenSCAP content</h2>

<p>If you are looking to ensure compliance on your hosts using <a href="https://www.open-scap.org/">OpenSCAP</a>, this chapter will be for you. Here is the thing:
Satellite comes already preloaded with some OpenSCAP content. I have written a playbook that will accommodate the two scenarios. Whether you are looking to
only enable the default OpenSCAP content or if you want to import custom OpenSCAP content, you can use this playbook.</p>

<p>Why writing a custom playbook and not make use of the module
<a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite/content/module/scap_content/"><code class="language-plaintext highlighter-rouge">satellite.scap_content</code></a>? First of all,
I haven’t been able to make the module work with <code class="language-plaintext highlighter-rouge">validate_certs: true</code>. I have created a <a href="https://github.com/theforeman/foreman-ansible-modules/issues/1611">GitHub issue</a>
that hasn’t been resolved yet (due to the lack of interaction on my end). Secondly, I simply haven’t come around to build a role of it. I probably will eventually
do - but then again it makes no sense, as there is already a module that’s supposed to work, which would make the role practically obsolete.</p>

<p>Nevertheless, for the time being you can use the playbook :sunglasses:</p>

<!-- markdownlint-disable MD024 -->
<h3 id="documentation-17">Documentation</h3>
<!-- markdownlint-enable MD024 -->

<ul>
  <li><a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite/content/module/scap_content/">Module <code class="language-plaintext highlighter-rouge">satellite.scap_content</code></a></li>
  <li><a href="https://www.open-scap.org/">OpenSCAP</a></li>
</ul>

<!-- markdownlint-disable MD024 -->
<h3 id="roles-variables-files-and-playbooks-17">Roles, variables files and playbooks</h3>
<!-- markdownlint-enable MD024 -->

<p>:information_source: The tables below can be mapped through the numbering column (<code class="language-plaintext highlighter-rouge">#</code>).<sup id="fnref:column_explanation:17" role="doc-noteref"><a href="#fn:column_explanation" class="footnote" rel="footnote">1</a></sup></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Role/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left">N/A</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Variable definition file/s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">host_vars/&lt;hostname&gt;/17_openscap.yml</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">#</th>
      <th style="text-align: left">Playbook/s used</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">20_satellite_openscap.yml</code></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-disable MD024 -->
<h3 id="procedure-16">Procedure</h3>
<!-- markdownlint-enable MD024 -->

<ol>
  <li>Define the variables for OpenSCAP
 <script src="https://gist.github.com/a222ecc8c0afaaf5d8dc9fcdbc3c7fe8.js"> </script></li>
  <li>Run the playbook to create the OpenSCAP content, enable the default OpenSCAP content and enable the Foreman OpenSCAP role:
 <!-- markdownlint-disable MD014 -->
    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">$ </span>ansible-playbook <span class="nt">-i</span> inventory 20_satellite_openscap.yml <span class="nt">--vault-pass-file</span> .vault.pass
</code></pre></div>    </div>
    <p><!-- markdownlint-enable MD014 --></p>
  </li>
</ol>

<h2 id="closing-thoughts">Closing thoughts</h2>

<p>This concludes this blog post. There are way more things you can do with
<a href="https://console.redhat.com/ansible/automation-hub/repo/published/redhat/satellite">Red Hat’s Certified Ansible Collection for Red Hat Satellite</a> and I highly encourage you
to explore the possibilities. I haven’t touch on things as Compute Resources or Host Collections and many more things you could theoretically make use of with your specific
use case.</p>

<p>There are still a few things left to do! I either update this blog post or might create new blog posts about the topics. The topics that I’d like to touch in the future are:</p>

<ul>
  <li>Adding Capsules</li>
  <li>Create Hosts in Satellite</li>
  <li>Create and assign OpenSCAP policies, as well as OpenSCAP tailoring files</li>
  <li>Figure out a way to make it easier to find out the Product and Repository labels</li>
  <li><em>Maybe</em> convert the OpenSCAP playbook into a role</li>
</ul>

<p><em>BUT</em> don’t hold your breath on those topics. I have other blogs that I’d like to write, but I’ll surely revisit this blog in <strong>the future</strong>.</p>

<p>I hope this blog post was helpful to some of you :sunglasses:</p>

<p>.. until next time,</p>

<p>Steffen</p>

<h2 id="change-log">Change log</h2>

<h3 id="2025-01-23">2025-01-23</h3>

<ul>
  <li>Fixing dead Kickstart reference documentation</li>
</ul>

<h3 id="2024-03-17">2024-03-17</h3>

<ul>
  <li>Spelling fixes (thanks <a href="https://github.com/ls7ls7">@ls7ls7</a>!)</li>
  <li>Updating documentation to point to the latest available (thanks <a href="https://github.com/ls7ls7">@ls7ls7</a>!)</li>
</ul>

<h3 id="2024-03-11">2024-03-11</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">markdownlint</code> fixes</li>
  <li>Spelling fixes</li>
</ul>

<h3 id="2024-03-09">2024-03-09</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">markdownlint</code> fixes</li>
  <li>Typo fixes</li>
  <li>Adding a note that RHEL 8.8 and RHEL 8.9 with Ansible Core 2.15.4 has been tested</li>
  <li>Adding a note that this has been tested on Satellite 6.13 and Satellite 6.14</li>
</ul>

<h2 id="footnotes">Footnotes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:column_explanation" role="doc-endnote">
      <p>All tables in the <strong>Roles, variables files and playbooks</strong> section are set up in a way that helps to easily identify which role uses which variable
                   files and which playbooks. For example, the role that is used in <code class="language-plaintext highlighter-rouge">#1</code> in the first table (<code class="language-plaintext highlighter-rouge">Role/s used</code>), makes use of the variables that
                   are defined in table <code class="language-plaintext highlighter-rouge">Variable definition file/s</code> in column <code class="language-plaintext highlighter-rouge">#1</code> and is executed with the playbook that is defined in the table <code class="language-plaintext highlighter-rouge">Playbook/s used</code>
                   in column <code class="language-plaintext highlighter-rouge">#1</code>. <a href="#fnref:column_explanation" class="reversefootnote" role="doc-backlink">&#8617;</a> <a href="#fnref:column_explanation:1" class="reversefootnote" role="doc-backlink">&#8617;<sup>2</sup></a> <a href="#fnref:column_explanation:2" class="reversefootnote" role="doc-backlink">&#8617;<sup>3</sup></a> <a href="#fnref:column_explanation:3" class="reversefootnote" role="doc-backlink">&#8617;<sup>4</sup></a> <a href="#fnref:column_explanation:4" class="reversefootnote" role="doc-backlink">&#8617;<sup>5</sup></a> <a href="#fnref:column_explanation:5" class="reversefootnote" role="doc-backlink">&#8617;<sup>6</sup></a> <a href="#fnref:column_explanation:6" class="reversefootnote" role="doc-backlink">&#8617;<sup>7</sup></a> <a href="#fnref:column_explanation:7" class="reversefootnote" role="doc-backlink">&#8617;<sup>8</sup></a> <a href="#fnref:column_explanation:8" class="reversefootnote" role="doc-backlink">&#8617;<sup>9</sup></a> <a href="#fnref:column_explanation:9" class="reversefootnote" role="doc-backlink">&#8617;<sup>10</sup></a> <a href="#fnref:column_explanation:10" class="reversefootnote" role="doc-backlink">&#8617;<sup>11</sup></a> <a href="#fnref:column_explanation:11" class="reversefootnote" role="doc-backlink">&#8617;<sup>12</sup></a> <a href="#fnref:column_explanation:12" class="reversefootnote" role="doc-backlink">&#8617;<sup>13</sup></a> <a href="#fnref:column_explanation:13" class="reversefootnote" role="doc-backlink">&#8617;<sup>14</sup></a> <a href="#fnref:column_explanation:14" class="reversefootnote" role="doc-backlink">&#8617;<sup>15</sup></a> <a href="#fnref:column_explanation:15" class="reversefootnote" role="doc-backlink">&#8617;<sup>16</sup></a> <a href="#fnref:column_explanation:16" class="reversefootnote" role="doc-backlink">&#8617;<sup>17</sup></a> <a href="#fnref:column_explanation:17" class="reversefootnote" role="doc-backlink">&#8617;<sup>18</sup></a></p>
    </li>
    <li id="fn:key_usage" role="doc-endnote">
      <p><a href="https://access.redhat.com/solutions/6977733">“ERR_SSL_KEY_USAGE_INCOMPATIBLE” while accessing Red Hat Satellite WebUI after configure custom SSL certificates</a> <a href="#fnref:key_usage" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Steffen Scheib</name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Kickstarting Red Hat Enterprise Linux (RHEL) systems using a highly customized Kickstart with Red Hat Satellite 6</title><link href="https://blog.scheib.me/2023/07/01/highly-customized-kickstart.html" rel="alternate" type="text/html" title="Kickstarting Red Hat Enterprise Linux (RHEL) systems using a highly customized Kickstart with Red Hat Satellite 6" /><published>2023-07-01T00:00:00+00:00</published><updated>2024-03-11T00:00:00+00:00</updated><id>https://blog.scheib.me/2023/07/01/highly-customized-kickstart</id><content type="html" xml:base="https://blog.scheib.me/2023/07/01/highly-customized-kickstart.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>Following my <a href="https://blog.scheib.me/2023/05/30/redhat-satellite-concept.html">Red Hat Satellite 6 concept suggestion blog post</a>, I thought it made sense to share my highly
customized Kickstart to use with Red Hat Satellite 6.</p>

<p>In a later blog post, I’ll further share how I make use of
<a href="https://access.redhat.com/documentation/de-de/red_hat_satellite/6.12/html/managing_hosts/synchronizing_templates_repositories_managing-hosts">Template Sync</a> in Satellite. A
functionality, that allows importing the templates and also automatically assigning them to defined Operating Systems.</p>

<p>:warning: <strong>Before you dig into this: Please read the following paragraph carefully.</strong></p>

<p>While it is absolutely possible to customize Kickstarts using Satellite, the degree of flexibility comes with a trade-off: <strong>maintenance</strong>. Please understand that in almost all
cases the provided Kickstarts by Red Hat fulfill perfectly the need of almost all use cases. When using highly customized Kickstarts you need to keep up with changes in the
Satellite and you need to keep up with the changes to Kickstart and RHEL. This means, every time a new update of the Satellite is released or a new major
version<sup id="fnref:kickstart_changes" role="doc-noteref"><a href="#fn:kickstart_changes" class="footnote" rel="footnote">1</a></sup> of RHEL is released, you need to carefully read the change log of the new Satellite version and check whether things you use
(e.g. <a href="https://access.redhat.com/documentation/de-de/red_hat_satellite/6.12/html/managing_hosts/template_writing_reference_managing-hosts#Generic_Project-specific_Macros_managing-hosts">Satellite-Specific Macros</a>)
have changed, have been deprecated or have been removed. The same for RHEL.</p>

<p>Further, you have to verify with each new Satellite release - and preferably RHEL release, that your Host Provisioning works exactly as you have designed it.</p>

<p><strong>This adds additional maintenance overhead that has to be done with <em>at least every</em> Satellite and RHEL major release!</strong></p>

<p>Please evaluate carefully whether the already provided Kickstarts fulfill your needs and if not, whether the things you’d like to change can be changed after provisioning a
system using automation (e.g. Ansible, Chef, Puppet, Salt, etc.).</p>

<p>Usually, the things you cannot change with ease <em>after</em> deploying hosts (such as partition tables), can easily be customized in Satellite without the need to completely
customize the Kickstarts. Partition tables, for instance, can easily be provided to Satellite using the Partition Tables object.</p>

<p>Back to topic .. :grin:</p>

<p>A few years back when I didn’t fully understand the complete process of Kickstart in Satellite, I made an exercise and completely customized all the Kickstarts to my customer’s
needs. That meant, removing everything that is not used actively and further to introduce a better logging mechanism and error handling. Since then, I have further optimized
and updated the Kickstart to be fully compatible with <em>my</em> use case.</p>

<p>Speaking of error handling: To be perfectly honest, I don’t know if that has changed in the meanwhile, but back then (with Kickstart on RHEL 8 and using Satellite at least up
to Satellite 6.9), whenever a command failed in the <code class="language-plaintext highlighter-rouge">%post</code> section of the Kickstart, the Kickstart would continue to run. If you did not verify the provided host thoroughly
<em>after</em> deployment, you’d end up with an incompletely provisioned host.</p>

<p>Since RHEL 7, Kickstart supports
<a href="https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/8/html/automatically_installing_rhel/kickstart-script-file-format-reference_rhel-installer#kickstart-error-handling-section_kickstart-script-file-format-reference">error handling</a>
to <em>some</em> degree. This error handling, however, concerns serious errors such as a failure in the Storage Selection. It does <em>not</em> cover, however, issues that happen due to
failing commands in the <code class="language-plaintext highlighter-rouge">%post</code> section.</p>

<p>Let me provide you with an example: Say we want to install a custom monitoring agent (e.g. <a href="https://www.zabbix.com/">Zabbix</a>) during Kickstart using the following command:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dnf <span class="nb">install </span>zabbix-agent <span class="nt">-y</span>
</code></pre></div></div>

<p>The monitoring agent might be a necessity for your deployment and you want to make sure that it is installed. Well, if the package <code class="language-plaintext highlighter-rouge">zabbix-agent</code> isn’t available, because you
might forgot to enable the repository within the Activation Key or you forgot to add the Content View that provides Zabbix, the Kickstart <em>will</em> continue to run like nothing
happened. It <em>will</em> show as a <em>successful build</em> within Satellite. Obviously, the build was not successful - at least not entirely, as a step failed. I’d consider this a
<em>failed</em> build.</p>

<p>You might argue that if you set up your services<sup id="fnref:service" role="doc-noteref"><a href="#fn:service" class="footnote" rel="footnote">2</a></sup> properly, this shouldn’t happen. While you are correct, mistakes happen. For everybody.</p>

<p>Even if everything was set up correctly, what about a temporary network issue between your host and the responsible Capsule only at the moment when you try to install the
Zabbix agent? You will never notice it and you’d think the deployment was <em>successful</em>.</p>

<p>As you see, while customizing Kickstarts can provide you with some benefits, it comes with the trade-off of maintenance. If you are not comfortable in writing and
troubleshooting Kickstarts and troubleshooting the Host Provisioning in Satellite - or don’t have the time to - you might consider stopping right here and now.</p>

<p>If you’d like to learn more about the way I Kickstart my systems to build from that your very own customized way of Kickstarting your systems, or if you are just curious:
Perfect, keep on reading. :grin:</p>

<h2 id="overview">Overview</h2>

<p>:information_source: If you are not familiar with Kickstart, please
<a href="https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/8/html/automatically_installing_rhel/installing-rhel-fully-and-semi-automated">read up on that</a>
first. This is not an <em>introduction</em> to Kickstart and I assume a good understanding of Kickstart throughout this blog post.</p>

<p>To get started with Kickstart in Satellite, we first need to take a look at how Satellite handles Kickstarts.</p>

<p>A Kickstart file in Satellite is rendered <em>before</em> transmitting it to the host that requested it. But what Satellite makes awesome for using with Kickstart is the high degree of
flexibility you get when using it. The reason being: <strong>metadata</strong>. If you followed my <a href="https://blog.scheib.me/2023/05/30/redhat-satellite-concept.html">earlier blog post</a>, you
know we defined <em>a lot</em> of different objects. Each of those objects provide a small piece of information about a system.</p>

<p>We can use these information pieces - or like I call them, metadata - to stitch together a highly customized Kickstart that <em>perfectly</em> fits for the system we are about to
deploy.</p>

<p>Before we dig deeper into Kickstart, we first need to understand how Satellite makes use of Templates and how we can leverage that functionality.</p>

<p>Satellite provides the following Template types:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Template Type</th>
      <th style="text-align: left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Partition Tables</td>
      <td style="text-align: left">This template type provides the possibility to, surprise, surprise, create partition templates for our hosts</td>
    </tr>
    <tr>
      <td style="text-align: left">Job Templates</td>
      <td style="text-align: left">We can use Job Templates to run Jobs within Satellite</td>
    </tr>
    <tr>
      <td style="text-align: left">Provisioning Templates</td>
      <td style="text-align: left">These are the templates we can use for Kickstarting systems</td>
    </tr>
    <tr>
      <td style="text-align: left">Report Templates</td>
      <td style="text-align: left">Report templates can be used to create, who have guessed that, reports</td>
    </tr>
  </tbody>
</table>

<p>Our focus will be on <em>Partition Tables</em> and <em>Provisioning Templates</em>. Provisioning Templates are further separated into several
<a href="https://access.redhat.com/documentation/de-de/red_hat_satellite/6.12/html/provisioning_hosts/configuring_provisioning_resources_provisioning#types-of-provisioning-templates_provisioning">Provisioning Template Types</a>:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Provisioning Template Types</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Provision</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">PXELinux</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">PXEGrub</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">PXEGrub2</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Finish</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">user_data</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">cloud_init</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Bootdisk</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Kernel Execution (kexec)</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">Script</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ZTP</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">POAP</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">iPXE</code></td>
    </tr>
  </tbody>
</table>

<p>As you see, there a lot of different Provisioning Templates available. In this blog post I’ll focus on the following two:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">PXELinux</code></li>
  <li><code class="language-plaintext highlighter-rouge">Provision</code></li>
</ul>

<p>We’ll use the <code class="language-plaintext highlighter-rouge">PXELinux</code> template to render the parameters that are transmitted to a server that will boot into the
<a href="https://de.wikipedia.org/wiki/Preboot_Execution_Environment"><code class="language-plaintext highlighter-rouge">Preboot Execution Environment</code> (<code class="language-plaintext highlighter-rouge">PXE</code>)</a>. And the <code class="language-plaintext highlighter-rouge">Provision</code> template is where all the magic will happen. This will
define the Kickstart in its entirety.</p>

<p>There is one ‘Template type’ we haven’t talked about. <a href="https://access.redhat.com/documentation/de-de/red_hat_satellite/6.12/html/managing_hosts/template_writing_reference_managing-hosts#Example_Template_Snippets_managing-hosts">Snippets</a>.
Snippets are small portions of code that can be reused multiple times throughout the Templates.</p>

<p>A Snippet might look something like this:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%</span>
<span class="n">os_major</span> <span class="o">=</span> <span class="vi">@host</span><span class="p">.</span><span class="nf">operatingsystem</span><span class="p">.</span><span class="nf">major</span><span class="p">.</span><span class="nf">to_i</span>
<span class="n">os_minor</span> <span class="o">=</span> <span class="vi">@host</span><span class="p">.</span><span class="nf">operatingsystem</span><span class="p">.</span><span class="nf">minor</span><span class="p">.</span><span class="nf">to_i</span>
<span class="cp">%&gt;</span>

<span class="cp">&lt;%</span> <span class="k">if</span> <span class="p">((</span><span class="n">os_minor</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">os_major</span> <span class="o">&gt;</span> <span class="mi">7</span><span class="p">))</span> <span class="cp">-%&gt;</span>
<span class="c">&lt;%# do something #%&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span>
</code></pre></div></div>

<p>As you might have guessed, the Templates (and Snippets) in Satellite are written in Ruby, Embedded Ruby (<code class="language-plaintext highlighter-rouge">ERB</code>), specifically. Usually. I say usually, because the <code class="language-plaintext highlighter-rouge">%post</code> section
of the Provisioning Template can be anything, really. That all depends on the options passed to the <code class="language-plaintext highlighter-rouge">%post</code> section. The <code class="language-plaintext highlighter-rouge">%post</code> section accepts an
<code class="language-plaintext highlighter-rouge">--interpreter=</code> <a href="https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/8/html/automatically_installing_rhel/kickstart-script-file-format-reference_rhel-installer#post-script-section-options_post-script-in-kickstart-file">argument</a>.
With that, we can make use of BASH (the default) or make use of Python, etc. as our <code class="language-plaintext highlighter-rouge">interpreter</code>. The great thing about this is that we can still make use of <code class="language-plaintext highlighter-rouge">ERB</code> in the
<code class="language-plaintext highlighter-rouge">%post</code> section. That is because Satellite <em>renders</em> the template <em>before</em> transmitting it to the client. So <code class="language-plaintext highlighter-rouge">ERB</code> code is evaluated before passing it to the client.</p>

<p>With that we can still use for instance <code class="language-plaintext highlighter-rouge">@host.operatingsystem.major.to_i</code> in any section of the Kickstart as it will be rendered by Satellite before the client actually uses it.</p>

<h2 id="diving-deeper">Diving Deeper</h2>

<p>Now that we have set a baseline, let’s dive into my Kickstart templates. You can find them in my <a href="https://github.com/sscheib/satellite_templates">GitHub repository</a>.</p>

<p>:warning: The Kickstarts are built around <em>my</em> use case. Please <em>don’t</em> use them as is. Evaluate them and check if they work for <em>your</em> use case.</p>

<p>Looking at the repository contents, we have the following files available:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pt-standard_bios.erb
pvt-ipxe.erb
pvt-provisioning.erb
pvt-pxelinux_default_local_boot.erb
pvt-pxelinux.erb
snt-ansible_provisioning_callback_script.erb
snt-ansible_provisioning_callback_service.erb
snt-ansible_ssh_keys.erb
snt-configure_time_synchronization.erb
snt-create_ip_config_string.erb
snt-enable_epel.erb
snt-idm_register.erb
snt-luks_encryption.erb
snt-networking_setup_post_installation.erb
snt-post_provisioning_init.erb
snt-remote_execution_ssh_keys.erb
snt-subscription_manager_registration.erb
</code></pre></div></div>

<p>As you can see, I have implemented a basic name concept:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Prefix</th>
      <th style="text-align: left">Meaning</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">pt-</code></td>
      <td style="text-align: left">**P**artition **T**able</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">pvt-</code></td>
      <td style="text-align: left">**P**ro**v**ision **T**emplate</td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">snt-</code></td>
      <td style="text-align: left">**Sn**ippe**t**</td>
    </tr>
  </tbody>
</table>

<p>And I make heavy use of Snippets to make the Provision Template a little smaller and easier to read through.</p>

<h3 id="partition-table">Partition Table</h3>

<p>Let’s look first at the Partition Table:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;%#
kind: ptable
name: pt-standard_bios
model: Ptable
oses:
- RedHat 7
- RHEL 7
- RedHat 8
- RHEL 8
- RedHat 9
- RHEL 9

locations:
- loc-core

organizations:
- org-core
-%&gt;</span>

<span class="c">&lt;%#
author: Steffen Scheib (steffen@scheib.me)

custom snippets:
  none

snippets:
  none

changelog:
22.05.2023 - Steffen Scheib:
- Renamed encrypt_system host parameter to p-encrypt_system

04.09.2021 - Steffen Scheib:
- Initial version
%&gt;</span>
#Dynamic

# Define some variables
<span class="cp">&lt;%</span>
   <span class="n">os_major</span> <span class="o">=</span> <span class="vi">@host</span><span class="p">.</span><span class="nf">operatingsystem</span><span class="p">.</span><span class="nf">major</span><span class="p">.</span><span class="nf">to_i</span>
   <span class="n">fs_type</span> <span class="o">=</span> <span class="s1">'xfs'</span>
   <span class="n">vg_name</span> <span class="o">=</span> <span class="s1">'system'</span>
<span class="cp">-%&gt;</span>

if [ -e /dev/sda ]; then
  dev_device="sda"
elif [ -e /dev/vda ]; then
  dev_device="vda"
fi

cat <span class="nt">&lt;</span><span class="err">&lt;</span><span class="na">EOF</span> <span class="nt">&gt;</span> /tmp/diskpart.cfg
  zerombr
  # Partition clearing information
  bootloader --location=mbr --append="splash=quiet"
  clearpart --all --initlabel --drives="${dev_device}" --disklabel=gpt
  # as we have gpt, we need a separate biosboot partition
  part biosboot --fstype=biosboot --size=1
EOF

cat <span class="nt">&lt;</span><span class="err">&lt;</span><span class="na">EOF</span> <span class="nt">&gt;</span>&gt; /tmp/diskpart.cfg
  # Disk partitioning information with <span class="cp">&lt;%=</span> <span class="n">fs_type</span> <span class="cp">%&gt;</span>
  part /boot --fstype=<span class="cp">&lt;%=</span> <span class="n">fs_type</span> <span class="cp">%&gt;</span> --size=4096

  # encrypt only systems with the host parameter p-encrypt_system set
  <span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">host_param</span><span class="p">(</span><span class="s1">'p-encrypt_system'</span><span class="p">)</span> <span class="cp">%&gt;</span>
    # create an encrypted physical volume
    part pv.0 --grow --ondisk="${dev_device}" --encrypted --passphrase=<span class="cp">&lt;%=</span> <span class="n">host_param</span><span class="p">(</span><span class="s1">'crypted_system_initial_passphrase'</span><span class="p">)</span> <span class="cp">%&gt;</span>
  <span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">%&gt;</span>
    part pv.0 --grow --ondisk="${dev_device}"
  <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span>

  volgroup vg_<span class="cp">&lt;%=</span> <span class="n">vg_name</span> <span class="cp">%&gt;</span> pv.0

  logvol /              --fstype <span class="cp">&lt;%=</span> <span class="n">fs_type</span> <span class="cp">%&gt;</span> --name=lv_root          --vgname=vg_<span class="cp">&lt;%=</span> <span class="n">vg_name</span> <span class="cp">%&gt;</span> --size=10240
  logvol /var/log/audit --fstype <span class="cp">&lt;%=</span> <span class="n">fs_type</span> <span class="cp">%&gt;</span> --name=lv_var_log_audit --vgname=vg_<span class="cp">&lt;%=</span> <span class="n">vg_name</span> <span class="cp">%&gt;</span> --size=2048   --fsoptions="nodev,nosuid,noexec"
  logvol /var/log       --fstype <span class="cp">&lt;%=</span> <span class="n">fs_type</span> <span class="cp">%&gt;</span> --name=lv_var_log       --vgname=vg_<span class="cp">&lt;%=</span> <span class="n">vg_name</span> <span class="cp">%&gt;</span> --size=5120   --fsoptions="nodev,nosuid,noexec"
  logvol /var/tmp       --fstype <span class="cp">&lt;%=</span> <span class="n">fs_type</span> <span class="cp">%&gt;</span> --name=lv_var_tmp       --vgname=vg_<span class="cp">&lt;%=</span> <span class="n">vg_name</span> <span class="cp">%&gt;</span> --size=2048   --fsoptions="nodev,nosuid"
  logvol /usr           --fstype <span class="cp">&lt;%=</span> <span class="n">fs_type</span> <span class="cp">%&gt;</span> --name=lv_usr           --vgname=vg_<span class="cp">&lt;%=</span> <span class="n">vg_name</span> <span class="cp">%&gt;</span> --size=8192   --fsoptions="nodev"
  logvol /usr/local     --fstype <span class="cp">&lt;%=</span> <span class="n">fs_type</span> <span class="cp">%&gt;</span> --name=lv_usr_local     --vgname=vg_<span class="cp">&lt;%=</span> <span class="n">vg_name</span> <span class="cp">%&gt;</span> --size=1024   --fsoptions="nodev"
  logvol /openscap      --fstype <span class="cp">&lt;%=</span> <span class="n">fs_type</span> <span class="cp">%&gt;</span> --name=lv_openscap      --vgname=vg_<span class="cp">&lt;%=</span> <span class="n">vg_name</span> <span class="cp">%&gt;</span> --size=512    --fsoptions="nodev,noexec"
  logvol /home          --fstype <span class="cp">&lt;%=</span> <span class="n">fs_type</span> <span class="cp">%&gt;</span> --name=lv_home          --vgname=vg_<span class="cp">&lt;%=</span> <span class="n">vg_name</span> <span class="cp">%&gt;</span> --size=1024   --fsoptions="nodev,nosuid"
  logvol /tmp           --fstype <span class="cp">&lt;%=</span> <span class="n">fs_type</span> <span class="cp">%&gt;</span> --name=lv_tmp           --vgname=vg_<span class="cp">&lt;%=</span> <span class="n">vg_name</span> <span class="cp">%&gt;</span> --size=5120   --fsoptions="nodev,nosuid,noexec"
  logvol /var           --fstype <span class="cp">&lt;%=</span> <span class="n">fs_type</span> <span class="cp">%&gt;</span> --name=lv_var           --vgname=vg_<span class="cp">&lt;%=</span> <span class="n">vg_name</span> <span class="cp">%&gt;</span> --size=8192   --fsoptions="nodev,nosuid"
  logvol /opt           --fstype <span class="cp">&lt;%=</span> <span class="n">fs_type</span> <span class="cp">%&gt;</span> --name=lv_opt           --vgname=vg_<span class="cp">&lt;%=</span> <span class="n">vg_name</span> <span class="cp">%&gt;</span> --size=4096   --fsoptions="nodev"
  logvol swap           --fstype swap           --name=lv_swap          --vgname=vg_<span class="cp">&lt;%=</span> <span class="n">vg_name</span> <span class="cp">%&gt;</span> --size=4096
EOF
</code></pre></div></div>

<p>The Partition Table itself is pretty straight forward, but I’d like to point out two things.</p>

<p>First, I start <em>every</em> template with a comment block of <code class="language-plaintext highlighter-rouge">ERB</code> (<code class="language-plaintext highlighter-rouge">&lt;%# #%&gt;</code>) which contains metadata for Satellite’s <code class="language-plaintext highlighter-rouge">TemplateSync</code> (more on that in a later blog post).</p>

<p>Secondly, the next comment block is <em>not</em> used by Satellite, but rather by myself to quickly look up what I changed when. I know, this is rather an old-school technique, but
for me it works to keep track of what I have changed when and why. Yes, the same is present as well in <code class="language-plaintext highlighter-rouge">git log</code>, but I find it quite handy to have such things in each template
as well.</p>

<h3 id="provision-template">Provision Template</h3>

<p>My Provision Templates and Snippets contain further a section with <code class="language-plaintext highlighter-rouge">Supported host parameters</code><sup id="fnref:host_params" role="doc-noteref"><a href="#fn:host_params" class="footnote" rel="footnote">3</a></sup>. These list the parameters of each Template and Snippet that can be
overridden/set to customize the behavior of them. The exception is <code class="language-plaintext highlighter-rouge">pvt-provisioning</code>. Within this template <em>all</em> available parameters for the Provision Template are included -
including those that are actually included through Snippets during provisioning. This way you have <em>one</em> place to look up which parameters are supported. Of course this is a
manual effort, and thus the documentation inside those templates is only helpful when you keep it up-to-date. I also include a section with <code class="language-plaintext highlighter-rouge">Snippets</code> and <code class="language-plaintext highlighter-rouge">Custom snippets</code>.
These are self explanatory.</p>

<p>Below you’ll find an excerpt of the Provision Template’s header which lists the supported parameters:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;%#
author: Steffen Scheib (steffen@scheib.me)

description:
This kickstart provisioning template is the "base" template and contains all required key arguments for the kickstart installation.

custom snippets:
- snt-post_provisioning_init
- snt-subscription_manager_registration
- snt-configure_time_synchronization
- snt-remote_execution_ssh_keys
- snt-enable_epel
- snt-networking_setup_post_installation
- snt-luks_encryption

snippets:
  none

supported host parameters:
&gt; host parameter name                    | type      | snippet/template name                        | description                                     &lt;
-----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; lang                                   | string    | pvt-provision                                | Language to set for the operating system
*                                        |           |                                              | Default: 'en_US.UTF-8'
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; keyboard                               | string    | pvt-provision                                | Keyboard layout to use for the operating system
*                                        |           |                                              | Default: 'de'
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; selinux                                | string    | pvt-provision                                | Mode of SELinux to set for the operating system
*                                        |           |                                              | Default: 'enforcing'
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; time-zone                              | string    | pvt-provision                                | Timezone the operating system should be set to
*                                        |           |                                              | Default: 'UTC'
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; p-encrypt_system                       | boolean   | pvt-provision                                | Whether to encrypt the system with luks
*                                        |           |                                              | Default: Unset
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; p-ks_debug                             | boolean   | snt-post_provisioning_init                   | If true, the %post section will enable set -x for
*                                        |           |                                              | BASH
*                                        |           |                                              | Default: false
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; syspurpose_role                        | string    | snt-subscription_manager_registration        | If set, sets the syspurpose role within
*                                        |           |                                              | subscription-manager
*                                        |           |                                              | Default: Unset
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; syspurpose_usage                       | string    | snt-subscription_manager_registration        | If set, sets the syspurpose usage within
*                                        |           |                                              | subscription-manager
*                                        |           |                                              | Default: Unset
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; syspurpose_sla                         | string    | snt-subscription_manager_registration        | If set, sets the syspurpose SLA within
*                                        |           |                                              | subscription-manager
*                                        |           |                                              | Default: Unset
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; syspurpose_addons                      | string    | snt-subscription_manager_registration        | If set, sets the syspurpose addons within
*                                        |           |                                              | subscription-manager
*                                        |           |                                              | Default: Unset
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; additional_repositories                | string    | snt-subscription_manager_registration        | Additional repositories to enable to the already
*                                        |           |                                              | enabled within the activation key. Repositories
*                                        |           |                                              | have to be passed as comma-seperated string
*                                        |           |                                              | Example: 'repo1,repo2'
*                                        |           |                                              | Default: Unset
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; idm_ssh                                | boolean   | snt-idm_register                             | If false, disables sssd ssh integration with
*                                        |           |                                              | command line parameter --no-ssh
*                                        |           |                                              | Default: true
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; idm_mkhomedir                          | boolean   | snt-idm_register                             | If false, disables the configuration of ssd for
*                                        |           |                                              | automatical creation of home
*                                        |           |                                              | directories (--mkhomedir will not be passed as
*                                        |           |                                              | argument)
*                                        |           |                                              | Default: true
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; idm_opts                               | string    | snt-idm_register                             | If set, these additional command line parameters
*                                        |           |                                              | will be passed to the ipa-client-install command
*                                        |           |                                              | Default: Unset
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; remote_execution_ssh_user              | string    | snt-remote_execution_ssh_keys                | User for which remote_execution_ssh_keys will be
*                                        |           |                                              | authorized
*                                        |           |                                              | Default: 'satellite-remote'
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; remote_execution_ssh_user_comment      | string    | snt-remote_execution_ssh_keys                | Comment to set for the user
*                                        |           |                                              | Default: 'RedHat Satellite Remote User'
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; p-remote_execution_ssh_keys            | string    | snt-remote_execution_ssh_keys                | Public keys to be put in
*                                        |           |                                              | &lt;ssh_user&gt;/.ssh/authorized_keys
*                                        |           |                                              | One key per line should be added
*                                        |           |                                              | Default: Unset
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; dns_alt_names                          | string    | snt-puppet                                   | If set, sets the alternative dns name in the
*                                        |           |                                              | Puppet configuration file
*                                        |           |                                              | Default: Unset
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; p-ks_debug_network                     | boolean   | snt-networking_setup_post_installation       | If true, writes networking information for
*                                        |           |                                              | debugging purposed to
*                                        |           |                                              | /root/network_during_installation.log
*                                        |           |                                              | Default: Unset
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; p-crypted_system_initial_passphrase    | string    | snt-luks_encryption                          | This passphrase was used to initially create the
*                                        |           |                                              | luks partition and within this snippet will be
*                                        |           |                                              | removed again
*                                        |           |                                              | Default: Some Secret Password :)
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; p-ansible_provisioning                 | boolean   | pvt-provisioning                             | Determines whether post provisioning with Ansible
*                                        |           |                                              | should be done
*                                        |           |                                              | Default: true
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; p-ansible_host_config_key              | string    | snt-ansible_provisioning_callback_service    | Host config key to pass to the Ansible
*                                        |           |                                              | Automation Controller call
*                                        |           |                                              | Default: None
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; p-ansible_job_template_id              | integer   | snt-ansible_provisioning_callback_service    | ID of the job template to trigger of the
*                                        |           |                                              | Ansible Automation Controller
*                                        |           |                                              | Default: None
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; p-ansible_ssh_user                     | string    | snt-ansible_ssh_keys                         | User for which p-ansible_ssh_keys will be authorized
*                                        |           |                                              | Default: 'remote-ansible'
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; p-ansible_ssh_user_comment             | string    | snt-ansible_ssh_keys                         | Comment to set for the user
*                                        |           |                                              | Default: 'Red Hat Ansible Automation Platform Remote User'
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; p-ansible_ssh_keys                     | string    | snt-ansible_ssh_keys                         | Public keys to be put in &lt;ssh_user&gt;/.ssh/authorized_keys
*                                        |           |                                              | One key per line should be added
*                                        |           |                                              | Default: Unset
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; p-ansible_controller_host              | string    | snt-ansible_provisioning_callback_service    | Ansible Automation Controller Host
*                                        |           |                                              | Default: Unset
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------+
&gt; p-enable_fips_deployment               | boolean   | pvt-provisioning                             | Whether to enable FIPS mode
*                                        |           |                                              | Default: Unset
+----------------------------------------+-----------+----------------------------------------------+-------------------------------------------------&gt;
</span></code></pre></div></div>

<p>:information_source: Variables that have prefixed a <code class="language-plaintext highlighter-rouge">p-</code> are custom parameters of my Snippets or the Provisioning Template. Parameters without <code class="language-plaintext highlighter-rouge">p-</code> are parameters that are present
in Red Hat’s default Kickstart.</p>

<p>The Provision Template also includes the exit codes of the <code class="language-plaintext highlighter-rouge">%post</code> section (should it fail) and the log files that are used during provisioning, which will be helpful when
troubleshooting a failed installation:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exit codes:
0: Installation successfully finished
1: Unable to determine package manager to use
2: Unused
3: Host parameter 'p-encrypt_system' given (true), but unable to determine a single currently installed kernel and thus cannot decide which kernel version to use
4: Host parameter 'p-encrypt_system' given (true), but no Tang servers could be discovered using _tang._tcp.@host.domain
5: Host parameter 'p-encrypt_system' given (true), but not all Tang servers discovered via _tang._tcp.@host.domain were reachable
6: Host parameter 'p-encrypt_system' given (true), but it was discovered, that GRUB_CMDLINE_LINUX in file /etc/default/grub is empty
7: /var/log is not mounted
8: Realm is not set
9: Command 'dig' is not available
10: Unable to create directory /mnt/sysimage/var/log/journal
11: Unable to run command 'sync'

Note: These are only the *defined* exit codes! If a command exits with an error (exit code not equals zero) within the main %post section,
      this exit code will be used to exit the post installation.

log files:
&gt; log file path                                         | description &lt;
+-------------------------------------------------------+--------------------------------------------------------------------------------------------+
&gt; /root/install.post.no.chroot.log                      | Contains the log of the first post section without chroot, which basically copies only the
&gt;                                                       | file /etc/resolv.conf from the host system to the chroot
+-------------------------------------------------------+--------------------------------------------------------------------------------------------+
&gt; /root/install.post.script.log                         | Contains the output of the "main" post section from the function write_output
+-------------------------------------------------------+--------------------------------------------------------------------------------------------+
&gt; /root/install.post.log                                | Contains stdout and stderr of the "main" post section
+-------------------------------------------------------+--------------------------------------------------------------------------------------------+
&gt; /root/install.post.no.chroot.journal.log              | Contains the output from the post section, which makes journald logs persistent
+-------------------------------------------------------+--------------------------------------------------------------------------------------------+
&gt; /root/install.post.notification.log                   | Contains the output of the post section, which notifies foreman about the finished build
+-------------------------------------------------------+--------------------------------------------------------------------------------------------&gt;
-%&gt;
</code></pre></div></div>

<h3 id="post-section-flow"><code class="language-plaintext highlighter-rouge">%post</code> section flow</h3>

<p>Since the <code class="language-plaintext highlighter-rouge">%post</code> section is the most complex one, let me walk you through it step by step.</p>

<p>Okay, actually there are multiple <code class="language-plaintext highlighter-rouge">%post</code> sections. Let’s focus on the one that does the heavy lifting (I’ll briefly explain the others later on):</p>

<p><code class="language-plaintext highlighter-rouge">%post --interpreter=/bin/bash --log=/root/install.post.log</code></p>

<p>For an initial overview, let’s start with a flow chart:</p>

<svg class="flowchart" id="mermaid-svg" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width: 2528.93603515625px;" viewBox="0 0 2528.93603515625 2154.25" role="graphics-document document" aria-roledescription="flowchart-v2" xmlns:xlink="http://www.w3.org/1999/xlink"><style xmlns="http://www.w3.org/1999/xhtml">@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css");</style><style>#mermaid-svg{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-svg .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-svg .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-svg .error-icon{fill:#fff;}#mermaid-svg .error-text{fill:#000000;stroke:#000000;}#mermaid-svg .edge-thickness-normal{stroke-width:1px;}#mermaid-svg .edge-thickness-thick{stroke-width:3.5px;}#mermaid-svg .edge-pattern-solid{stroke-dasharray:0;}#mermaid-svg .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-svg .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-svg .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-svg .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-svg .marker.cross{stroke:#0b0b0b;}#mermaid-svg svg{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;}#mermaid-svg p{margin:0;}#mermaid-svg .label{font-family:"trebuchet ms",verdana,arial,sans-serif;color:#333;}#mermaid-svg .cluster-label text{fill:#000000;}#mermaid-svg .cluster-label span{color:#000000;}#mermaid-svg .cluster-label span p{background-color:transparent;}#mermaid-svg .label text,#mermaid-svg span{fill:#333;color:#333;}#mermaid-svg .node rect,#mermaid-svg .node circle,#mermaid-svg .node ellipse,#mermaid-svg .node polygon,#mermaid-svg .node path{fill:#fff4dd;stroke:hsl(40.5882352941, 60%, 83.3333333333%);stroke-width:1px;}#mermaid-svg .rough-node .label text,#mermaid-svg .node .label text,#mermaid-svg .image-shape .label,#mermaid-svg .icon-shape .label{text-anchor:middle;}#mermaid-svg .node .katex path{fill:#000;stroke:#000;stroke-width:1px;}#mermaid-svg .rough-node .label,#mermaid-svg .node .label,#mermaid-svg .image-shape .label,#mermaid-svg .icon-shape .label{text-align:center;}#mermaid-svg .node.clickable{cursor:pointer;}#mermaid-svg .root .anchor path{fill:#0b0b0b!important;stroke-width:0;stroke:#0b0b0b;}#mermaid-svg .arrowheadPath{fill:#0b0b0b;}#mermaid-svg .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-svg .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-svg .edgeLabel{background-color:#ffffff00;text-align:center;}#mermaid-svg .edgeLabel p{background-color:#ffffff00;}#mermaid-svg .edgeLabel rect{opacity:0.5;background-color:#ffffff00;fill:#ffffff00;}#mermaid-svg .labelBkg{background-color:rgba(255, 255, 255, 0.5);}#mermaid-svg .cluster rect{fill:#fff;stroke:hsl(0, 0%, 90%);stroke-width:1px;}#mermaid-svg .cluster text{fill:#000000;}#mermaid-svg .cluster span{color:#000000;}#mermaid-svg div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:12px;background:#fff;border:1px solid hsl(0, 0%, 90%);border-radius:2px;pointer-events:none;z-index:100;}#mermaid-svg .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#333;}#mermaid-svg rect.text{fill:none;stroke-width:0;}#mermaid-svg .icon-shape,#mermaid-svg .image-shape{background-color:#ffffff00;text-align:center;}#mermaid-svg .icon-shape p,#mermaid-svg .image-shape p{background-color:#ffffff00;padding:2px;}#mermaid-svg .icon-shape rect,#mermaid-svg .image-shape rect{opacity:0.5;background-color:#ffffff00;fill:#ffffff00;}#mermaid-svg :root{--mermaid-font-family:"trebuchet ms",verdana,arial,sans-serif;}</style><g><marker id="mermaid-svg_flowchart-v2-pointEnd" class="marker flowchart-v2" viewBox="0 0 10 10" refX="5" refY="5" markerUnits="userSpaceOnUse" markerWidth="8" markerHeight="8" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowMarkerPath" style="stroke-width: 1; stroke-dasharray: 1, 0;" /></marker><marker id="mermaid-svg_flowchart-v2-pointStart" class="marker flowchart-v2" viewBox="0 0 10 10" refX="4.5" refY="5" markerUnits="userSpaceOnUse" markerWidth="8" markerHeight="8" orient="auto"><path d="M 0 5 L 10 10 L 10 0 z" class="arrowMarkerPath" style="stroke-width: 1; stroke-dasharray: 1, 0;" /></marker><marker id="mermaid-svg_flowchart-v2-circleEnd" class="marker flowchart-v2" viewBox="0 0 10 10" refX="11" refY="5" markerUnits="userSpaceOnUse" markerWidth="11" markerHeight="11" orient="auto"><circle cx="5" cy="5" r="5" class="arrowMarkerPath" style="stroke-width: 1; stroke-dasharray: 1, 0;" /></marker><marker id="mermaid-svg_flowchart-v2-circleStart" class="marker flowchart-v2" viewBox="0 0 10 10" refX="-1" refY="5" markerUnits="userSpaceOnUse" markerWidth="11" markerHeight="11" orient="auto"><circle cx="5" cy="5" r="5" class="arrowMarkerPath" style="stroke-width: 1; stroke-dasharray: 1, 0;" /></marker><marker id="mermaid-svg_flowchart-v2-crossEnd" class="marker cross flowchart-v2" viewBox="0 0 11 11" refX="12" refY="5.2" markerUnits="userSpaceOnUse" markerWidth="11" markerHeight="11" orient="auto"><path d="M 1,1 l 9,9 M 10,1 l -9,9" class="arrowMarkerPath" style="stroke-width: 2; stroke-dasharray: 1, 0;" /></marker><marker id="mermaid-svg_flowchart-v2-crossStart" class="marker cross flowchart-v2" viewBox="0 0 11 11" refX="-1" refY="5.2" markerUnits="userSpaceOnUse" markerWidth="11" markerHeight="11" orient="auto"><path d="M 1,1 l 9,9 M 10,1 l -9,9" class="arrowMarkerPath" style="stroke-width: 2; stroke-dasharray: 1, 0;" /></marker><g class="root"><g class="clusters" /><g class="edgePaths"><path d="M1227.066,62L1227.066,66.167C1227.066,70.333,1227.066,78.667,1227.066,86.333C1227.066,94,1227.066,101,1227.066,104.5L1227.066,108" id="L_A_snt-post&amp;#95provisioning&amp;#95init_0" class=" edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link" style="" marker-end="url(#mermaid-svg_flowchart-v2-pointEnd)" /><path d="M1199.939,166L1195.752,170.167C1191.566,174.333,1183.193,182.667,1179.007,197.492C1174.82,212.317,1174.82,233.633,1174.82,244.292L1174.82,254.95" id="snt-post&amp;#95provisioning&amp;#95init-cyclic-special-1" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M1174.82,255.05L1174.82,267.708C1174.82,280.367,1174.82,305.683,1174.82,331C1174.82,356.317,1174.82,381.633,1174.82,394.292L1174.82,406.95" id="snt-post&amp;#95provisioning&amp;#95init-cyclic-special-mid" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M1174.87,406.964L1192.277,394.303C1209.684,381.642,1244.498,356.321,1261.905,330.994C1279.313,305.667,1279.313,280.333,1279.313,257C1279.313,233.667,1279.313,212.333,1275.126,197.5C1270.94,182.667,1262.567,174.333,1258.381,170.167L1254.194,166" id="snt-post&amp;#95provisioning&amp;#95init-cyclic-special-2" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M1347.34,164.868L1367.59,169.223C1387.841,173.578,1428.342,182.289,1448.593,190.145C1468.844,198,1468.844,205,1468.844,208.5L1468.844,212" id="L_snt-post&amp;#95provisioning&amp;#95init_snt-networking&amp;#95setup&amp;#95post&amp;#95installation_0" class=" edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link" style="" marker-end="url(#mermaid-svg_flowchart-v2-pointEnd)" /><path d="M1314.313,284.47L1273.648,292.225C1232.984,299.98,1151.656,315.49,1110.992,335.903C1070.328,356.317,1070.328,381.633,1070.328,394.292L1070.328,406.95" id="snt-networking&amp;#95setup&amp;#95post&amp;#95installation-cyclic-special-1" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M1070.328,407.05L1070.328,419.708C1070.328,432.367,1070.328,457.683,1070.328,483C1070.328,508.317,1070.328,533.633,1070.328,546.292L1070.328,558.95" id="snt-networking&amp;#95setup&amp;#95post&amp;#95installation-cyclic-special-mid" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M1070.378,558.988L1123.916,546.323C1177.453,533.659,1284.528,508.329,1338.066,482.998C1391.603,457.667,1391.603,432.333,1391.603,407C1391.603,381.667,1391.603,356.333,1397.87,337.5C1404.138,318.667,1416.672,306.333,1422.94,300.167L1429.207,294" id="snt-networking&amp;#95setup&amp;#95post&amp;#95installation-cyclic-special-2" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M1565.181,294L1580.414,300.167C1595.647,306.333,1626.112,318.667,1641.345,330.333C1656.578,342,1656.578,353,1656.578,358.5L1656.578,364" id="L_snt-networking&amp;#95setup&amp;#95post&amp;#95installation_snt-subscription&amp;#95manager&amp;#95registration_0" class=" edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link" style="" marker-end="url(#mermaid-svg_flowchart-v2-pointEnd)" /><path d="M1503.844,423.507L1412.1,433.423C1320.357,443.338,1136.87,463.169,1045.126,485.743C953.383,508.317,953.383,533.633,953.383,546.292L953.383,558.95" id="snt-subscription&amp;#95manager&amp;#95registration-cyclic-special-1" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M953.383,559.05L953.383,575.708C953.383,592.367,953.383,625.683,953.383,657C953.383,688.317,953.383,717.633,953.383,732.292L953.383,746.95" id="snt-subscription&amp;#95manager&amp;#95registration-cyclic-special-mid" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M953.433,746.992L1045.027,732.327C1136.62,717.661,1319.808,688.331,1411.402,656.999C1502.995,625.667,1502.995,592.333,1502.995,563C1502.995,533.667,1502.995,508.333,1515.457,489.5C1527.919,470.667,1552.842,458.333,1565.304,452.167L1577.766,446" id="snt-subscription&amp;#95manager&amp;#95registration-cyclic-special-2" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M1737.74,446L1750.574,452.167C1763.407,458.333,1789.074,470.667,1801.907,482.333C1814.741,494,1814.741,505,1814.741,510.5L1814.741,516" id="L_snt-subscription&amp;#95manager&amp;#95registration_snt-configure&amp;#95time&amp;#95synchronization_0" class=" edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link" style="" marker-end="url(#mermaid-svg_flowchart-v2-pointEnd)" /><path d="M1672.233,573.442L1531.527,587.702C1390.822,601.962,1109.411,630.481,968.705,659.399C828,688.317,828,717.633,828,732.292L828,746.95" id="snt-configure&amp;#95time&amp;#95synchronization-cyclic-special-1" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M828,747.05L828,765.708C828,784.367,828,821.683,828,861C828,900.317,828,941.633,828,962.292L828,982.95" id="snt-configure&amp;#95time&amp;#95synchronization-cyclic-special-mid" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M828.05,982.992L958.254,962.327C1088.458,941.661,1348.866,900.331,1479.07,860.999C1609.274,821.667,1609.274,784.333,1609.274,751C1609.274,717.667,1609.274,688.333,1630.163,663.5C1651.052,638.667,1692.831,618.333,1713.72,608.167L1734.609,598" id="snt-configure&amp;#95time&amp;#95synchronization-cyclic-special-2" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M1838.599,598L1844.819,608.167C1851.038,618.333,1863.477,638.667,1869.697,658.333C1875.916,678,1875.916,697,1875.916,706.5L1875.916,716" id="L_snt-configure&amp;#95time&amp;#95synchronization_snt-idm&amp;#95register_0" class=" edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link" style="" marker-end="url(#mermaid-svg_flowchart-v2-pointEnd)" /><path d="M1788.565,755.377L1608.471,772.647C1428.377,789.918,1068.188,824.459,888.094,862.388C708,900.317,708,941.633,708,962.292L708,982.95" id="snt-idm&amp;#95register-cyclic-special-1" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M708,983.05L708,997.708C708,1012.367,708,1041.683,718.711,1069C729.423,1096.317,750.846,1121.633,761.557,1134.292L772.269,1146.95" id="snt-idm&amp;#95register-cyclic-special-mid" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M772.361,1146.996L924.963,1134.33C1077.566,1121.664,1382.77,1096.332,1535.373,1068.999C1687.975,1041.667,1687.975,1012.333,1687.975,977C1687.975,941.667,1687.975,900.333,1711.747,865.5C1735.52,830.667,1783.064,802.333,1806.837,788.167L1830.609,774" id="snt-idm&amp;#95register-cyclic-special-2" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M1895.972,774L1906.496,788.167C1917.019,802.333,1938.065,830.667,1948.589,858.333C1959.112,886,1959.112,913,1959.112,926.5L1959.112,940" id="L_snt-idm&amp;#95register_snt-remote&amp;#95execution&amp;#95ssh&amp;#95keys_0" class=" edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link" style="" marker-end="url(#mermaid-svg_flowchart-v2-pointEnd)" /><path d="M1827.721,991.433L1621.101,1004.694C1414.481,1017.955,1001.24,1044.478,794.62,1070.397C588,1096.317,588,1121.633,588,1134.292L588,1146.95" id="snt-remote&amp;#95execution&amp;#95ssh&amp;#95keys-cyclic-special-1" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M588,1147.05L588,1161.708C588,1176.367,588,1205.683,622.576,1235.005C657.152,1264.326,726.304,1293.653,760.88,1308.316L795.456,1322.979" id="snt-remote&amp;#95execution&amp;#95ssh&amp;#95keys-cyclic-special-mid" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M795.556,1322.996L961.079,1308.33C1126.603,1293.664,1457.649,1264.332,1623.172,1234.999C1788.695,1205.667,1788.695,1176.333,1788.695,1149C1788.695,1121.667,1788.695,1096.333,1804.51,1075.5C1820.326,1054.667,1851.956,1038.333,1867.771,1030.167L1883.586,1022" id="snt-remote&amp;#95execution&amp;#95ssh&amp;#95keys-cyclic-special-2" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M1990.463,1022L1997.028,1030.167C2003.594,1038.333,2016.724,1054.667,2023.289,1070.333C2029.854,1086,2029.854,1101,2029.854,1108.5L2029.854,1116" id="L_snt-remote&amp;#95execution&amp;#95ssh&amp;#95keys_snt-ansible&amp;#95ssh&amp;#95keys_0" class=" edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link" style="" marker-end="url(#mermaid-svg_flowchart-v2-pointEnd)" /><path d="M1923.37,1153L1680.808,1166.666C1438.246,1180.333,953.123,1207.667,710.562,1235.992C468,1264.317,468,1293.633,468,1308.292L468,1322.95" id="snt-ansible&amp;#95ssh&amp;#95keys-cyclic-special-1" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M468,1323.05L468,1337.708C468,1352.367,468,1381.683,524.366,1411.006C580.733,1440.329,693.466,1469.658,749.832,1484.322L806.198,1498.987" id="snt-ansible&amp;#95ssh&amp;#95keys-cyclic-special-mid" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M806.298,1498.996L984.742,1484.33C1163.186,1469.664,1520.074,1440.332,1698.518,1410.999C1876.963,1381.667,1876.963,1352.333,1876.963,1323C1876.963,1293.667,1876.963,1264.333,1894.626,1239.5C1912.29,1214.667,1947.617,1194.333,1965.28,1184.167L1982.944,1174" id="snt-ansible&amp;#95ssh&amp;#95keys-cyclic-special-2" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M2048.56,1174L2055.604,1184.167C2062.648,1194.333,2076.735,1214.667,2083.779,1234.333C2090.823,1254,2090.823,1273,2090.823,1282.5L2090.823,1292" id="L_snt-ansible&amp;#95ssh&amp;#95keys_snt-enable&amp;#95epel_0" class=" edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link" style="" marker-end="url(#mermaid-svg_flowchart-v2-pointEnd)" /><path d="M2003.885,1327.39L1727.904,1341.325C1451.923,1355.26,899.962,1383.13,623.981,1411.723C348,1440.317,348,1469.633,348,1484.292L348,1498.95" id="snt-enable&amp;#95epel-cyclic-special-1" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M348,1499.05L348,1513.708C348,1528.367,348,1557.683,424.528,1589.007C501.056,1620.33,654.111,1653.659,730.639,1670.324L807.167,1686.989" id="snt-enable&amp;#95epel-cyclic-special-mid" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M807.267,1686.996L998.632,1670.33C1189.997,1653.664,1572.727,1620.332,1764.091,1588.999C1955.456,1557.667,1955.456,1528.333,1955.456,1499C1955.456,1469.667,1955.456,1440.333,1971.095,1415.5C1986.734,1390.667,2018.012,1370.333,2033.651,1360.167L2049.29,1350" id="snt-enable&amp;#95epel-cyclic-special-2" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M2111.367,1350L2119.104,1360.167C2126.84,1370.333,2142.312,1390.667,2150.048,1410.333C2157.784,1430,2157.784,1449,2157.784,1458.5L2157.784,1468" id="L_snt-enable&amp;#95epel_snt-luks&amp;#95encryption_0" class=" edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link" style="" marker-end="url(#mermaid-svg_flowchart-v2-pointEnd)" /><path d="M2058.862,1503.511L1753.718,1517.426C1448.574,1531.341,838.287,1559.17,533.144,1589.743C228,1620.317,228,1653.633,228,1670.292L228,1686.95" id="snt-luks&amp;#95encryption-cyclic-special-1" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M228,1687.05L228,1703.708C228,1720.367,228,1753.683,325.688,1787.007C423.376,1820.33,618.752,1853.661,716.44,1870.326L814.128,1886.991" id="snt-luks&amp;#95encryption-cyclic-special-mid" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M814.228,1886.996L1018.514,1870.33C1222.799,1853.664,1631.371,1820.332,1835.657,1786.999C2039.942,1753.667,2039.942,1720.333,2039.942,1687C2039.942,1653.667,2039.942,1620.333,2053.556,1593.5C2067.171,1566.667,2094.399,1546.333,2108.013,1536.167L2121.628,1526" id="snt-luks&amp;#95encryption-cyclic-special-2" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M2187.607,1526L2198.837,1536.167C2210.067,1546.333,2232.527,1566.667,2243.757,1586.333C2254.987,1606,2254.987,1625,2254.987,1634.5L2254.987,1644" id="L_snt-luks&amp;#95encryption_snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95script_0" class=" edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link" style="" marker-end="url(#mermaid-svg_flowchart-v2-pointEnd)" /><path d="M2095.58,1694.425L1764.317,1709.854C1433.054,1725.283,770.527,1756.142,439.263,1788.229C108,1820.317,108,1853.633,108,1870.292L108,1886.95" id="snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95script-cyclic-special-1" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M108,1887.05L108,1901.708C108,1916.367,108,1945.683,231.889,1968.516C355.777,1991.349,603.554,2007.698,727.443,2015.872L851.331,2024.047" id="snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95script-cyclic-special-mid" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M851.431,2024.048L1068.638,2015.873C1285.844,2007.699,1720.257,1991.349,1937.464,1968.508C2154.67,1945.667,2154.67,1916.333,2154.67,1885C2154.67,1853.667,2154.67,1820.333,2164.869,1793.5C2175.068,1766.667,2195.466,1746.333,2205.664,1736.167L2215.863,1726" id="snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95script-cyclic-special-2" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M2294.11,1726L2304.309,1736.167C2314.508,1746.333,2334.905,1766.667,2345.104,1786.333C2355.303,1806,2355.303,1825,2355.303,1834.5L2355.303,1844" id="L_snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95script_snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95service_0" class=" edge-thickness-normal edge-pattern-solid edge-thickness-normal edge-pattern-solid flowchart-link" style="" marker-end="url(#mermaid-svg_flowchart-v2-pointEnd)" /><path d="M2321.946,1926L2314.961,1934.167C2307.977,1942.333,2294.007,1958.667,2287.022,1975C2280.037,1991.333,2280.037,2007.667,2280.037,2015.833L2280.037,2024" id="snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95service-cyclic-special-1" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M2280.037,2024.1L2280.037,2034.267C2280.037,2044.433,2280.037,2064.767,2292.573,2085.102C2305.109,2105.436,2330.181,2125.773,2342.717,2135.941L2355.253,2146.109" id="snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95service-cyclic-special-mid" class=" edge-thickness-invisible edge-pattern-solid" style="" /><path d="M2355.352,2146.1L2365.344,2135.933C2375.336,2125.767,2395.32,2105.433,2405.311,2085.092C2415.303,2064.75,2415.303,2044.4,2415.303,2026.05C2415.303,2007.7,2415.303,1991.35,2409.735,1975.008C2404.167,1958.667,2393.03,1942.333,2387.462,1934.167L2381.894,1926" id="snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95service-cyclic-special-2" class=" edge-thickness-invisible edge-pattern-solid" style="" /></g><g class="edgeLabels"><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel" transform="translate(1174.8203125, 331)"><g class="label" transform="translate(-84.4921875, -12)"><foreignObject width="168.984375" height="24"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "><p>Initializes error handling</p></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel" transform="translate(1070.328125, 483)"><g class="label" transform="translate(-96.9453125, -12)"><foreignObject width="193.890625" height="24"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "><p>Configures host networking</p></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel" transform="translate(953.3828125, 659)"><g class="label" transform="translate(-105.3828125, -36)"><foreignObject width="210.765625" height="72"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;"><span class="edgeLabel "><p>Registers the system to the Satellite/Capsule;Determines if EPEL is activated in the AK</p></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel" transform="translate(828, 859)"><g class="label" transform="translate(-100, -60)"><foreignObject width="200" height="120"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;"><span class="edgeLabel "><p>Configures /etc/ntp.conf (RHEL7) or /etc/chrony.conf (RHEL8+) with the bare minimum of options</p></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel" transform="translate(708, 1071)"><g class="label" transform="translate(-100, -24)"><foreignObject width="200" height="48"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;"><span class="edgeLabel "><p>Registers the system to the appropriate IdM</p></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel" transform="translate(588, 1235)"><g class="label" transform="translate(-100, -36)"><foreignObject width="200" height="72"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;"><span class="edgeLabel "><p>Creates the remote execution user and adds SSH keys to the user</p></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel" transform="translate(468, 1411)"><g class="label" transform="translate(-100, -36)"><foreignObject width="200" height="72"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;"><span class="edgeLabel "><p>Create a user for Ansible automation and adds SSH keys to the user</p></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel" transform="translate(348, 1587)"><g class="label" transform="translate(-100, -36)"><foreignObject width="200" height="72"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;"><span class="edgeLabel "><p>Enables EPEL again if it was found being enabled within the AK</p></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel" transform="translate(228, 1787)"><g class="label" transform="translate(-100, -36)"><foreignObject width="200" height="72"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;"><span class="edgeLabel "><p>Adds a clevis-luks bind to an already created LUKS partition</p></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel" transform="translate(108, 1975)"><g class="label" transform="translate(-100, -24)"><foreignObject width="200" height="48"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;"><span class="edgeLabel "><p>Contains the Ansible post provisioning script</p></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g><g class="edgeLabel" transform="translate(2280.036718754098, 2085.10000000149)"><g class="label" transform="translate(-100, -36)"><foreignObject width="200" height="72"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;"><span class="edgeLabel "><p>Creates oneshot systemd service for Ansible post provisioning</p></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" class="labelBkg" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="edgeLabel "></span></div></foreignObject></g></g></g><g class="nodes"><g class="node default  " id="flowchart-A-0" transform="translate(1227.06640625, 35)"><rect class="basic label-container" style="" x="-71.3515625" y="-27" width="142.703125" height="54" /><g class="label" style="" transform="translate(-41.3515625, -12)"><rect /><foreignObject width="82.703125" height="24"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="nodeLabel "><p>Start %post</p></span></div></foreignObject></g></g><g class="node default  " id="flowchart-snt-post&amp;#95provisioning&amp;#95init-1" transform="translate(1227.06640625, 139)"><rect class="basic label-container" style="" x="-120.2734375" y="-27" width="240.546875" height="54" /><g class="label" style="" transform="translate(-90.2734375, -12)"><rect /><foreignObject width="180.546875" height="24"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="nodeLabel "><p>snt-post_provisioning_init</p></span></div></foreignObject></g></g><g class="node default  " id="flowchart-snt-networking&amp;#95setup&amp;#95post&amp;#95installation-3" transform="translate(1468.84375, 255)"><rect class="basic label-container" style="" x="-154.53125" y="-39" width="309.0625" height="78" /><g class="label" style="" transform="translate(-124.53125, -24)"><rect /><foreignObject width="249.0625" height="48"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;"><span class="nodeLabel "><p>snt-networking_setup_post_installation</p></span></div></foreignObject></g></g><g class="node default  " id="flowchart-snt-subscription&amp;#95manager&amp;#95registration-5" transform="translate(1656.578125, 407)"><rect class="basic label-container" style="" x="-152.734375" y="-39" width="305.46875" height="78" /><g class="label" style="" transform="translate(-122.734375, -24)"><rect /><foreignObject width="245.46875" height="48"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;"><span class="nodeLabel "><p>snt-subscription_manager_registration</p></span></div></foreignObject></g></g><g class="node default  " id="flowchart-snt-configure&amp;#95time&amp;#95synchronization-7" transform="translate(1814.7406250033528, 559)"><rect class="basic label-container" style="" x="-142.5078125" y="-39" width="285.015625" height="78" /><g class="label" style="" transform="translate(-112.5078125, -24)"><rect /><foreignObject width="225.015625" height="48"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;"><span class="nodeLabel "><p>snt-configure_time_synchronization</p></span></div></foreignObject></g></g><g class="node default  " id="flowchart-snt-idm&amp;#95register-9" transform="translate(1875.9164062533528, 747)"><rect class="basic label-container" style="" x="-87.3515625" y="-27" width="174.703125" height="54" /><g class="label" style="" transform="translate(-57.3515625, -12)"><rect /><foreignObject width="114.703125" height="24"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="nodeLabel "><p>snt-idm_register</p></span></div></foreignObject></g></g><g class="node default  " id="flowchart-snt-remote&amp;#95execution&amp;#95ssh&amp;#95keys-11" transform="translate(1959.1117187533528, 983)"><rect class="basic label-container" style="" x="-131.390625" y="-39" width="262.78125" height="78" /><g class="label" style="" transform="translate(-101.390625, -24)"><rect /><foreignObject width="202.78125" height="48"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;"><span class="nodeLabel "><p>snt-remote_execution_ssh_keys</p></span></div></foreignObject></g></g><g class="node default  " id="flowchart-snt-ansible&amp;#95ssh&amp;#95keys-13" transform="translate(2029.8539062533528, 1147)"><rect class="basic label-container" style="" x="-106.484375" y="-27" width="212.96875" height="54" /><g class="label" style="" transform="translate(-76.484375, -12)"><rect /><foreignObject width="152.96875" height="24"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="nodeLabel "><p>snt-ansible_ssh_keys</p></span></div></foreignObject></g></g><g class="node default  " id="flowchart-snt-enable&amp;#95epel-15" transform="translate(2090.8226562533528, 1323)"><rect class="basic label-container" style="" x="-86.9375" y="-27" width="173.875" height="54" /><g class="label" style="" transform="translate(-56.9375, -12)"><rect /><foreignObject width="113.875" height="24"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="nodeLabel "><p>snt-enable_epel</p></span></div></foreignObject></g></g><g class="node default  " id="flowchart-snt-luks&amp;#95encryption-17" transform="translate(2157.7835937533528, 1499)"><rect class="basic label-container" style="" x="-98.921875" y="-27" width="197.84375" height="54" /><g class="label" style="" transform="translate(-68.921875, -12)"><rect /><foreignObject width="137.84375" height="24"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 200px; text-align: center;"><span class="nodeLabel "><p>snt-luks_encryption</p></span></div></foreignObject></g></g><g class="node default  " id="flowchart-snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95script-19" transform="translate(2254.9867187533528, 1687)"><rect class="basic label-container" style="" x="-159.40625" y="-39" width="318.8125" height="78" /><g class="label" style="" transform="translate(-129.40625, -24)"><rect /><foreignObject width="258.8125" height="48"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;"><span class="nodeLabel "><p>snt-ansible_provisioning_callback_script</p></span></div></foreignObject></g></g><g class="node default  " id="flowchart-snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95service-21" transform="translate(2355.3031250033528, 1887)"><rect class="basic label-container" style="" x="-165.6328125" y="-39" width="331.265625" height="78" /><g class="label" style="" transform="translate(-135.6328125, -24)"><rect /><foreignObject width="271.265625" height="48"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table; white-space: break-spaces; line-height: 1.5; max-width: 200px; text-align: center; width: 200px;"><span class="nodeLabel "><p>snt-ansible_provisioning_callback_service</p></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-post&amp;#95provisioning&amp;#95init---snt-post&amp;#95provisioning&amp;#95init---1" transform="translate(1174.8203125, 255)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-post&amp;#95provisioning&amp;#95init---snt-post&amp;#95provisioning&amp;#95init---2" transform="translate(1174.8203125, 407)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-networking&amp;#95setup&amp;#95post&amp;#95installation---snt-networking&amp;#95setup&amp;#95post&amp;#95installation---1" transform="translate(1070.328125, 407)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-networking&amp;#95setup&amp;#95post&amp;#95installation---snt-networking&amp;#95setup&amp;#95post&amp;#95installation---2" transform="translate(1070.328125, 559)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-subscription&amp;#95manager&amp;#95registration---snt-subscription&amp;#95manager&amp;#95registration---1" transform="translate(953.3828125, 559)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-subscription&amp;#95manager&amp;#95registration---snt-subscription&amp;#95manager&amp;#95registration---2" transform="translate(953.3828125, 747)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-configure&amp;#95time&amp;#95synchronization---snt-configure&amp;#95time&amp;#95synchronization---1" transform="translate(828, 747)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-configure&amp;#95time&amp;#95synchronization---snt-configure&amp;#95time&amp;#95synchronization---2" transform="translate(828, 983)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-idm&amp;#95register---snt-idm&amp;#95register---1" transform="translate(708, 983)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-idm&amp;#95register---snt-idm&amp;#95register---2" transform="translate(772.3109375033528, 1147)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-remote&amp;#95execution&amp;#95ssh&amp;#95keys---snt-remote&amp;#95execution&amp;#95ssh&amp;#95keys---1" transform="translate(588, 1147)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-remote&amp;#95execution&amp;#95ssh&amp;#95keys---snt-remote&amp;#95execution&amp;#95ssh&amp;#95keys---2" transform="translate(795.5062500033528, 1323)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-ansible&amp;#95ssh&amp;#95keys---snt-ansible&amp;#95ssh&amp;#95keys---1" transform="translate(468, 1323)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-ansible&amp;#95ssh&amp;#95keys---snt-ansible&amp;#95ssh&amp;#95keys---2" transform="translate(806.2484375033528, 1499)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-enable&amp;#95epel---snt-enable&amp;#95epel---1" transform="translate(348, 1499)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-enable&amp;#95epel---snt-enable&amp;#95epel---2" transform="translate(807.2171875033528, 1687)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-luks&amp;#95encryption---snt-luks&amp;#95encryption---1" transform="translate(228, 1687)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-luks&amp;#95encryption---snt-luks&amp;#95encryption---2" transform="translate(814.1781250033528, 1887)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95script---snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95script---1" transform="translate(108, 1887)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95script---snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95script---2" transform="translate(851.3812500033528, 2024.050000000745)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95service---snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95service---1" transform="translate(2280.036718754098, 2024.050000000745)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g><g class="label edgeLabel" id="snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95service---snt-ansible&amp;#95provisioning&amp;#95callback&amp;#95service---2" transform="translate(2355.3031250033528, 2146.150000002235)"><rect width="0.1" height="0.1" /><g class="label" style="" transform="translate(0, 0)"><rect /><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; line-height: 1.5; max-width: 10px; text-align: center;"><span class="nodeLabel "></span></div></foreignObject></g></g></g></g></g></svg>

<p>That’s quite a list, let’s go through them step by step.</p>

<h4 id="template-pvt-provision">Template: <code class="language-plaintext highlighter-rouge">pvt-provision</code></h4>

<p>Before we dive into the Snippets, a couple of things happen in the Provision Template that are noteworthy.</p>

<p>First, we switch to <a href="https://man7.org/linux/man-pages/man4/tty.4.html">TTY</a> 3 so that we can actually see something during provisioning :grin:.</p>

<p>Moreover the following things happen (in between these steps various Snippets are run):</p>

<ul>
  <li>Import the GPG keys for RHEL to avoid an exit code of <code class="language-plaintext highlighter-rouge">dnf</code> and <code class="language-plaintext highlighter-rouge">yum</code> which signals an error (greater than 0)</li>
  <li>Install some applications that I’d like to have on all of my systems (such as <code class="language-plaintext highlighter-rouge">systat</code>, <code class="language-plaintext highlighter-rouge">tmux</code> and <code class="language-plaintext highlighter-rouge">vim-enhanced</code>). I install them separately as they are in the RHEL AppStream
repository and some time ago (I cannot recall in which RHEL minor and Satellite version exactly) it was not possible to enable more than one repository <em>before</em> Kickstart enters
the <code class="language-plaintext highlighter-rouge">%post</code> section</li>
  <li>Update all packages: That is important as we might have booted from an older RHEL minor release while the Content View might provide a later version of RHEL</li>
  <li>Define <code class="language-plaintext highlighter-rouge">__NTP_SERVER</code> (more on that in <a href="#snippet-snt-configure_time_synchronization"><code class="language-plaintext highlighter-rouge">snt-configure_time_synchronization</code></a>)</li>
  <li>Create the file <code class="language-plaintext highlighter-rouge">./autorelabel</code> to force relabeling of SELinux contexts</li>
</ul>

<p>.. and as mentioned it includes all the Snippets that we have seen in the flow chart in the <a href="#post-section-flow"><code class="language-plaintext highlighter-rouge">%post</code> section flow</a></p>

<h4 id="snippet-snt-post_provisioning_init">Snippet: <code class="language-plaintext highlighter-rouge">snt-post_provisioning_init</code></h4>

<p>This very first snippet is probably the most important one. It sets up a <a href="https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_12_02.html">BASH exit trap</a> and ensures that whenever
<strong>any</strong> command fails, the provisioning fails as well (<code class="language-plaintext highlighter-rouge">set -o errexit</code>). Exiting should also happen if a pipe is used (<code class="language-plaintext highlighter-rouge">|</code>) and any command in the complete pipe fails
(<code class="language-plaintext highlighter-rouge">set -o pipefail</code>). To avoid that variables are referenced without being defined (something BASH does not care about by default), it ensures that unset variables are treated as
an error (<code class="language-plaintext highlighter-rouge">set -o nounset</code>). Lastly, all of that should also apply to <a href="https://tldp.org/LDP/abs/html/subshells.html">sub-shells</a> (<code class="language-plaintext highlighter-rouge">set -o errtrace</code> and <code class="language-plaintext highlighter-rouge">set -o functrace</code>).</p>

<p>Okay, but why all of that?</p>

<p>This procedure guarantees that <strong>every</strong> provisioning was <strong>successful</strong>. Not partially successful, but <strong>completely successful</strong>.</p>

<p>Of course, it requires that commands that are invoked ‘play nicely’ and exit with a proper exit code when they encounter an error.</p>

<p>It also has (as with everything) a downside: You need to ensure that every command you invoke, every sub-shell you spawn and every process you invoke needs to <strong>succeed</strong>.
Otherwise the installation <strong>will</strong> terminate.</p>

<p>A good example of <em>bad behavior</em> is for instance <code class="language-plaintext highlighter-rouge">subscription-manager</code>. When you enable <a href="https://access.redhat.com/articles/simple-content-access">Simple Content Access (SCA)</a>
for your Satellite, you don’t need a subscription and thus Satellite clients have no subscription assigned. <code class="language-plaintext highlighter-rouge">subscription-manager</code> considers this to be an error and when it exits,
it exits with an exit code that indicates an error.</p>

<p>So, how do you deal with a situation like this? Just let BASH know it’s okay if the process fails. See the following example:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code>subscription-manager register --name='<span class="cp">&lt;%=</span> <span class="vi">@host</span><span class="p">.</span><span class="nf">name</span> <span class="cp">%&gt;</span>' --org='<span class="cp">&lt;%=</span> <span class="n">subscription_manager_org</span> <span class="cp">%&gt;</span>' --activationkey='<span class="cp">&lt;%=</span> <span class="n">activation_key</span> <span class="cp">%&gt;</span>' || true
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">||</code> is a <a href="https://tldp.org/LDP/abs/html/comparison-ops.html">logical OR operator</a> that <em>guarantees</em> that the command does not fail. Everything that we put before the <code class="language-plaintext highlighter-rouge">||</code>
will evaluate as <code class="language-plaintext highlighter-rouge">true</code>; Thus it is considered as <em>succeeded</em>.</p>

<p>Let me try to explain that a bit more ‘understandable’ :speak_no_evil:</p>

<p>Consider the following example code:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>command1 <span class="o">||</span> <span class="nb">true</span>
</code></pre></div></div>

<p>Using natural language this would translate to something like: “Run <code class="language-plaintext highlighter-rouge">command1</code> but if that fails, don’t worry, it’s fine anyway.”</p>

<p>You can even do <code class="language-plaintext highlighter-rouge">false || true</code> and you’ll see with <code class="language-plaintext highlighter-rouge">echo $?</code> (which returns the last exit code) that BASH exited with 0 (which equals to <code class="language-plaintext highlighter-rouge">true</code> in BASH - unlike in <em>every</em> other
language :see_no_evil: ).</p>

<p>Does that obsolete the use of the BASH options that have been implemented in the beginning?</p>

<p>Yes, absolutely. But only for this <strong>one</strong> command. I think it’s better to be 99% sure that a system has been deployed successfully, compared to close to 0% (when not using the
aforementioned BASH options).</p>

<p>This ‘workaround’ can be used for every command you encounter that doesn’t ‘play nice’. <strong>But</strong>, remember, the more often you do it (maybe just to ‘make it work’) the less
useful the BASH options are and with every use of <code class="language-plaintext highlighter-rouge">||</code> you can be less and less sure whether the system has really been deployed successfully.</p>

<p>Obviously, this is a very strict way of deploying systems. And one could argue even cumbersome. You can do a post provisioning check with your preferred automation tool <em>after</em>
provisioning.</p>

<p>While that it is correct, I found my way more intuitive and more <em>‘fail-proof’</em>, compared to a post provisioning check, as I can rule out e.g. <code class="language-plaintext highlighter-rouge">DNS</code> issues due to a failed <code class="language-plaintext highlighter-rouge">IdM</code>
enrollment (which would render my post provisioning check useless, as I am unable to reach it via <code class="language-plaintext highlighter-rouge">DNS</code>).</p>

<h4 id="snippet-snt-networking_setup_post_installation">Snippet: <code class="language-plaintext highlighter-rouge">snt-networking_setup_post_installation</code></h4>

<p>Next up we have the Snippet <code class="language-plaintext highlighter-rouge">snt-networking_setup_post_installation</code>. It is derived from the Snippets that Red Hat ships by default:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">kickstart_networking_setup</code></li>
  <li><code class="language-plaintext highlighter-rouge">kickstart_ifcfg_get_identifier_names</code></li>
  <li><code class="language-plaintext highlighter-rouge">kickstart_ifcfg_bond_interface</code></li>
  <li><code class="language-plaintext highlighter-rouge">kickstart_ifcfg_bonded_interface</code></li>
  <li><code class="language-plaintext highlighter-rouge">kickstart_ifcfg_generic_interface</code></li>
</ul>

<p>I decided to put everything into <em>one</em> Snippet instead of splitting it out like Red Hat did. The original ones <em>make sense</em>, don’t get me wrong, but since I have it highly
customized on <em>my</em> use case, I don’t need to split the Snippets as I don’t reuse them anywhere else. The splitting <em>probably</em> happened with the initial thought
of: “<em>I might be able to reuse it!</em>”. For me this is not necessary and introduces more complexity when troubleshooting (you need to switch between different Snippets all the
time), so I merged all of them.</p>

<p>Additionally, my customized version supports <code class="language-plaintext highlighter-rouge">VLANs</code>. Something that the original Snippets do not.</p>

<p>Further, I modified it in such a way, that the Snippet is actually readable (with a few comments added as well), as I find the original one is hard to read and thus hard to
troubleshoot should you encounter issues.</p>

<p>Here is the thing: You can make Templates in Satellite with <code class="language-plaintext highlighter-rouge">ERB</code> readable in two ways. Either you indent the <code class="language-plaintext highlighter-rouge">ERB</code> code itself like so:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    # Loop 1.1: iterate over all managed slave interfaces of this bond
  <span class="cp">&lt;%</span> <span class="vi">@host</span><span class="p">.</span><span class="nf">interfaces_with_identifier</span><span class="p">(</span><span class="n">bond</span><span class="p">.</span><span class="nf">attached_devices_identifiers</span><span class="p">).</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">interface</span><span class="o">|</span> <span class="cp">-%&gt;</span>
    <span class="cp">&lt;%</span> <span class="k">next</span> <span class="k">if</span> <span class="o">!</span><span class="n">interface</span><span class="p">.</span><span class="nf">managed?</span> <span class="cp">-%&gt;</span>

    <span class="cp">&lt;%</span>
    <span class="n">subnet</span> <span class="o">=</span> <span class="n">interface</span><span class="p">.</span><span class="nf">subnet</span>
    <span class="n">virtual</span> <span class="o">=</span> <span class="n">interface</span><span class="p">.</span><span class="nf">virtual?</span>
    <span class="n">vlan</span> <span class="o">=</span> <span class="n">virtual</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">subnet</span><span class="p">.</span><span class="nf">has_vlanid?</span> <span class="o">||</span> <span class="n">interface</span><span class="p">.</span><span class="nf">vlanid</span><span class="p">.</span><span class="nf">present?</span><span class="p">)</span>
    <span class="n">alias_type</span> <span class="o">=</span> <span class="n">virtual</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">subnet</span><span class="p">.</span><span class="nf">nil?</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">subnet</span><span class="p">.</span><span class="nf">has_vlanid?</span> <span class="o">&amp;&amp;</span> <span class="n">interface</span><span class="p">.</span><span class="nf">identifier</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s1">':'</span><span class="p">)</span>
    <span class="n">dhcp</span> <span class="o">=</span> <span class="o">!</span><span class="n">subnet</span><span class="p">.</span><span class="nf">nil?</span> <span class="o">&amp;&amp;</span> <span class="n">subnet</span><span class="p">.</span><span class="nf">dhcp_boot_mode?</span>
    <span class="cp">-%&gt;</span>
</code></pre></div></div>

<p>Or, you indent the code inside the <code class="language-plaintext highlighter-rouge">ERB</code> tags, like so:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;%-</span> <span class="vi">@host</span><span class="p">.</span><span class="nf">bond_interfaces</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">bond</span><span class="o">|</span> <span class="cp">-%&gt;</span>
<span class="cp">&lt;%-</span>   <span class="n">bonding_interfaces</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="n">bond</span><span class="p">.</span><span class="nf">identifier</span><span class="p">)</span> <span class="cp">-%&gt;</span>
<span class="cp">&lt;%=</span>   <span class="s2">"# </span><span class="si">#{</span><span class="n">bond</span><span class="p">.</span><span class="nf">identifier</span><span class="si">}</span><span class="s2"> interface"</span> <span class="cp">%&gt;</span>
</code></pre></div></div>

<p>The difference is, that Ruby, well <code class="language-plaintext highlighter-rouge">ERB</code>, does <em>not care</em> about indentation inside the <code class="language-plaintext highlighter-rouge">ERB</code> tags (<code class="language-plaintext highlighter-rouge">&lt;%- -%&gt;</code>, <code class="language-plaintext highlighter-rouge">&lt;%=  %&gt;</code>, etc.). This will result in a rendered file which has the
beginning of each line at the very start without any spaces in front.</p>

<p>If you chose my method (which I find more readable), you’ll end up with a <em>rendered</em> file (after <code class="language-plaintext highlighter-rouge">ERB</code> was processed) that looks like this:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nv">BOOTPROTO</span><span class="o">=</span>dhcp
      <span class="nv">IPADDR</span><span class="o">=</span>172.31.3.254
      <span class="nv">NETMASK</span><span class="o">=</span>255.255.255.0
        <span class="nv">GATEWAY</span><span class="o">=</span>172.31.3.1

    <span class="nv">DEVICE</span><span class="o">=</span>eno1
    <span class="nv">ONBOOT</span><span class="o">=</span><span class="nb">yes
    </span><span class="nv">PEERDNS</span><span class="o">=</span>no
    <span class="nv">PEERROUTES</span><span class="o">=</span>no
    <span class="nv">DEFROUTE</span><span class="o">=</span><span class="nb">yes
    </span><span class="nv">TYPE</span><span class="o">=</span>Bond
</code></pre></div></div>

<p>This sometimes is a problem for the application that makes use of the rendered file ultimately (in this case <code class="language-plaintext highlighter-rouge">NetworkManager</code>), but more important, makes it hard to troubleshoot
after deployment.</p>

<p>To overcome situations like this, I simply use the following approach (within Kickstart):</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">sed</span> <span class="nt">-i</span> <span class="nt">-E</span> <span class="s1">'s/^[[:space:]]+//g'</span> <span class="s2">"</span><span class="k">${</span><span class="nv">file</span><span class="k">}</span><span class="s2">"</span>
  <span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'/^$/d'</span> <span class="s2">"</span><span class="k">${</span><span class="nv">file</span><span class="k">}</span><span class="s2">"</span>
</code></pre></div></div>

<p>The above <code class="language-plaintext highlighter-rouge">sed</code> commands will remove white spaces at the beginning (that happened due to indentation) and remove empty lines. Of course, this is an extra step that needs to be
performed, during Kickstart. For me, though, the benefits outweigh the downsides of this. I can read and troubleshoot the Kickstart files in Satellite a lot better, as the
indentation is simply correct.</p>

<h4 id="snippet-snt-subscription_manager_registration">Snippet: <code class="language-plaintext highlighter-rouge">snt-subscription_manager_registration</code></h4>

<p>Next up is the Snippet <code class="language-plaintext highlighter-rouge">snt-subscription_manager_registration</code>. It is derived of <code class="language-plaintext highlighter-rouge">redhat_register</code> and has been overly simplified. It does <em>not</em> support an HTTP proxy, for
instance, as I don’t need it.</p>

<p>The one specialty I’d like to point out is that it checks for <a href="https://docs.fedoraproject.org/en-US/epel">Extra Packages for Enterprise Linux (<code class="language-plaintext highlighter-rouge">EPEL</code>)</a> repositories and disables
them right after registering with Satellite.</p>

<p>The responsible code Snippet is the following:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code>write_output "Trying to find out if EPEL is activated within the activation key <span class="cp">&lt;%=</span> <span class="n">host_param</span><span class="p">(</span><span class="s1">'kt_activation_keys'</span><span class="p">)</span> <span class="cp">%&gt;</span>" "INFO";
__ORGANIZATION_NAME="<span class="cp">&lt;%=</span> <span class="vi">@host</span><span class="p">.</span><span class="nf">rhsm_organization_label</span> <span class="cp">%&gt;</span>"
__PRODUCT_NAME="prd-fedora-epel"
__REPOSITORY_NAME="repo-epel-latest-el-<span class="cp">&lt;%=</span> <span class="vi">@host</span><span class="p">.</span><span class="nf">operatingsystem</span><span class="p">.</span><span class="nf">major</span><span class="p">.</span><span class="nf">to_i</span> <span class="cp">%&gt;</span>"
__REPOSITORY_ID="${__ORGANIZATION_NAME}_${__PRODUCT_NAME}_${__REPOSITORY_NAME}"

write_output "Repository ID: ${__REPOSITORY_ID}" "INFO";

# Also it is worth to update subscription-manager at this moment
write_output "Updating subscription-manager" "INFO";
${__PACKAGE_MANAGER} ${__PACKAGE_MANAGER_ARGUMENTS} update subscription-manager

foundEpelRepositoryName=1
foundEpelRepositoryId=1

# go line-wise through enabled repositories
while read -r subscriptionInformationLine; do
    # we only care for repo ID and name
    if [[ ! "${subscriptionInformationLine^^}" =~ ^REPO[[:space:]]ID|NAME: ]]; then
        continue;
    fi

    # both repo ID and name need to be found
    if [[ "${subscriptionInformationLine^^}" =~ ^REPO[[:space:]]ID:[[:space:]]+${__REPOSITORY_ID^^}$ ]]; then
        foundEpelRepositoryId=0
    elif [[ "${subscriptionInformationLine^^}" =~ ^REPO[[:space:]]NAME:[[:space:]]+${__REPOSITORY_NAME^^}$ ]]; then
        foundEpelRepositoryName=0
    fi
done <span class="nt">&lt;</span> <span class="err">&lt;(</span><span class="na">subscription-manager</span> <span class="na">repos</span> <span class="na">--list-enabled</span><span class="err">)</span>

<span class="na">if</span> <span class="err">[[</span> <span class="err">"${</span><span class="na">foundEpelRepositoryId</span><span class="err">}"</span> <span class="na">-eq</span> <span class="err">0</span> <span class="err">]]</span> <span class="err">&amp;&amp;</span> <span class="err">[[</span> <span class="err">"${</span><span class="na">foundEpelRepositoryName</span><span class="err">}"</span> <span class="na">-eq</span> <span class="err">0</span> <span class="err">]];</span> <span class="na">then</span>
    <span class="na">write_output</span> <span class="err">"</span><span class="na">Found</span> <span class="na">enabled</span> <span class="na">EPEL</span> <span class="na">repository</span><span class="err">,</span> <span class="na">will</span> <span class="na">disable</span> <span class="na">it</span> <span class="na">for</span> <span class="na">now</span><span class="err">"</span> <span class="err">"</span><span class="na">INFO</span><span class="err">";</span>
    <span class="na">subscription-manager</span> <span class="na">repos</span> <span class="na">--disable</span> <span class="err">"${</span><span class="na">__REPOSITORY_ID</span><span class="err">}"</span>
<span class="na">fi</span>
</code></pre></div></div>

<p>You might have noticed that the <code class="language-plaintext highlighter-rouge">__PRODUCT_NAME</code> and <code class="language-plaintext highlighter-rouge">__REPOSITORY_NAME</code> is based on my naming concept for Satellite<sup id="fnref:naming_concept" role="doc-noteref"><a href="#fn:naming_concept" class="footnote" rel="footnote">4</a></sup>. The definition of the <code class="language-plaintext highlighter-rouge">__REPOSITORY_ID</code> on
the other hand is Satellite’s default for custom repositories and is not influenced by me in any way.</p>

<p>Now to the reason why this is important: There are situations where you’d like to have <code class="language-plaintext highlighter-rouge">EPEL</code> repositories enabled, but there is catch with that. <code class="language-plaintext highlighter-rouge">EPEL</code> often times contains more
updated version of packages. This becomes an issue, when you mix and match the dependencies with packages from RHEL, as they are usually not meant to work with dependencies that
have a newer version than what is shipped in RHEL (e.g. <code class="language-plaintext highlighter-rouge">EPEL</code>). To prevent issues right from the get-go, I disable <code class="language-plaintext highlighter-rouge">EPEL</code> before installing or updating any packages. After the
provisioning has been done, the <code class="language-plaintext highlighter-rouge">EPEL</code> repository will be enabled again (that is done by the Snippet <a href="#snippet-snt-enable_epel"><code class="language-plaintext highlighter-rouge">snt-enable_epel</code></a>) if the <code class="language-plaintext highlighter-rouge">EPEL</code> repository is enabled
within the Activation Key.</p>

<h4 id="snippet-snt-configure_time_synchronization">Snippet: <code class="language-plaintext highlighter-rouge">snt-configure_time_synchronization</code></h4>

<p>The snippet <code class="language-plaintext highlighter-rouge">snt-configure_time_synchronization</code> has one job: Configuring the time synchronization either via <code class="language-plaintext highlighter-rouge">NTPd</code> (RHEL 7) or (RHEL 8 and above) <code class="language-plaintext highlighter-rouge">chronyd</code>. It deploys a
<strong>minimalist</strong> configuration for either of the daemons to ensure that the time is correct before we register the system to Red Hat’s Identity Management (<code class="language-plaintext highlighter-rouge">IdM</code>). If the time deviates
too much of the actual time, enrolling to <code class="language-plaintext highlighter-rouge">IdM</code> would fail (Microsoft Active Directory (AD) would refuse to add the system as well). This is because <code class="language-plaintext highlighter-rouge">LDAP</code> is (usually!) based on SSL
and SSL needs to have correct date and time set otherwise it will not work properly.</p>

<p>The <code class="language-plaintext highlighter-rouge">NTP</code> server to use, however, is determined way earlier in the Kickstart process. It is gathered in <a href="#template-pvt-provision"><code class="language-plaintext highlighter-rouge">pvt-provisioning</code></a> with the following code:</p>

<div class="language-erb highlighter-rouge"><div class="highlight"><pre class="highlight"><code>declare -r __NTP_SERVER="$(dig +short _ntp._udp.<span class="cp">&lt;%=</span> <span class="vi">@host</span><span class="p">.</span><span class="nf">domain</span> <span class="cp">-%&gt;</span> SRV | awk '{print $4}' | sed 's/\.$//')"
</code></pre></div></div>

<p>The above code snippet queries the <code class="language-plaintext highlighter-rouge">DNS</code> and asks for a <a href="https://en.wikipedia.org/wiki/SRV_record">service (<code class="language-plaintext highlighter-rouge">SRV</code>) record</a> at <code class="language-plaintext highlighter-rouge">_ntp._udp.example.com</code>. This means that you need to have
an <code class="language-plaintext highlighter-rouge">SRV</code> record for <code class="language-plaintext highlighter-rouge">_ntp._udp.example.com</code> as otherwise the provisioning will fail (early in the Kickstart). Of course, you need to substitute <code class="language-plaintext highlighter-rouge">example.com</code> with the domain the
host is going to be provisioned.</p>

<p>To as why the <code class="language-plaintext highlighter-rouge">NTP</code> server is determined early in the Kickstart and not in this Snippet: In the beginning of the Kickstart (<em>almost</em> at start of the <code class="language-plaintext highlighter-rouge">%post</code> section), I determine
everything that is required for the installation to proceed. Among these things is the <code class="language-plaintext highlighter-rouge">NTP</code> server. This is a benefit, because the installation will fail quicker and that way you
save some time. :sunglasses:</p>

<h4 id="snippet-snt-idm_register">Snippet: <code class="language-plaintext highlighter-rouge">snt-idm_register</code></h4>

<p>The Snippet <code class="language-plaintext highlighter-rouge">snt-idm_register</code> is derived by Red Hat’s Snippet <code class="language-plaintext highlighter-rouge">freeipa_register</code>. It is basically the same, but with removed support for any RHEL version prior to RHEL 7.</p>

<p>It is important to note, that <em>before</em> we install the <code class="language-plaintext highlighter-rouge">ipa-client</code> we updated the system to the latest available version. It is important, because otherwise, we would install
the latest available <code class="language-plaintext highlighter-rouge">ipa-client</code> on an older RHEL version, which <em>can</em> cause issues.</p>

<p>Moreover, the
<a href="https://access.redhat.com/documentation/de-de/red_hat_enterprise_linux/8/html/installing_identity_management/preparing-the-system-for-ipa-client-installation_installing-identity-management#installing-idm-client-packages-from-the-idm-client-stream_preparing-the-system-for-ipa-client-installation"><code class="language-plaintext highlighter-rouge">IdM</code> documentation</a>
notes that installing the <code class="language-plaintext highlighter-rouge">ipa-client</code> on RHEL 8 should be done by enabling the respective <code class="language-plaintext highlighter-rouge">module</code> instead of installing the <code class="language-plaintext highlighter-rouge">ipa-client</code>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dnf <span class="nt">-y</span> module <span class="nb">install </span>idm
</code></pre></div></div>

<p>Something, that is not part of the original Template. Maybe there is already a bug open for that which describes this issue or there might be a legitimate reason that it
is done differently - I don’t know. I chose to use the way the <code class="language-plaintext highlighter-rouge">IdM</code> documentation outlines.</p>

<h4 id="snippets-snt-remote_execution_ssh_keys-and-snt-ansible_ssh_keys">Snippets: <code class="language-plaintext highlighter-rouge">snt-remote_execution_ssh_keys</code> and <code class="language-plaintext highlighter-rouge">snt-ansible_ssh_keys</code></h4>

<p>Both <code class="language-plaintext highlighter-rouge">snt-remote_execution_ssh_keys</code> and <code class="language-plaintext highlighter-rouge">snt-ansible_ssh_keys</code> are practically the same. Both create a <strong>local</strong> user and add the defined SSH keys to the user. That’s it,
nothing special :slightly_smiling_face:</p>

<h4 id="snippet-snt-enable_epel">Snippet: <code class="language-plaintext highlighter-rouge">snt-enable_epel</code></h4>

<p>This snippet is pretty simple as well. It enabled <code class="language-plaintext highlighter-rouge">EPEL</code> again, when it is enabled within the Activation Key.</p>

<h4 id="snippet-snt-luks_encryption">Snippet: <code class="language-plaintext highlighter-rouge">snt-luks_encryption</code></h4>

<p>This Snippet is entirely custom-made and based on the documentation of
<a href="https://access.redhat.com/documentation/de-de/red_hat_enterprise_linux/8/html/security_hardening/configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening#configuring-manual-enrollment-of-volumes-using-clevis_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption"><code class="language-plaintext highlighter-rouge">clevis luks bind</code></a>.
This Snippet provides the possibility to use <a href="https://access.redhat.com/documentation/de-de/red_hat_enterprise_linux/8/html/security_hardening/configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening#network-bound-disk-encryption_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption">Network Bound Disk Encryption (<code class="language-plaintext highlighter-rouge">NBDE</code>)</a>
and requires <strong>two</strong> installed and configured <a href="https://access.redhat.com/documentation/de-de/red_hat_enterprise_linux/8/html/security_hardening/configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening#deploying-a-tang-server-with-selinux-in-enforcing-mode_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption">Tang servers</a>
(to have a backup Tang server should one die).</p>

<h4 id="snippets-snt-ansible_provisioning_callback_script-and-snt-ansible_provisioning_callback_service">Snippets: <code class="language-plaintext highlighter-rouge">snt-ansible_provisioning_callback_script</code> and <code class="language-plaintext highlighter-rouge">snt-ansible_provisioning_callback_service</code></h4>

<p>These last two Snippets place a script on the server and create a <code class="language-plaintext highlighter-rouge">systemd service</code> that launches a specific Job Template in Ansible Automation Platform. That Job Template would
usually configure the system initially; That would typically be such tasks as applying hardening, etc. This <code class="language-plaintext highlighter-rouge">systemd service</code> only runs <em>once</em> and disables itself afterwards.</p>

<h3 id="the-different-post-sections">The different <code class="language-plaintext highlighter-rouge">%post</code> sections</h3>

<p>With the Provisioning Template <code class="language-plaintext highlighter-rouge">pvt-provisioning</code> I included multiple <code class="language-plaintext highlighter-rouge">%post</code> sections. We have discussed the one that does the heavy lifting above. But there are three more :grin:</p>

<p>They are defined as follows:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">%post --interpreter=/bin/bash --nochroot --log=/mnt/sysimage/root/install.post.no.chroot.log</code></li>
  <li><code class="language-plaintext highlighter-rouge">%post --interpreter=/bin/bash --log=/root/install.post.log</code> - this is the one that we have been discussing</li>
  <li><code class="language-plaintext highlighter-rouge">%post --nochroot --log=/mnt/sysimage/root/install.post.no.chroot.journal.log</code></li>
  <li><code class="language-plaintext highlighter-rouge">%post --interpreter=/bin/bash --log=/root/install.post.notification.log</code></li>
</ol>

<p>The <code class="language-plaintext highlighter-rouge">%post</code> sections are evaluated from top to bottom. Even if one of them exited with an error the remaining <code class="language-plaintext highlighter-rouge">%post</code> sections will be evaluated.</p>

<p>Let’s quickly talk about the different <code class="language-plaintext highlighter-rouge">%post</code> sections.</p>

<ol>
  <li>The first <code class="language-plaintext highlighter-rouge">%post</code> section merely copies <code class="language-plaintext highlighter-rouge">/etc/resolv.conf</code> to the environment we are going to <a href="https://linux.die.net/man/1/chroot"><code class="language-plaintext highlighter-rouge">chroot</code></a> into
(<code class="language-plaintext highlighter-rouge">/mnt/sysimage/etc/resolv.conf</code>) so that we are able to do <code class="language-plaintext highlighter-rouge">DNS</code> resolution.</li>
  <li>We have discussed the second <code class="language-plaintext highlighter-rouge">%post</code> section thoroughly.</li>
  <li>The third <code class="language-plaintext highlighter-rouge">%post</code> section specifies the option <code class="language-plaintext highlighter-rouge">--nochroot</code>. This option is necessary, as we need control over <code class="language-plaintext highlighter-rouge">systemd</code> (which is not possible when being in a <code class="language-plaintext highlighter-rouge">chroot</code>). In
this <code class="language-plaintext highlighter-rouge">%post</code> section we ensure that we don’t lose any <code class="language-plaintext highlighter-rouge">journald</code> logs by making them persistent.</li>
  <li>This <code class="language-plaintext highlighter-rouge">%post</code> section is responsible for notifying the Satellite whether the installation went successful. It is determined that the installation failed when the file
<code class="language-plaintext highlighter-rouge">/tmp/installation.successful</code> does not exist. The file <code class="language-plaintext highlighter-rouge">/tmp/installation.successful</code> is created as the very last step in the main <code class="language-plaintext highlighter-rouge">%post</code> section. As it is the last command
that is executed in the main <code class="language-plaintext highlighter-rouge">%post</code> section, we can guarantee that the installation succeeded (due to the aforementioned BASH options).</li>
</ol>

<h3 id="pxelinux-templates"><code class="language-plaintext highlighter-rouge">PXELinux</code> Templates</h3>

<p>Lastly, we need to talk about the two <code class="language-plaintext highlighter-rouge">PXELinux</code> Templates I have in my repository:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">pvt-pxelinux</code></li>
  <li><code class="language-plaintext highlighter-rouge">pvt-pxelinux_default_local_boot</code></li>
</ul>

<h4 id="template-pvt-pxelinux">Template: <code class="language-plaintext highlighter-rouge">pvt-pxelinux</code></h4>

<p>This Template will render the options which are passed to our clients when they boot via <code class="language-plaintext highlighter-rouge">PXE</code> and the host has a build scheduled (build mode is set to <code class="language-plaintext highlighter-rouge">true</code> for the Host in Satellite).
It doesn’t look like much, but if you look closely, I include a Snippet: <code class="language-plaintext highlighter-rouge">snt-create_ip_config_string</code>
This Snippet is where the heavy lifting is done. It will generate all the networking parameters that are required. It is derived from the <code class="language-plaintext highlighter-rouge">kickstart_kernel_options</code> Template, but
again, heavily stripped down on what I need. On top, it fully supports <code class="language-plaintext highlighter-rouge">VLANs</code> and bonding. At the time I created my Snippet, that didn’t work with the original one. In the
meanwhile, the original one also provides this functionality :slightly_smiling_face:</p>

<h4 id="template-pvt-pxelinux_default_local_boot">Template: <code class="language-plaintext highlighter-rouge">pvt-pxelinux_default_local_boot</code></h4>

<p>The Template <code class="language-plaintext highlighter-rouge">pvt-pxelinux_default_local_boot</code> is derived from <code class="language-plaintext highlighter-rouge">PXELinux default local boot</code> and contains only one change: I set the timeout to 3 seconds instead of the
default 20 seconds. I just got tired of waiting.</p>

<h2 id="closing-thoughts">Closing thoughts</h2>

<p>There is one Template we haven’t talked about: <code class="language-plaintext highlighter-rouge">pvt-ipxe</code>. It is included because some time ago I used it. I no longer do, but I didn’t want to throw it away, in case I would
need it at some point. It was used to build Host/Full Host images and use those images to install my systems. I switched over to <code class="language-plaintext highlighter-rouge">PXE</code> - it is just much more convenient
:slightly_smiling_face:</p>

<p>We have been discussing <em>my</em> way of Kickstarting in this blog post. There are virtually unlimited ways of doing the same thing but different to this approach.</p>

<p>Decide on your own, if such a highly customized Kickstart is worth the maintenance .. until next time :sunglasses:</p>

<h2 id="change-log">Change log</h2>

<h3 id="2025-01-23">2025-01-23</h3>

<ul>
  <li>Fixing dead documentation links for kickstarting RHEL</li>
</ul>

<h3 id="2024-03-11">2024-03-11</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">markdownlint</code> fixes</li>
  <li>Spelling fixes</li>
</ul>

<h3 id="2024-03-09">2024-03-09</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">markdownlint</code> fixes</li>
</ul>

<h2 id="footnotes">Footnotes</h2>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:kickstart_changes" role="doc-endnote">
      <p><strong>Typically</strong>, <em>major changes</em> to Kickstart are <em>not</em> introduced in a minor version of RHEL. This, however, is <em>not</em> guaranteed. <a href="#fnref:kickstart_changes" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:service" role="doc-endnote">
      <p><a href="https://blog.scheib.me/2023/05/30/redhat-satellite-concept.html#definition-of-a-service">Read more about <em>my</em> definition of a <em>service</em> in Satellite</a> <a href="#fnref:service" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:host_params" role="doc-endnote">
      <p>The section name <code class="language-plaintext highlighter-rouge">Supported host parameters</code> is actually a bit misleading. You can, of course, override the parameters on any level in Satellite (Global, Host Group, Host, etc.). <a href="#fnref:host_params" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:naming_concept" role="doc-endnote">
      <p><a href="https://blog.scheib.me/2023/05/30/redhat-satellite-concept.html#naming-concept">Red Hat Satellite Naming Concept</a> <a href="#fnref:naming_concept" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Steffen Scheib</name></author><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Ansible Automation Platform - Automating the execution of job templates and leveraging the ‘prompt on launch’ feature</title><link href="https://blog.scheib.me/2023/06/21/ansible_automation_platform_promptable_promptable_job_templates.html" rel="alternate" type="text/html" title="Ansible Automation Platform - Automating the execution of job templates and leveraging the ‘prompt on launch’ feature" /><published>2023-06-21T00:00:00+00:00</published><updated>2025-06-17T00:00:00+00:00</updated><id>https://blog.scheib.me/2023/06/21/ansible_automation_platform_promptable_promptable_job_templates</id><content type="html" xml:base="https://blog.scheib.me/2023/06/21/ansible_automation_platform_promptable_promptable_job_templates.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>Just today I had an interesting conversation with a customer about the need to <strong>not</strong> duplicate job templates. To quickly give an overview about the problem:</p>

<ul>
  <li>Tens of thousands of hosts split across a numerous amount of locations</li>
  <li>The various locations all required a specific host (e.g. “jump host”) to access the specific location</li>
  <li>End users are making use of Ansible Tower/Ansible Automation Platform and do not know the location or even the names of their servers</li>
</ul>

<p>With Ansible Tower, the customer solved the problem by simply setting a host variable to each and every host that would override the <code class="language-plaintext highlighter-rouge">ssh_extra_args</code> variable for each and
every host so that Ansible would chose the correct jump host magically.</p>

<p>This is no longer possible with Ansible Automation Platform 2.x, as the execution nodes (as the formerly known isolates nodes are now called) no longer receive a connection
via SSH, but via <a href="https://github.com/ansible/receptor">receptor</a> from a controller or hop node (through the <a href="https://www.ansible.com/products/automation-mesh">Automation Mesh</a>).
The most straight forward way to overcome this obstacle is to basically duplicate the job templates as many times as required, but each time assign a new instance group and the
corresponding hosts to it. Either by specifying the <code class="language-plaintext highlighter-rouge">Limit</code> or creating a
<a href="https://docs.redhat.com/en/documentation/red_hat_ansible_automation_platform/2.5/html/using_automation_execution/controller-inventories#ref-controller-smart-inventories">Smart Inventory</a>
that would only contain the hosts that are reachable by the assigned
<a href="https://docs.redhat.com/en/documentation/red_hat_ansible_automation_platform/2.5/html/using_automation_execution/controller-instance-and-container-groups#con-controller-instance-groups">Instance Group</a>.</p>

<p>Unfortunately, this recommendation did not work for the customer, because the requirement of the customer was, that their internal customers do not know where the servers are
located and don’t want to launch multiple Job Templates to achieve one simple task.</p>

<p>Okay, so, but what about
<a href="https://docs.redhat.com/en/documentation/red_hat_ansible_automation_platform/2.5/html/using_automation_execution/controller-workflow-job-templates">Workflow Templates</a>?
Still not good enough, because that still would require multiple Job Templates to be set up to achieve the requirement of “1 Task, 1 Inventory, 1 Job Template”.</p>

<h2 id="ansible-automation-platform-and-the-prompt-on-launch-option">Ansible Automation Platform and the ‘Prompt on launch’ option</h2>

<p>Let me introduce you to Ansible Automation Platform’s “prompt able” fields. :grin:</p>

<p>First off: This idea is not new, so I didn’t invent it. I just didn’t find a lot of information on how to actually make such a scenario work at scale, so let me describe
the general idea in a bit more detail.</p>

<p>To recap, the requirements at this point are:</p>

<ul>
  <li>One Job- or Workflow Template</li>
  <li>No splitting of Inventories</li>
  <li>Ansible Automation Platform should “know” which Instance Group to use for which host</li>
</ul>

<p>The basic idea is the same as the customer has been doing for years: Add an additional variable to each and every host. With Ansible Tower this used to be the
<code class="language-plaintext highlighter-rouge">ssh_extra_args</code> but since that’s no longer a possibility, let’s think of how Ansible Automation Platform could “know” which Execution Node to use when executing a Job.</p>

<p>The answer is simple: Instance Groups.</p>

<p>The Instance Groups are defined by the customer based on location. For example a data center in Munich, Germany might be named <code class="language-plaintext highlighter-rouge">ig-germany-munich</code>
(<code class="language-plaintext highlighter-rouge">ig</code>: Instance Group). At the time of importing the hosts from their Inventory Source, they would know the location of the server and thus could save the Instance
Group as a variable, e.g. <code class="language-plaintext highlighter-rouge">instance_group: ig-germany-munich</code>.</p>

<p>Now that we have the Instance Group on every host, what can we do with it?</p>

<p>Generally, the idea is to create a ‘generic Job Template’ that would handle all the logic of assigning the correct Instance Group to use when targeting a specific host and
execute the “real” Job Template. I called this Job Template <code class="language-plaintext highlighter-rouge">jt-launch_job</code> - a fitting naming I’d say. :stuck_out_tongue_winking_eye:</p>

<p>But before we can actually launch the Job and see the magic happen, let me quickly summarize what I have done:</p>

<ol>
  <li>I used Red Hat Satellite as my Inventory Source. In the Satellite, I added a Host Parameter for each host which I called <code class="language-plaintext highlighter-rouge">instance_group</code> and set as value the Instance Group
I’d like to use in Ansible Automation Platform</li>
  <li>I created the corresponding Instance Groups in Ansible Automation Platform</li>
  <li>I set up a Job Template that I’d like to execute on all hosts (with different Instance Groups). In this Job Template I specified the following things:
    <ul>
      <li>The Inventory to use</li>
      <li>The Project to use</li>
      <li>The Credential to use</li>
      <li>I checked <code class="language-plaintext highlighter-rouge">Prompt on launch</code> for both Limit and Instance Groups, but did not specify <strong>any</strong> value</li>
      <li>Last but not least, I checked <code class="language-plaintext highlighter-rouge">Prevent Instance Group Fallback</code> to ensure that Ansible Automation Platform would <strong>not</strong> fall back to any other Instance Group if the
specified one is out of capacity at the moment</li>
    </ul>
  </li>
</ol>

<h2 id="magic">Magic</h2>

<p>So all that was left now was to create a Job Template with the name <code class="language-plaintext highlighter-rouge">jt-launch_job</code> and write the Ansible code that would make the magic happen. The code I’ve written can be
seen on my <a href="https://github.com/sscheib/ansible-demo-promptable_job_concept">GitHub</a> and is (mostly) straight forward.</p>

<p>I require a <code class="language-plaintext highlighter-rouge">job_template_name</code> to be set (that’s the Job Template where we retrieve the Inventory from and which we will launch multiple times) and a Credential of the type
<a href="https://docs.redhat.com/en/documentation/red_hat_ansible_automation_platform/2.5/html/using_automation_execution/controller-credentials#ref-controller-credential-aap">Red Hat Ansible Automation Platform</a>
to be assigned to the Job Template. This credential provides all the necessary information that we need to access the Controller (Controller Host, Username, Password).</p>

<p>What I do in the playbook is the following:</p>

<ul>
  <li>Ensure both the required variable and the environment variables which we expect from the Credential are set</li>
  <li>Gather information about the Job Template, from which we will extract the Inventory</li>
  <li>We will use the Inventory to determine the actual hosts, that will be targeted</li>
  <li>The most challenging part was to build a dictionary of Instance Groups, of which each one would contain a list of hosts to target. The information was present in the <code class="language-plaintext highlighter-rouge">variables</code>
of the host. You can take look at what I mean in <a href="https://github.com/sscheib/ansible-demo-promptable_job_concept/blob/main/launch_jobs.yml#L52">my code</a></li>
  <li>Finally, iterate over that dictionary and launch as many Jobs as required :slightly_smiling_face:</li>
</ul>

<p>For a better visualization, that dictionary would look something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TASK [debug] ****************************************************************************************************************************************************************************
ok: [localhost] =&gt; {
    "__hosts_instance_groups": {
        "ig-germany-munich": [
            "host1.example.com",
            "host3.example.com",
            "host6.example.com",
            "host4.example.com"
        ],
        "ig-germany-berlin": [
            "host2.example.com",
            "host5.example.com"
        ]
    }
}
</code></pre></div></div>

<p>This would eventually lead to spawning two times the Job Template I had specified. Once with the Instance Group <code class="language-plaintext highlighter-rouge">ig-germany-munich</code> and the hosts <code class="language-plaintext highlighter-rouge">host1, host3, host6, host4</code>
and the other time with the Instance Group <code class="language-plaintext highlighter-rouge">ig-germany-berlin</code> and the hosts <code class="language-plaintext highlighter-rouge">host2, host5</code>.</p>

<p>That’s already it - I hope it is useful for someone! :slightly_smiling_face:</p>

<h2 id="change-log">Change log</h2>

<h3 id="2025-06-17">2025-06-17</h3>

<ul>
  <li>Fixing broken links and correcting a few typos</li>
</ul>

<h3 id="2024-03-09">2024-03-09</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">markdownlint</code> fixes</li>
</ul>]]></content><author><name>Steffen Scheib</name></author><summary type="html"><![CDATA[Introduction]]></summary></entry></feed>